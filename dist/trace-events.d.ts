export namespace TraceEvent {
  interface Base {
    // Comma-separated list of category names.
    cat: string;
    // Process id of the process that generated the event.
    pid: number;
    // Thread id of the thread that generated the event.
    tid: number;
    // Timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
    ts: number;
  }

  type TraceEvent = 
    TraceEvent.A |
    TraceEvent.AAConvexPathOp |
    TraceEvent.AAStrokeRect |
    TraceEvent.AcquireLock |
    TraceEvent.ActivateLayerTree |
    TraceEvent.AddFrameDisplayed |
    ADFUEL.AdFuelDOMContentLoaded |
    ADFUEL.AdFuelInitialized |
    ADFUEL.AdFuelRequestComplete |
    ADFUEL.AdFuelwindow.Load |
    ADFUEL.AdRenderedad_bnr_atf_01 |
    ADFUEL.AdRenderedad_bnr_btf_01 |
    ADFUEL.AdRenderedad_mod_35731bb1e |
    ADFUEL.AdRenderedad_oop_float_01 |
    ADFUEL.AdRenderedad_rect_btf_02 |
    ADFUEL.ApplyingPageLevelTargeting |
    ADFUEL.ApplyingWindowSiteLevelOptions |
    ADFUEL.BuildingSlotad_bnr_atf_01 |
    ADFUEL.BuildingSlotad_bnr_atf_01End |
    ADFUEL.BuildingSlotad_bnr_atf_01Start |
    ADFUEL.BuildingSlotad_bnr_btf_01 |
    ADFUEL.BuildingSlotad_bnr_btf_01End |
    ADFUEL.BuildingSlotad_bnr_btf_01Start |
    ADFUEL.BuildingSlotad_bnr_btf_02 |
    ADFUEL.BuildingSlotad_bnr_btf_02End |
    ADFUEL.BuildingSlotad_bnr_btf_02Start |
    ADFUEL.BuildingSlotad_mod_35731bb1e |
    ADFUEL.BuildingSlotad_mod_35731bb1eEnd |
    ADFUEL.BuildingSlotad_mod_35731bb1eStart |
    ADFUEL.BuildingSlotad_oop_float_01 |
    ADFUEL.BuildingSlotad_oop_float_01End |
    ADFUEL.BuildingSlotad_oop_float_01Start |
    ADFUEL.BuildingSlotad_oop_skin_01 |
    ADFUEL.BuildingSlotad_oop_skin_01End |
    ADFUEL.BuildingSlotad_oop_skin_01Start |
    ADFUEL.BuildingSlotad_rect_btf_02 |
    ADFUEL.BuildingSlotad_rect_btf_02End |
    ADFUEL.BuildingSlotad_rect_btf_02Start |
    ADFUEL.DispatchQueue |
    ADFUEL.DispatchQueueEnd |
    ADFUEL.DispatchQueueStart |
    ADFUEL.GPTIncluded |
    ADFUEL.PageLevelGPTBuild |
    ADFUEL.PageLevelGPTBuildEnd |
    ADFUEL.PageLevelGPTBuildStart |
    ADFUEL.QueueRegistrycnn_homepage_rb |
    ADFUEL.QueueRegistrycnn_homepage_rbEnd |
    ADFUEL.QueueRegistrycnn_homepage_rbStart |
    ADFUEL.QueueRegistrycnn_homepage |
    ADFUEL.QueueRegistrycnn_homepageEnd |
    ADFUEL.QueueRegistrycnn_homepageStart |
    ADFUEL.RegisteringModule.AmazonA9Modulev3_2_5 |
    ADFUEL.RegisteringModule.CEPModulev3_0_2 |
    ADFUEL.RegisteringModule.CreativeReviewModulev3_0_5 |
    ADFUEL.RegisteringModule.CriteoModulev3_2_2 |
    ADFUEL.RegisteringModule.IndexExchangeWrapperModulev3_1_1 |
    ADFUEL.RegisteringModule.InViewRefreshv3_0_5 |
    ADFUEL.RegisteringModule.KruxModulev3_1_1 |
    ADFUEL.RegisteringModule.PrebidModulev3_3_0 |
    ADFUEL.RegisteringModule.ProximicModulev3_1_2 |
    ADFUEL.RegisteringModule.TransactionIDModulev3_1_1 |
    ADFUEL.RegisteringModule.TurnerGUIDModulev3_1_1 |
    ADFUEL.RegistryLoadcdn.Cnn.Comadscnncnn_homepage.Json |
    ADFUEL.RegistryLoadcdn.Cnn.Comadscnncnn_homepage.JsonEnd |
    ADFUEL.RegistryLoadcdn.Cnn.Comadscnncnn_homepage.JsonStart |
    ADFUEL.SendingRequest |
    ADFUEL.SendingRequestEnd |
    ADFUEL.SendingRequestStart |
    ADFUEL.SlotLoadedad_bnr_atf_01 |
    ADFUEL.SlotLoadedad_mod_35731bb1e |
    ADFUEL.SlotLoadedad_oop_float_01 |
    ADFUEL.SlotLoadedad_rect_btf_02 |
    TraceEvent.Allactivesurfacesready |
    TraceEvent.Animation |
    AnimationHost.ActivateAnimations |
    AnimationHost.TickAnimations |
    AnimationHost.UpdateAnimationState |
    ArrayBufferTrackerUpdatingItem.Process |
    AsyncLayerTreeFrameSink.SubmitCompositorFrame |
    TraceEvent.AsyncTask |
    TraceEvent.AtlasTextOp |
    AutocompleteController.Start |
    AutocompleteController.UpdateResult |
    BackgroundCompileTask.Run |
    BackgroundHTMLParser.PumpTokenizer |
    BackgroundHTMLParser.SendTokensToMainThread |
    Base.TraceEventSystemStatsMonitor.SystemStats |
    TraceEvent.BeginFrame |
    TraceEvent.BeginFrameArgs |
    TraceEvent.BeginMainThreadFrame |
    BenchmarkInstrumentation.DisplayRenderingStats |
    BenchmarkInstrumentation.ImplThreadRenderingStats |
    BitmapImage.DataChanged |
    BitmapImage.Draw |
    Blankframe.NooverlaysorCALayers |
    Blink.Mojom.AppCacheBackend |
    Blink.Mojom.AppCacheFrontend |
    Blink.Mojom.Blob |
    Blink.Mojom.BlobRegistry |
    Blink.Mojom.CodeCacheHost |
    Blink.Mojom.ManifestManager |
    Blink.Mojom.PluginRegistry |
    Blink.Mojom.StorageArea |
    Blink.Mojom.StoragePartitionService |
    BlinkGC.AllocatedObjectSizeSincePreviousGCKB |
    BlinkGC.AllocatedSpaceAtLastGCKB |
    BlinkGC.AllocatedSpaceKB |
    BlinkGC.AtomicPhase |
    BlinkGC.AtomicPhaseMarking |
    BlinkGC.CollectedWrapperCount |
    BlinkGC.CollectionRate |
    BlinkGC.CompleteSweep |
    BlinkGC.EagerSweep |
    BlinkGC.InvokePreFinalizers |
    BlinkGC.LazySweepOnAllocation |
    BlinkGC.MarkedObjectSizeAtLastCompleteSweepKB |
    BlinkGC.MarkInvokeEphemeronCallbacks |
    BlinkGC.MarkNotFullyConstructedObjects |
    BlinkGC.MarkProcessWorklist |
    BlinkGC.MarkWeakProcessing |
    BlinkGC.ObjectSizeAtLastGCKB |
    BlinkGC.PartitionAllocSizeAtLastGCKB |
    BlinkGC.VisitCrossThreadPersistents |
    BlinkGC.VisitDOMWrappers |
    BlinkGC.VisitPersistentRoots |
    BlinkGC.VisitPersistents |
    BlinkGC.VisitStackRoots |
    BlinkGC.WrapperCount |
    BlinkGC.WrapperCountAtLastGC |
    TraceEvent.BlinkGCMarking |
    BlobReader.CountSize |
    BlobReader.ReadBytesItem |
    BlobReader.ReadMore |
    BookmarkProvider.Start |
    BrowserCrApplication.SendEvent |
    TraceEvent.BrowserWorker0x7fd3431d1a00 |
    TraceEvent.BudgetPool_DisableThrottling |
    TraceEvent.CalculateRenderSurfaceLayerList |
    TraceEvent.CancelAnimationFrame |
    TraceEvent.CANCELLED |
    TraceEvent.CanExceedIdleDeadlineIfRequired |
    Canvas2DLayerBridge.FinalizeFrame |
    Canvas2DLayerBridge.FlushRecording |
    TraceEvent.Canvas2DLayerBridgeCreation |
    CanvasResourceProvider.Canvas |
    CanvasResourceProviderBitmap.CreateSkSurface |
    CARendererLayerTree.CommitScheduledCALayers |
    CategorizedWorkerPool.CollectCompletedTasks |
    CategorizedWorkerPool.ScheduleTasks |
    CategorizedWorkerPool.WaitForTasksToFinishRunning |
    CATransactionCoordinator.Postcommithandler |
    CATransactionCoordinator.Precommithandler |
    Cc.DisplayItemList |
    Cc.LayerImpl |
    Cc.LayerTreeHostImpl |
    Cc.Tile |
    Ccschedulerscheduler.L38 |
    Cctreeslayer_tree_host_impl.L300 |
    TraceEvent.CERT_VERIFIER_REQUEST_BOUND_TO_JOB |
    TraceEvent.CERT_VERIFIER_REQUEST |
    CertVerifierJob.OnJobCompleted |
    ChannelMojo.OnMessageReceived |
    CheckerImageTracker.DidActivateSyncTree |
    CheckerImageTracker.ScheduleImageDecodeQueue |
    CheckerImageTracker.ScheduleNextImageDecode |
    CheckerImageTracker.ShouldCheckerImage |
    CheckerImageTracker.TakeImagesToInvalidateOnSyncTree |
    TraceEvent.ChromeViewHostMsg_AllowDOMStorage |
    ChromiumRandomAccessFile.Read |
    TraceEvent.CircleOp |
    TraceEvent.CircularRRectOp |
    ClassicPendingScript.GetSource |
    TraceEvent.Cleanup_tq |
    TraceEvent.ClearusingTexSubImage2D |
    ClientSocketHandle.OnIOComplete |
    ColdModeSpellCheckRequester.Invoke |
    CommandBufferHelper.Finish |
    CommandBufferHelper.Flush |
    CommandBufferProxyImpl.Flush |
    CommandBufferProxyImpl.Initialize |
    CommandBufferProxyImpl.OrderingBarrier |
    CommandBufferProxyImpl.WaitForGetOffset |
    CommandBufferService.Paused |
    CommandBufferService.PutChanged |
    CommandBufferStub.OnAsyncFlush |
    CommandBufferStub.OnDestroyTransferBuffer |
    CommandBufferStub.OnRegisterTransferBuffer |
    CommandBufferStub.OnSetGetBuffer |
    CommandBufferStub.OnWaitForGetOffsetInRange |
    CommandBufferStub.PerformWork |
    TraceEvent.CommitLoad |
    TraceEvent.CommitPendingTreesToCA |
    TraceEvent.CompositeLayers |
    CompositingInputsUpdater.Update |
    CompositingLayerAssigner.Assign |
    CompositingRequirementsUpdater.UpdateRecursive |
    TraceEvent.Compositor_tq |
    CompositorFrameSinkSupport.DidNotProduceFrame |
    CompositorFrameSinkSupport.MaybeSubmitCompositorFrame |
    CompositorTimingHistory.DidDraw |
    ConcurrentMarking.RunPreempted |
    TraceEvent.CONNECT_JOB_SET_SOCKET |
    ConnectJob.NotifyDelegateOfCompletion |
    ConsoleMessage.Error |
    Content.Mojom.ChildHistogramFetcherFactory |
    Content.Mojom.Frame |
    Content.Mojom.FrameFactory |
    Content.Mojom.FrameInputHandler |
    Content.Mojom.FrameSinkProvider |
    Content.Mojom.RenderFrameMetadataObserverClient |
    Content.Mojom.SandboxSupportMac |
    Content.Mojom.Widget |
    ContentLayerDelegate.PaintContents |
    ContentSubresourceFilterThrottleManager.ReadyToCommitNavigation |
    TraceEvent.ContextCreatedNotification |
    TraceEvent.Control_tq |
    TraceEvent.COOKIE_STORE_COOKIE_ADDED |
    TraceEvent.COOKIE_STORE_COOKIE_DELETED |
    CpuProfiler.StartProfiling |
    TraceEvent.CreateIOSurface |
    TraceEvent.CSSFirstUsed |
    CSSParserImpl.ParseStyleSheet.Parse |
    CustomElementRegistry.Define |
    TraceEvent.Damagenotvisible |
    DataReductionProxyCompressionStats.RecordDataUseWithMimeType |
    TraceEvent.DecodeFont |
    TraceEvent.DecodeImage |
    TraceEvent.DecodeLazyPixelRef |
    TraceEvent.Default_tq |
    TraceEvent.DefaultPathOp |
    DelayBasedTimeSource.SetActive |
    Device.Mojom.PowerMonitor |
    Device.Mojom.PowerMonitorClient |
    Device.Mojom.TimeZoneMonitor |
    Device.Mojom.WakeLock |
    Device.Mojom.WakeLockContext |
    Device.Mojom.WakeLockProvider |
    TraceEvent.DidPrepareTiles |
    TraceEvent.DidProcessTask |
    DirectRenderer.DrawFrame |
    DirectRenderer.DrawRenderPass |
    Discardable_memory.Mojom.DiscardableSharedMemoryManager |
    DiscardableImageMap.Generate |
    TraceEvent.DiskUsage |
    Display.DrawAndSwap |
    Display.Resize |
    Display.SetSurfaceId |
    Display.SetVisible |
    Display.SurfaceDiscarded |
    DisplayCALayerTree.GotCAContextFrame |
    TraceEvent.DisplayCompositor |
    DisplayItemList.Finalize |
    DisplayLinkMac.DisplayLinkCallback |
    DisplayLinkMac.UpdateVSyncParameters |
    DisplayScheduler.BeginFrame |
    DisplayScheduler.DrawAndSwap |
    DisplayScheduler.OnBeginFrameDeadline |
    DisplayScheduler.Pending_swaps |
    DisplayScheduler.ScheduleBeginFrameDeadline |
    DisplayScheduler.SetNewRootSurface |
    DisplayScheduler.SetRootFrameMissing |
    DisplayScheduler.SurfaceDamaged |
    DisplayScheduler.SurfaceDamageExpected |
    DisplayScheduler.UpdateHasPendingSurfaces |
    TraceEvent.DNS_TRANSACTION_ATTEMPT |
    TraceEvent.DNS_TRANSACTION_QUERY |
    TraceEvent.DNS_TRANSACTION_RESPONSE |
    TraceEvent.DNS_TRANSACTION |
    Document.RebuildLayoutTree |
    Document.RecalcStyle |
    Document.Shutdown |
    Document.UpdateActiveStyle |
    Document.UpdateStyle |
    Document.UpdateStyleInvalidationIfNeeded |
    DocumentSubresourceFilter.GetLoadPolicy |
    DocumentTimeline.ServiceAnimations |
    TraceEvent.DomComplete |
    TraceEvent.DOMContentLoaded |
    TraceEvent.DomContentLoadedEventEnd |
    TraceEvent.DomContentLoadedEventStart |
    TraceEvent.DomInteractive |
    TraceEvent.DomLoading |
    TraceEvent.DomReady |
    TraceEvent.DOMStorageHostMsg_LoadStorageArea |
    TraceEvent.DOMStorageHostMsg_OpenStorageArea |
    TraceEvent.DOMStorageHostMsg_RemoveItem |
    TraceEvent.DOMStorageHostMsg_SetItem |
    TraceEvent.DOMStorageMsg_AsyncOperationComplete |
    TraceEvent.DOMStorageMsg_Event |
    TraceEvent.DomTime |
    DosplayResourceProvider.DeleteResourceInternal |
    TraceEvent.DoVerifyOnWorkerThread |
    Draw_property_utils.ComputeDrawPropertiesOfVisibleLayers |
    Draw_property_utils.FindLayersThatNeedUpdates |
    TraceEvent.DrawFrame |
    DrawLayers.FrameViewerTracing |
    TraceEvent.DrawLazyPixelRef |
    TraceEvent.Drawskipped |
    TraceEvent.DrawVerticesOp |
    TraceEvent.EarlyOut_DeferCommit_InsideBeginMainFrame |
    TraceEvent.EarlyOut_NoUpdates |
    EditingUtility.NextCandidateAlgorithm |
    EditingUtility.PreviousCandidateAlgorithm |
    ElementAnimations.SetRunState |
    TraceEvent.EnableLongIdlePeriod |
    TraceEvent.EndIdlePeriod |
    TraceEvent.EndofTrace |
    TraceEvent.Estimated_queueing_time_for_window |
    Evacuator.EvacuatePage |
    TraceEvent.EvaluateScript |
    Event.Pipeline |
    TraceEvent.EventDispatch |
    EventDispatcher.Dispatch |
    EventDispatcher.DispatchEvent |
    EventHandler.HandleMouseLeaveEvent |
    EventHandler.HandleMouseMoveEvent |
    EventHandler.HandleMousePressEvent |
    EventHandler.HandleMouseReleaseEvent |
    EventHandler.HitTestResultAtLocation |
    TraceEvent.ExtensionHostMsg_AddLazyListener |
    TraceEvent.ExtensionHostMsg_AddListener |
    TraceEvent.ExtensionHostMsg_CloseMessagePort |
    TraceEvent.ExtensionHostMsg_EventAck |
    TraceEvent.ExtensionHostMsg_ExecuteCodeFinished |
    TraceEvent.ExtensionHostMsg_GenerateUniqueID |
    TraceEvent.ExtensionHostMsg_GetMessageBundle |
    TraceEvent.ExtensionHostMsg_OpenChannelToExtension |
    TraceEvent.ExtensionHostMsg_OpenChannelToTab |
    TraceEvent.ExtensionHostMsg_OpenMessagePort |
    TraceEvent.ExtensionHostMsg_PostMessage |
    TraceEvent.ExtensionHostMsg_Request |
    TraceEvent.ExtensionHostMsg_RequestForIOThread |
    TraceEvent.ExtensionMsg_ActivateExtension |
    TraceEvent.ExtensionMsg_DeliverMessage |
    TraceEvent.ExtensionMsg_DispatchEvent |
    TraceEvent.ExtensionMsg_DispatchOnConnect |
    TraceEvent.ExtensionMsg_DispatchOnDisconnect |
    TraceEvent.ExtensionMsg_ExecuteCode |
    TraceEvent.ExtensionMsg_Loaded |
    TraceEvent.ExtensionMsg_NotifyRenderViewType |
    TraceEvent.ExtensionMsg_Response |
    TraceEvent.ExtensionMsg_SetScriptingWhitelist |
    TraceEvent.ExtensionMsg_SetSessionInfo |
    TraceEvent.ExtensionMsg_SetSystemFont |
    TraceEvent.ExtensionMsg_SetTabId |
    TraceEvent.ExtensionMsg_UpdateBrowserWindowId |
    TraceEvent.ExtensionMsg_UpdateDefaultPolicyHostRestrictions |
    TraceEvent.ExtensionMsg_UpdateUserScripts |
    TraceEvent.ExtensionMsg_ValidateMessagePort |
    TraceEvent.ExtensionMsg_WatchPages |
    Extensions.FeatureProvider.FeatureProviderStatic |
    TraceEvent.FaveReady_mark |
    TraceEvent.FaveReady |
    FaviconServiceImpl.GetFaviconForPageURL |
    FaviconServiceImpl.GetFaviconImageForPageURL |
    FaviconServiceImpl.RunFaviconImageCallbackWithBitmapResults |
    FaviconUtil.SelectFaviconFramesFromPNGs |
    FaviconUtil.SelectFaviconFramesFromPNGsWithoutResizing |
    TraceEvent.FeatureFirstUsed |
    TraceEvent.FetchStart |
    File.Close |
    File.Duplicate |
    File.Flush |
    File.GetInfo |
    File.Initialize |
    File.Read |
    File.ReadAtCurrentPos |
    File.Seek |
    File.SetLength |
    File.Write |
    File.WriteAtCurrentPos |
    TraceEvent.FillRectOp |
    TraceEvent.FireAnimationFrame |
    TraceEvent.FireIdleCallback |
    TraceEvent.FirstContentfulPaint |
    TraceEvent.FirstImagePaint |
    TraceEvent.FirstLayout |
    TraceEvent.FirstMeaningfulPaint |
    TraceEvent.FirstMeaningfulPaintCandidate |
    TraceEvent.FirstPaint |
    TraceEvent.FirstTextPaint |
    TraceEvent.FirstVisualChange |
    TraceEvent.FooterEnd |
    TraceEvent.FooterStart |
    TraceEvent.FooterTime |
    TraceEvent.Frame_deferrable_tq |
    TraceEvent.Frame_loading_control_tq |
    TraceEvent.Frame_loading_tq |
    TraceEvent.Frame_pausable_tq |
    TraceEvent.Frame_throttleable_tq |
    TraceEvent.Frame_unpausable_tq |
    TraceEvent.FrameBlameContext |
    TraceEvent.FrameCommittedInBrowser |
    TraceEvent.FrameDeletedInBrowser |
    TraceEvent.FrameHostMsg_BeforeUnload_ACK |
    TraceEvent.FrameHostMsg_CheckCompleted |
    TraceEvent.FrameHostMsg_CookiesEnabled |
    TraceEvent.FrameHostMsg_CreateChildFrame |
    TraceEvent.FrameHostMsg_DidAddContentSecurityPolicies |
    TraceEvent.FrameHostMsg_DidAddMessageToConsole |
    TraceEvent.FrameHostMsg_DidChangeFrameOwnerProperties |
    TraceEvent.FrameHostMsg_DidChangeLoadProgress |
    TraceEvent.FrameHostMsg_DidFailLoadWithError |
    TraceEvent.FrameHostMsg_DidFinishDocumentLoad |
    TraceEvent.FrameHostMsg_DidFinishLoad |
    TraceEvent.FrameHostMsg_DidStopLoading |
    TraceEvent.FrameHostMsg_DispatchLoad |
    TraceEvent.FrameHostMsg_DocumentOnLoadCompleted |
    TraceEvent.FrameHostMsg_FocusedNodeChanged |
    TraceEvent.FrameHostMsg_ForwardResourceTimingToParent |
    TraceEvent.FrameHostMsg_FrameFocused |
    TraceEvent.FrameHostMsg_HittestData |
    TraceEvent.FrameHostMsg_RouteMessageEvent |
    TraceEvent.FrameHostMsg_SuddenTerminationDisablerChanged |
    TraceEvent.FrameHostMsg_SwapOut_ACK |
    TraceEvent.FrameHostMsg_SynchronizeVisualProperties |
    TraceEvent.FrameHostMsg_UpdatePageImportanceSignals |
    TraceEvent.FrameHostMsg_UpdateRenderThrottlingStatus |
    TraceEvent.FrameHostMsg_UpdateState |
    TraceEvent.FrameHostMsg_UpdateTitle |
    TraceEvent.FrameHostMsg_UpdateUserActivationState |
    TraceEvent.FrameHostMsg_UpdateViewportIntersection |
    TraceEvent.FrameHostMsg_VisibilityChanged |
    TraceEvent.FrameLoader |
    TraceEvent.FrameMsg_AddContentSecurityPolicies |
    TraceEvent.FrameMsg_Delete |
    TraceEvent.FrameMsg_DeleteProxy |
    TraceEvent.FrameMsg_DidStartLoading |
    TraceEvent.FrameMsg_DidStopLoading |
    TraceEvent.FrameMsg_DidUpdateFramePolicy |
    TraceEvent.FrameMsg_DidUpdateOrigin |
    TraceEvent.FrameMsg_PostMessageEvent |
    TraceEvent.FrameMsg_ResetContentSecurityPolicy |
    TraceEvent.FrameMsg_SetAccessibilityMode |
    TraceEvent.FrameMsg_SetFrameOwnerProperties |
    TraceEvent.FrameMsg_UpdateUserActivationState |
    TraceEvent.FramePresented |
    FrameScheduler.FramePaused |
    FrameScheduler.FrameVisible |
    FrameScheduler.HasActiveConnection |
    FrameScheduler.KeepActive |
    FrameScheduler.Origin |
    FrameScheduler.PageFrozen |
    FrameScheduler.PageVisibility |
    FrameScheduler.SubResourceLoadingPaused |
    FrameScheduler.TaskQueuesThrottled |
    FrameScheduler.URL |
    TraceEvent.FrameStartedLoading |
    FrameTreeNode.DidStartLoading |
    FrameTreeNode.DidStopLoading |
    FrameView.Layout |
    FrameView.PerformLayout |
    FrameView.PerformPostLayoutTasks |
    FrameView.PerformPreLayoutTasks |
    FullEvacuator.RawEvacuatePage |
    TraceEvent.FullImage |
    TraceEvent.FunctionCall |
    GestureProvider.InitGestureDetectors |
    GestureProvider.OnTouchEvent |
    GLContextCGL.BackpressureFenceCreate |
    GLContextCGL.BackpressureFenceWait |
    GLContextCGL.MakeCurrent |
    GLES2.Finish |
    GLES2.GetGLError |
    GLES2.GetShaderPrecisionFormat |
    GLES2.GetString |
    GLES2.PostSubBufferCHROMIUM |
    GLES2CommandBufferStub.Initialize |
    GLES2DecoderImpl.ClearLevel |
    GLES2DecoderImpl.ClearLevelUsingGL |
    GLES2DecoderImpl.DoCompileShader |
    GLES2DecoderImpl.DoCreateAndConsumeTextureINTERNAL |
    GLES2DecoderImpl.DoLinkProgram |
    GLES2DecoderImpl.DoTexStorage2D |
    GLES2DecoderImpl.DoTexStorage2DImageCHROMIUM |
    GLES2DecoderImpl.HandlePostSubBufferCHROMIUM |
    GLES2DecoderImpl.HandleTexImage2D |
    GLES2DecoderImpl.HandleTexSubImage2D |
    GLES2DecoderImpl.Initialize |
    GLES2DecoderImpl.InitializeShaderTranslator |
    GLES2DecoderImpl.RestoreState |
    GLES2Implementation.CheckFramebufferStatus |
    GLES2Implementation.GetIntegerv |
    GLES2Implementation.Initialize |
    GLES2Implementation.SetAggressivelyFreeResources |
    GLFence.HasCompleted |
    GLImageIOSurface.BindTexImage |
    GlobalMemoryDump.Computation |
    GLRenderer.BeginDrawingFrame |
    GLRenderer.InitializeSharedObjects |
    GLRenderer.SwapBuffers |
    TraceEvent.GlResizeChromium |
    TraceEvent.Goog_123_3_1_end |
    TraceEvent.Goog_123_3_1_start |
    TraceEvent.Goog_123_3_1 |
    Gpu.EstablishGpuChannelSync |
    Gpu.State |
    GpuChannel.OnCreateCommandBuffer |
    GpuChannel.OnDestroyCommandBuffer |
    GpuChannelHost.CreateViewCommandBuffer |
    GpuChannelHost.Send |
    TraceEvent.GpuChannelMsg_CreateCommandBuffer |
    TraceEvent.GpuChannelMsg_CreateSharedImage |
    TraceEvent.GpuChannelMsg_CreateSharedImageWithData |
    TraceEvent.GpuChannelMsg_DestroyCommandBuffer |
    TraceEvent.GpuChannelMsg_DestroySharedImage |
    TraceEvent.GpuChannelMsg_RegisterSharedImageUploadBuffer |
    TraceEvent.GpuCommandBufferMsg_AsyncFlush |
    TraceEvent.GpuCommandBufferMsg_DestroyTransferBuffer |
    TraceEvent.GpuCommandBufferMsg_GetChannelToken |
    TraceEvent.GpuCommandBufferMsg_RegisterTransferBuffer |
    TraceEvent.GpuCommandBufferMsg_SetGetBuffer |
    TraceEvent.GpuCommandBufferMsg_WaitForGetOffsetInRange |
    GpuHostImpl.CreateChannelCache |
    GpuHostImpl.DidDestroyChannel |
    GpuHostImpl.EstablishGpuChannel |
    GpuHostImpl.OnChannelEstablished |
    GpuImageDecodeCache.CreateImageData |
    GpuImageDecodeCache.DrawWithImageFinished |
    GpuImageDecodeCache.EnsureCapacity |
    GpuImageDecodeCache.GetDecodedImageForDraw |
    GpuImageDecodeCache.GetImageDataForDrawImage |
    GpuImageDecodeCache.GetImageDecodeTaskAndRef |
    GpuImageDecodeCache.GetTaskForImageAndRef |
    GpuImageDecodeCache.OnImageUploadTaskCompleted |
    GpuImageDecodeCache.OnMemoryDump |
    GpuImageDecodeCache.ReduceCacheUsage |
    GpuImageDecodeCache.RefImage |
    GpuImageDecodeCache.RefImageDecode |
    GpuImageDecodeCache.SetShouldAggressivelyFreeResources |
    GpuImageDecodeCache.UnrefImage |
    GpuImageDecodeCache.UnrefImageDecode |
    GpuImageDecodeCache.UploadImage |
    GpuRasterBuffer.Playback |
    TraceEvent.GpuRasterization |
    GPUStateTracer.TakeSnapshotWithCurrentFramebuffer |
    TraceEvent.GPUTask |
    GPUTracer.ProcessTraces |
    Graphics.Pipeline.DrawAndSwap |
    GraphicsLayer.PaintContents |
    GraphicsLayerTreeBuilder.Rebuild |
    GraphicsLayerUpdater.Update |
    GrContextPriv.WriteSurfacePixels |
    GrDrawingManager.Flush |
    GrDrawOpAtlas.Plot.UploadToTextureGrDeferredTextureUploadWritePixelsFnGrTextureProxy |
    GrGLProgramGrGLProgramBuilder.Finalize |
    GrGpu.CreateTexture |
    GrRenderTargetContext.AddDrawOp |
    GrRenderTargetContext.Clear |
    GrRenderTargetContext.Discard |
    GrRenderTargetContext.DrawGlyphRunList |
    GrRenderTargetContext.DrawOval |
    GrRenderTargetContext.DrawPaint |
    GrRenderTargetContext.DrawPath |
    GrRenderTargetContext.DrawRect |
    GrRenderTargetContext.DrawRRect |
    GrRenderTargetContext.DrawShape |
    GrRenderTargetContext.DrawTexture |
    GrRenderTargetContext.DrawVertices |
    GrRenderTargetContext.FillRectToRect |
    GrRenderTargetContext.FillRectWithLocalMatrix |
    GrRenderTargetContext.InternalDrawPath |
    GrRenderTargetContext.PrepareForExternalIO |
    GrRenderTargetContextPriv.AbsClear |
    TraceEvent.HandleMouseMove |
    TraceEvent.HeadEnd |
    TraceEvent.HeadTime |
    Heap.CollectCodeStatistics |
    HistoryBackend.GetFaviconsForURL |
    HistoryQuickProvider.Start |
    HistoryService.GetFaviconsForURL |
    HistoryURLProvider.QueryComplete |
    HistoryURLProvider.Start |
    TraceEvent.HitTest |
    TraceEvent.HOST_RESOLVER_IMPL_ATTEMPT_FINISHED |
    TraceEvent.HOST_RESOLVER_IMPL_ATTEMPT_STARTED |
    TraceEvent.HOST_RESOLVER_IMPL_CACHE_HIT |
    TraceEvent.HOST_RESOLVER_IMPL_CREATE_JOB |
    TraceEvent.HOST_RESOLVER_IMPL_DNS_TASK |
    TraceEvent.HOST_RESOLVER_IMPL_IPV6_REACHABILITY_CHECK |
    TraceEvent.HOST_RESOLVER_IMPL_JOB_ATTACH |
    TraceEvent.HOST_RESOLVER_IMPL_JOB_REQUEST_ATTACH |
    TraceEvent.HOST_RESOLVER_IMPL_JOB_STARTED |
    TraceEvent.HOST_RESOLVER_IMPL_JOB |
    TraceEvent.HOST_RESOLVER_IMPL_PROC_TASK |
    TraceEvent.HOST_RESOLVER_IMPL_REQUEST |
    HostCache.Set |
    HTMLCanvasElement.FinalizeFrame |
    HTMLDocumentParser.Append |
    HTMLDocumentParser.AppendBytes |
    HTMLDocumentParser.DocumentElementAvailable |
    HTMLDocumentParser.EnqueueTokenizedChunk |
    HTMLDocumentParser.Insert |
    HTMLDocumentParser.ProcessTokenizedChunkFromBackgroundParser |
    HTMLParserScriptRunner.Execute |
    HTMLParserScriptRunner.ExecuteScriptsWaitingForLoad |
    HTMLParserScriptRunner.ExecuteScriptsWaitingForParsing |
    HTMLParserScriptRunner.ExecuteScriptsWaitingForResources |
    TraceEvent.HTMLParserScriptRunnerExecuteScript |
    HTMLSelectElement.SelectOption |
    TraceEvent.HTTP_CACHE_ADD_TO_ENTRY |
    TraceEvent.HTTP_CACHE_CALLER_REQUEST_HEADERS |
    TraceEvent.HTTP_CACHE_CREATE_ENTRY |
    TraceEvent.HTTP_CACHE_GET_BACKEND |
    TraceEvent.HTTP_CACHE_OPEN_ENTRY |
    TraceEvent.HTTP_CACHE_READ_DATA |
    TraceEvent.HTTP_CACHE_READ_INFO |
    TraceEvent.HTTP_CACHE_WRITE_DATA |
    TraceEvent.HTTP_CACHE_WRITE_INFO |
    TraceEvent.HTTP_STREAM_JOB_BOUND_TO_QUIC_STREAM_FACTORY_JOB |
    TraceEvent.HTTP_STREAM_JOB_BOUND_TO_REQUEST |
    TraceEvent.HTTP_STREAM_JOB_CONTROLLER_ALT_SVC_FOUND |
    TraceEvent.HTTP_STREAM_JOB_CONTROLLER_BOUND |
    TraceEvent.HTTP_STREAM_JOB_CONTROLLER_PROXY_SERVER_RESOLVED |
    TraceEvent.HTTP_STREAM_JOB_CONTROLLER |
    TraceEvent.HTTP_STREAM_JOB_DELAYED |
    TraceEvent.HTTP_STREAM_JOB_INIT_CONNECTION |
    TraceEvent.HTTP_STREAM_JOB_WAITING |
    TraceEvent.HTTP_STREAM_JOB |
    TraceEvent.HTTP_STREAM_PARSER_READ_HEADERS |
    TraceEvent.HTTP_STREAM_REQUEST_BOUND_TO_JOB |
    TraceEvent.HTTP_STREAM_REQUEST_BOUND_TO_QUIC_SESSION |
    TraceEvent.HTTP_STREAM_REQUEST_PROTO |
    TraceEvent.HTTP_STREAM_REQUEST_STARTED_JOB |
    TraceEvent.HTTP_STREAM_REQUEST |
    TraceEvent.HTTP_TRANSACTION_HTTP2_SEND_REQUEST_HEADERS |
    TraceEvent.HTTP_TRANSACTION_QUIC_SEND_REQUEST_HEADERS |
    TraceEvent.HTTP_TRANSACTION_READ_BODY |
    TraceEvent.HTTP_TRANSACTION_READ_HEADERS |
    TraceEvent.HTTP_TRANSACTION_READ_RESPONSE_HEADERS |
    TraceEvent.HTTP_TRANSACTION_SEND_REQUEST_HEADERS |
    TraceEvent.HTTP_TRANSACTION_SEND_REQUEST |
    TraceEvent.HTTP2_SESSION_INITIALIZED |
    TraceEvent.HTTP2_SESSION_PING |
    TraceEvent.HTTP2_SESSION_POOL_FOUND_EXISTING_SESSION_FROM_IP_POOL |
    TraceEvent.HTTP2_SESSION_POOL_FOUND_EXISTING_SESSION |
    TraceEvent.HTTP2_SESSION_POOL_IMPORTED_SESSION_FROM_SOCKET |
    TraceEvent.HTTP2_SESSION_RECV_DATA |
    TraceEvent.HTTP2_SESSION_RECV_HEADERS |
    TraceEvent.HTTP2_SESSION_RECV_SETTING |
    TraceEvent.HTTP2_SESSION_RECV_SETTINGS_ACK |
    TraceEvent.HTTP2_SESSION_RECV_SETTINGS |
    TraceEvent.HTTP2_SESSION_RECV_WINDOW_UPDATE |
    TraceEvent.HTTP2_SESSION_SEND_HEADERS |
    TraceEvent.HTTP2_SESSION_SEND_SETTINGS_ACK |
    TraceEvent.HTTP2_SESSION_SEND_SETTINGS |
    TraceEvent.HTTP2_SESSION_SEND_WINDOW_UPDATE |
    TraceEvent.HTTP2_SESSION_UPDATE_RECV_WINDOW |
    TraceEvent.HTTP2_SESSION_UPDATE_SEND_WINDOW |
    TraceEvent.HTTP2_SESSION_UPDATE_STREAMS_SEND_WINDOW_SIZE |
    TraceEvent.HTTP2_SESSION |
    TraceEvent.HTTP2_STREAM_UPDATE_RECV_WINDOW |
    TraceEvent.HTTP2_STREAM_UPDATE_SEND_WINDOW |
    HttpCacheTransaction.DoAddToEntry |
    HttpCacheTransaction.DoAddToEntryComplete |
    HttpCacheTransaction.DoCacheDispatchValidation |
    HttpCacheTransaction.DoCacheReadData |
    HttpCacheTransaction.DoCacheReadDataComplete |
    HttpCacheTransaction.DoCacheReadResponse |
    HttpCacheTransaction.DoCacheReadResponseComplete |
    HttpCacheTransaction.DoCacheWriteResponse |
    HttpCacheTransaction.DoCacheWriteResponseComplete |
    HttpCacheTransaction.DoCreateEntry |
    HttpCacheTransaction.DoCreateEntryComplete |
    HttpCacheTransaction.DoInitEntry |
    HttpCacheTransaction.DoNetworkRead |
    HttpCacheTransaction.DoNetworkReadCacheWrite |
    HttpCacheTransaction.DoNetworkReadCacheWriteComplete |
    HttpCacheTransaction.DoNetworkReadComplete |
    HttpCacheTransaction.DoOpenEntry |
    HttpCacheTransaction.DoOpenEntryComplete |
    HttpCacheTransaction.DoOverwriteCachedResponse |
    HttpCacheTransaction.DoSendRequest |
    HttpCacheTransaction.DoSendRequestComplete |
    HttpCacheTransaction.DoSuccessfulSendRequest |
    HttpCacheTransaction.DoTruncateCachedData |
    HttpCacheTransaction.DoTruncateCachedMetadata |
    HttpCacheTransaction.DoTruncateCachedMetadataComplete |
    HttpCacheTransaction.Transaction |
    HttpStreamFactory.Job.OnIOComplete |
    HttpStreamFactory.Job.RunLoop |
    Identity.Mojom.IdentityManager |
    TraceEvent.Idle_tq |
    IdleSpellCheckController.HotModeInvocation |
    ImageAnimationController.AnimateImagesForSyncTree |
    ImageAnimationController.WillActivate |
    TraceEvent.ImageDecodeTask |
    ImageOperations.Resize |
    ImageResourceContent.UpdateImage |
    ImageTransportSurfaceOverlayMac.ApplyBackpressure |
    ImageTransportSurfaceOverlayMac.SwapBuffersInternal |
    ImageUploadTaskImpl.RunOnWorkerThread |
    ImplementationBase.GetBucketContents |
    ImplementationBase.Initialize |
    ImplementationBase.WaitForCmd |
    InProcessCommandBuffer.Flush |
    InProcessCommandBuffer.FlushOnGpuThread |
    InProcessCommandBuffer.Initialize |
    InProcessCommandBuffer.InitializeOnGpuThread |
    TraceEvent.Input_tq |
    TraceEvent.InputEventSentBlocking |
    InputLatency.KeyUp |
    InputLatency.MouseLeave |
    InputLatency.MouseMove |
    InputLatency.RawKeyDown |
    TraceEvent.InputMsg_SetFocus |
    InputRouterImpl.FilterAndSendWebInputEvent |
    InputRouterImpl.KeboardEventHandled |
    InputRouterImpl.MouseEventHandled |
    InputRouterImpl.OnHasTouchEventHandlers |
    TraceEvent.InstallConditionalFeatures |
    TraceEvent.InteractiveTime |
    TraceEvent.InvalidateLayout |
    TraceEvent.Ipc_tq |
    TraceEvent.IPCChannel |
    TraceEvent.Is_gesture_active |
    ItemParallelJob.Run |
    Job.ExecuteProxyResolver |
    KeyedServiceFactory.GetServiceForContext |
    TraceEvent.KeyframeModel |
    KeywordProvider.Start |
    LatencyInfo.Flow |
    TraceEvent.LaunchProcess |
    Layer.PaintContentsToDisplayList |
    Layer.PushPropertiesTo |
    Layer.SetElementId |
    LayerAnimator.Step |
    TraceEvent.LayerId |
    LayerImpl.SetElementId |
    TraceEvent.LayerInvalidationTracking |
    LayerTreeHost.AnimationHost.PushProperties |
    LayerTreeHost.DoUpdateLayers |
    LayerTreeHost.FinishCommitOnImplThread |
    LayerTreeHost.InitializeForReal |
    LayerTreeHost.LayerTreeHost |
    LayerTreeHost.PushProperties |
    LayerTreeHost.SetHasGpuRasterizationTrigger |
    LayerTreeHost.SetLayerTreeFrameSink |
    LayerTreeHost.UpdateLayers_BuiltPropertyTrees |
    LayerTreeHost.UpdateLayers.BuildPropertyTrees |
    LayerTreeHostImpl.ActivateSyncTree |
    LayerTreeHostImpl.BeginCommit |
    LayerTreeHostImpl.BuildEvictionQueue |
    LayerTreeHostImpl.BuildRasterQueue |
    LayerTreeHostImpl.CalculateRenderPasses |
    LayerTreeHostImpl.CanDrawemptyviewport |
    LayerTreeHostImpl.CanDrawnorootlayer |
    LayerTreeHostImpl.CommitComplete |
    LayerTreeHostImpl.GenerateCompositorFrame |
    LayerTreeHostImpl.InitializeFrameSink |
    LayerTreeHostImpl.LayerTreeHostImpl |
    LayerTreeHostImpl.NotifyTileStateChanged |
    LayerTreeHostImpl.PrepareToDraw |
    LayerTreeHostImpl.ReleaseLayerTreeFrameSink |
    LayerTreeHostImpl.SetVisible |
    LayerTreeImpl.AddToElementLayerList |
    LayerTreeImpl.InvalidateRegionForImages |
    LayerTreeImpl.PushPropertiesTo |
    LayerTreeImpl.PushPropertyTreesTo |
    LayerTreeImpl.RemoveFromElementLayerList |
    LayerTreeImpl.UpdateDrawProperties.CalculateDrawProperties |
    LayerTreeImpl.UpdateDrawProperties.Occlusion |
    LayerTreeImpl.UpdateDrawProperties.UpdateTiles |
    TraceEvent.Layout |
    TraceEvent.LayoutInvalidationTracking |
    LayoutView.CommitPendingSelection |
    Leveldb.Mojom.LevelDBService |
    LiveObjectVisitor.VisitBlackObjects |
    LiveObjectVisitor.VisitBlackObjectsNoFail |
    TraceEvent.LoadAnyStartablePendingRequests |
    TraceEvent.LoadEndeventUtils |
    TraceEvent.LoadEndpixelQueue |
    TraceEvent.LoadEventEnd |
    TraceEvent.LoadEventStart |
    TraceEvent.LoadFinished |
    TraceEvent.LoadStarteventUtils |
    TraceEvent.LoadStartpixelQueue |
    LocalFrameView.FrameRectsChanged |
    LocalFrameView.Layout |
    LocalFrameView.PerformLayout |
    LocalFrameView.PerformPostLayoutTasks |
    LocalFrameView.PerformPreLayoutTasks |
    LocalFrameView.RunCompositingLifecyclePhase |
    LocalFrameView.RunPaintLifecyclePhase |
    LocalFrameView.RunPrePaintLifecyclePhase |
    LocalFrameView.RunStyleAndLayoutLifecyclePhases |
    LocalFrameView.UpdateRenderThrottlingStatus |
    LocalFrameView.UpdateStyleAndLayoutIfNeededRecursive |
    LocalFrameView.UpdateViewportIntersectionsForSubtree |
    LocalSurfaceId.Embed.Flow |
    LocalSurfaceId.Submission.Flow |
    LocalWindowProxy.CreateContext |
    LocalWindowProxy.Initialize |
    LocalWindowProxy.SetupWindowPrototypeChain |
    LocalWindowProxy.UpdateDocumentProperty |
    TraceEvent.LongTask |
    TraceEvent.Lteu |
    TraceEvent.Ltpq |
    TraceEvent.MainThreadLatency |
    MainThreadScheduler.RendererMainThreadLoad.Background |
    MainThreadScheduler.RendererMainThreadLoad.Foreground |
    TraceEvent.MainThreadSchedulerIdlePeriod |
    MainThreadSchedulerImpl.BeginFrameNotExpectedSoon |
    MainThreadSchedulerImpl.DidCommitFrameToCompositor |
    MainThreadSchedulerImpl.DidCommitProvisionalLoad |
    MainThreadSchedulerImpl.DidHandleInputEventOnCompositorThread |
    MainThreadSchedulerImpl.DidHandleInputEventOnMainThread |
    MainThreadSchedulerImpl.DidStartProvisionalLoad |
    MainThreadSchedulerImpl.DispatchRequestBeginMainFrameNotExpected |
    MainThreadSchedulerImpl.EndIdlePeriod |
    MainThreadSchedulerImpl.OnFirstMeaningfulPaint |
    MainThreadSchedulerImpl.OnRendererBackgrounded |
    MainThreadSchedulerImpl.OnRendererForegrounded |
    MainThreadSchedulerImpl.OnRendererHidden |
    MainThreadSchedulerImpl.OnRendererVisible |
    MainThreadSchedulerImpl.ResetForNavigationLocked |
    MainThreadSchedulerImpl.SetAllRenderWidgetsHidden |
    MainThreadSchedulerImpl.UpdateForInputEventOnCompositorThread |
    MainThreadSchedulerImpl.WillBeginFrame |
    TraceEvent.MajorGC |
    TraceEvent.Mark_test |
    TraceEvent.MarkAsMainFrame |
    TraceEvent.MarkDOMContent |
    TraceEvent.MarkLoad |
    TraceEvent.Measure_test |
    Media.Mojom.InterfaceFactory |
    Media.Mojom.MediaMetricsProvider |
    Media.Mojom.MediaService |
    Media.Mojom.RemoterFactory |
    Media.Mojom.VideoDecoder |
    TraceEvent.MediaPlayerDelegateHostMsg_OnMutedStatusChanged |
    Memory_instrumentation.Mojom.ClientProcess |
    Memory_instrumentation.Mojom.Coordinator |
    MemoryCache.Evict |
    MemoryCache.Prune |
    MemoryDumpManager.FinishAsyncProcessDump |
    MemoryDumpManager.InvokeOnMemoryDump |
    TraceEvent.MemoryUsage |
    MessageLoop.PostTask |
    MessageLoop.RunTask |
    MessagePipeReader.Receive |
    MessagePipeReader.Send |
    Metrics.Mojom.SingleSampleMetric |
    Metrics.Mojom.SingleSampleMetricsProvider |
    TraceEvent.MinorGC |
    TraceEvent.ModelNeutralWriteTransaction |
    MojoVideoDecoderService.Construct |
    MojoVideoDecoderService.Decode |
    MojoVideoDecoderService.GetSupportedConfigs |
    MojoVideoDecoderService.Initialize |
    MojoVideoDecoderService.OnDecoderOutput |
    TraceEvent.Moredamageexpectedsoon |
    MouseEventManager.FakeMouseMoveEventTimerFired |
    MouseEventManager.HandleMouseDraggedEvent |
    MouseEventManager.HandleMousePressEvent |
    Namespace.TextureOp.Tessnamespace.VertexSpecGrTextureProxy |
    NavigationControllerImpl.LoadURLWithParams |
    TraceEvent.NavigationHandle |
    TraceEvent.NavigationRequest |
    TraceEvent.NavigationStart |
    TraceEvent.NavigationStartToCommit |
    NavigationThrottle.WillProcessResponse |
    NavigationThrottle.WillStartRequest |
    TraceEvent.NavigationtimeToResponseStarted |
    TraceEvent.NavigationTimingnavigationStart |
    NavigatorImpl.Navigate |
    TraceEvent.NeedsBeginFrameChanged |
    TraceEvent.NeedsTickAnimations |
    TraceEvent.NETWORK_DELEGATE_BEFORE_START_TRANSACTION |
    TraceEvent.NETWORK_DELEGATE_BEFORE_URL_REQUEST |
    TraceEvent.NETWORK_DELEGATE_HEADERS_RECEIVED |
    TraceEvent.NETWORK_QUALITY_CHANGED |
    Network.Mojom.CookieChangeListener |
    Network.Mojom.CookieManager |
    Network.Mojom.NetworkContext |
    Network.Mojom.NetworkContextClient |
    Network.Mojom.NetworkQualityEstimatorManagerClient |
    Network.Mojom.NetworkServiceClient |
    Network.Mojom.ProxyConfigPollerClient |
    Network.Mojom.ProxyLookupClient |
    Network.Mojom.ResolveHostClient |
    Network.Mojom.TrustedHeaderClient |
    Network.Mojom.TrustedURLLoaderHeaderClient |
    Network.Mojom.URLLoader |
    Network.Mojom.URLLoaderClient |
    Network.Mojom.URLLoaderFactory |
    NetworkDelegate.ForcePrivacyMode |
    NetworkDelegate.NotifyBeforeStartTransation |
    NetworkDelegate.NotifyBeforeURLRequest |
    NetworkDelegate.NotifyCompleted |
    NetworkDelegate.NotifyHeadersReceived |
    NetworkDelegate.NotifyNetworkBytesReceived |
    NetworkDelegate.NotifyStartTransaction |
    NetworkDelegate.NotifyURLRequestDestroyed |
    TraceEvent.NetworkHintsMsg_DNSPrefetch |
    NetworkQualityEstimator.NotifyHeadersReceived |
    NetworkQualityEstimator.NotifyRequestCompleted |
    TraceEvent.Nodamageyet |
    Node.UpdateDistribution |
    TraceEvent.NotStartingIdlePeriodBecauseDeadlineIsTooClose |
    TraceEvent.Num_cpus |
    TraceEvent.Obmark0c_search |
    TraceEvent.Obmark0odbMB_120 |
    TraceEvent.Obmark0odbTR_11 |
    TraceEvent.Obmark0renderMB_120 |
    TraceEvent.Obmark0renderTR_11 |
    TraceEvent.Obmark0start |
    TraceEvent.Obmark1c_foundMB_120 |
    TraceEvent.Obmark1c_foundTR_11 |
    TraceEvent.Obmark1odb_rMB_120 |
    TraceEvent.Obmark1odb_rTR_11 |
    TraceEvent.Obmark1renderedMB_120 |
    TraceEvent.Obmark1renderedTR_11 |
    TraceEvent.Obmeasurec_foundMB_120 |
    TraceEvent.Obmeasurec_foundTR_11 |
    TraceEvent.Obmeasureodb_rMB_120 |
    TraceEvent.Obmeasureodb_rTR_11 |
    TraceEvent.ObmeasureodbMB_120 |
    TraceEvent.ObmeasureodbTR_11 |
    TraceEvent.ObmeasurerenderedMB_120 |
    TraceEvent.ObmeasurerenderedTR_11 |
    Onetapvideo.EmbedRequest |
    Onetapvideo.PlayerReady |
    TraceEvent.OnIdleTaskPosted |
    TraceEvent.OnIdleTaskPostedOnMainThread |
    TraceEvent.OnLibevent |
    TraceEvent.OnLoad |
    Optimizely.BlockBegin |
    TraceEvent.OptimizelyEnd |
    TraceEvent.OptimizelyStart |
    TraceEvent.OptimizelyTime |
    OverlayProcessor.ProcessForOverlays |
    PageAnimator.ServiceScriptedAnimations |
    TraceEvent.PageLoad |
    PageLoadMetricsObserver.OnCommit |
    PageLoadMetricsObserver.OnHidden |
    PageLoadMetricsObserver.OnShown |
    PageLoadMetricsObserver.OnStart |
    PageLoadMetricsObserver.ShouldObserveMimeType |
    TraceEvent.PageMsg_SetHistoryOffsetAndLength |
    TraceEvent.PageMsg_UpdateScreenInfo |
    TraceEvent.PageMsg_UpdateWindowScreenRect |
    TraceEvent.PageMsg_WasHidden |
    TraceEvent.PageMsg_WasShown |
    TraceEvent.Paint |
    PaintArtifact.AppendToWebDisplayItemList |
    PaintArtifact.Replay |
    PaintController.CommitNewDisplayItems |
    TraceEvent.PaintImage |
    TraceEvent.PaintInvalidationTracking |
    PaintInvalidator.InvalidatePaint |
    PaintLayer.UpdateLayerPositionsAfterLayout |
    PaintLayerCompositor.UpdateIfNeededRecursive |
    TraceEvent.PaintNonDefaultBackgroundColor |
    ParkableStringImpl.CompressInBackground |
    ParkableStringImpl.Unpark |
    TraceEvent.ParseAuthorStyleSheet |
    TraceEvent.ParseHTML |
    PartitionAlloc.TotalSizeOfCommittedPagesKB |
    PendingScript.ExecuteScriptBlock |
    PendingTree.Waiting |
    PictureLayer.PushPropertiesTo |
    PictureLayer.Update |
    PictureLayerImpl.AppendQuadscheckerboard |
    TraceEvent.PlatformResourceSendRequest |
    TraceEvent.PostCommit |
    PrerenderManagerFactory.GetForProfile |
    TraceEvent.PrintMsg_SetPrintingEnabled |
    TraceEvent.Process_labels |
    TraceEvent.Process_name |
    TraceEvent.Process_sort_index |
    TraceEvent.Process_uptime_seconds |
    TraceEvent.ProcessCommitResponse |
    TraceEvent.ProcessMemoryDump |
    TraceEvent.ProcessPriority |
    ProcTask.OnLookupComplete |
    TraceEvent.Profile |
    TraceEvent.ProfileChunk |
    ProfileManager.GetProfileInfoCache |
    ProgramBindingBase.Init |
    PropertyTreeBuilder.ShouldCreateRenderSurfaceopacity |
    TraceEvent.PROXY_RESOLUTION_SERVICE_RESOLVED_PROXY_LIST |
    TraceEvent.PROXY_RESOLUTION_SERVICE |
    Proxy_resolver.Mojom.ProxyResolver |
    Proxy_resolver.Mojom.ProxyResolverRequestClient |
    ProxyImpl.BeginMainFrameAbortedOnImplThread |
    ProxyImpl.DidActivateSyncTreeOnImplThread |
    ProxyImpl.DidLoseLayerTreeFrameSinkOnImplThread |
    ProxyImpl.DidReceiveCompositorFrameAckOnImplThread |
    ProxyImpl.FinishGLOnImplThread |
    ProxyImpl.InitializeLayerTreeFrameSinkOnImplThread |
    ProxyImpl.NotifyReadyToActivate |
    ProxyImpl.NotifyReadyToCommitOnImpl |
    ProxyImpl.NotifyReadyToDraw |
    ProxyImpl.OnCanDrawStateChanged |
    ProxyImpl.ProxyImpl |
    ProxyImpl.RequestBeginMainFrameNotExpected |
    ProxyImpl.ScheduledActionActivateSyncTree |
    ProxyImpl.ScheduledActionBeginLayerTreeFrameSinkCreation |
    ProxyImpl.ScheduledActionCommit |
    ProxyImpl.ScheduledActionDraw |
    ProxyImpl.ScheduledActionPrepareTiles |
    ProxyImpl.SetNeedsCommitOnImplThread |
    ProxyImpl.SetNeedsRedrawOnImplThread |
    ProxyImpl.SetVisibleOnImplThread |
    ProxyMain.BeginMainFrame.Commit |
    ProxyMain.BeginMainFrameNotExpectedSoon |
    ProxyMain.DidInitializeLayerTreeFrameSink |
    ProxyMain.ProxyMain |
    ProxyMain.RequestNewLayerTreeFrameSink |
    ProxyMain.SetDeferMainFrameUpdate |
    ProxyMain.SetNeedsAnimate |
    ProxyMain.SetNeedsCommit |
    ProxyMain.SetNeedsUpdateLayers |
    ProxyMain.SetVisible |
    ProxyMain.Stop |
    TraceEvent.QUIC_CHROMIUM_CLIENT_STREAM_READ_RESPONSE_HEADERS |
    TraceEvent.QUIC_CHROMIUM_CLIENT_STREAM_SEND_REQUEST_HEADERS |
    TraceEvent.QUIC_CONNECTION_MIGRATION_MODE |
    TraceEvent.QUIC_SESSION_ACK_FRAME_SENT |
    TraceEvent.QUIC_SESSION_CERTIFICATE_VERIFIED |
    TraceEvent.QUIC_SESSION_CLOSED |
    TraceEvent.QUIC_SESSION_CRYPTO_HANDSHAKE_MESSAGE_RECEIVED |
    TraceEvent.QUIC_SESSION_CRYPTO_HANDSHAKE_MESSAGE_SENT |
    TraceEvent.QUIC_SESSION_PACKET_AUTHENTICATED |
    TraceEvent.QUIC_SESSION_PACKET_LOST |
    TraceEvent.QUIC_SESSION_PACKET_RECEIVED |
    TraceEvent.QUIC_SESSION_PACKET_SENT |
    TraceEvent.QUIC_SESSION_PING_FRAME_SENT |
    TraceEvent.QUIC_SESSION_RST_STREAM_FRAME_RECEIVED |
    TraceEvent.QUIC_SESSION_RST_STREAM_FRAME_SENT |
    TraceEvent.QUIC_SESSION_STREAM_FRAME_RECEIVED |
    TraceEvent.QUIC_SESSION_STREAM_FRAME_SENT |
    TraceEvent.QUIC_SESSION_UNAUTHENTICATED_PACKET_HEADER_RECEIVED |
    TraceEvent.QUIC_SESSION_VERSION_NEGOTIATED |
    TraceEvent.QUIC_SESSION |
    TraceEvent.QUIC_STREAM_FACTORY_JOB_BOUND_TO_HTTP_STREAM_JOB |
    TraceEvent.QUIC_STREAM_FACTORY_JOB_CONNECT |
    TraceEvent.QUIC_STREAM_FACTORY_JOB |
    QuicStreamFactory.CreateSession |
    QuicStreamFactory.Job.DoLoop |
    Rappor.Mojom.RapporRecorder |
    RasterizerTaskImpl.RunOnWorkerThread |
    RasterSource.PerformSolidColorAnalysis |
    TraceEvent.RasterTask |
    TraceEvent.ReadTransaction |
    RealTimeDomain.DelayTillNextTask |
    RecordingSource.DetermineIfSolidColor |
    RecordingSource.FinishDisplayItemListUpdate |
    TraceEvent.RedirectEnd |
    TraceEvent.RedirectStart |
    RememberedSetUpdatingItem.Process |
    RemoteWindowProxy.Initialize |
    TraceEvent.RendererAudioState |
    RendererMain.START_MSG_LOOP |
    TraceEvent.RendererProcessType |
    RendererScheduler.BackgroundBudgetMs |
    TraceEvent.RendererVisibility |
    TraceEvent.RenderFrame |
    RenderFrameHostImpl.BeginNavigation |
    RenderFrameHostImpl.CommitNavigation |
    RenderFrameHostImpl.CreateRenderFrame |
    RenderFrameHostImpl.DidCommitProvisionalLoad |
    RenderFrameHostImpl.OnDidAddContentSecurityPolicies |
    RenderFrameHostImpl.OnDidFailProvisionalLoadWithError |
    RenderFrameHostImpl.OnDidStopLoading |
    RenderFrameHostImpl.OnDispatchLoad |
    RenderFrameHostImpl.SwapOut |
    TraceEvent.RenderFrameHostImplBeforeUnload |
    RenderFrameHostManager.CommitPending |
    RenderFrameHostManager.SwapOutOldFrame |
    RenderFrameImpl.CreateChildFrame |
    RenderFrameImpl.DidCommitProvisionalLoad |
    RenderFrameImpl.DidFinishDocumentLoad |
    RenderFrameImpl.DidFinishLoad |
    RenderFrameImpl.DidStartLoading |
    RenderFrameImpl.DidStartProvisionalLoad |
    RenderFrameImpl.DidStopLoading |
    RenderFrameImpl.Initialize |
    TraceEvent.RenderPass |
    RenderProcessHostImpl.Send |
    RenderProcessHostImpl.UpdateProcessPriority.SetProcessPriority |
    RenderSurfaceImpl.AppendQuads |
    RenderTextHarfBuzz.ItemizeTextToRuns |
    RenderTextHarfBuzz.ShapeRuns |
    RenderTextHarfBuzz.ShapeRunWithFontInternal |
    RenderThreadImpl.EstablishGpuChannelSync |
    RenderViewHostImpl.CreateRenderView |
    RenderViewHostImpl.GetWebkitPrefs |
    RenderWidget.DidCommitAndDrawCompositorFrame |
    RenderWidget.InitializeLayerTreeView |
    RenderWidget.OnSynchronizeVisualProperties |
    RenderWidget.OnWasHidden |
    RenderWidget.OnWasShown |
    RenderWidget.UpdateSelectionBounds |
    RenderWidget.UpdateTextInputState |
    RenderWidget.WillBeginCompositorFrame |
    RenderWidgetHostImpl.DidUpdateVisualProperties |
    RenderWidgetHostImpl.ForwardKeyboardEvent |
    RenderWidgetHostImpl.ForwardMouseEvent |
    RenderWidgetHostImpl.GetScreenInfo |
    RenderWidgetHostImpl.WasHidden |
    RenderWidgetHostImpl.WasShown |
    RenderWidgetHostViewCocoa.KeyEvent |
    RenderWidgetHostViewCocoa.MouseEvent |
    RenderWidgetHostViewCocoa.SendViewBoundsInWindowToClient |
    RenderWidgetHostViewCocoa.SendWindowFrameInScreenToClient |
    RenderWidgetInputHandler.OnHandleInputEvent |
    TraceEvent.RenderWorker0x7f8e1500b000 |
    TraceEvent.RenderWorker0x7fa57a039c00 |
    TraceEvent.RenderWorker0x7fcab207b200 |
    TraceEvent.RenderWorker0x7fd50f00aa00 |
    TraceEvent.RenderWorker0x7fdabc07b400 |
    TraceEvent.RenderWorker0x7fdefa843000 |
    TraceEvent.RenderWorker0x7fe5c4821c00 |
    TraceEvent.REQUEST_ALIVE |
    TraceEvent.RequestAnimationFrame |
    TraceEvent.RequestIdleCallback |
    TraceEvent.RequestMainThreadFrame |
    TraceEvent.RequestStart |
    Resource_coordinator.Mojom.CoordinationUnitProvider |
    Resource_coordinator.Mojom.FrameCoordinationUnit |
    Resource_coordinator.Mojom.PageCoordinationUnit |
    Resource_coordinator.Mojom.PageSignalReceiver |
    Resource_coordinator.Mojom.ProcessCoordinationUnit |
    Resource.AppendData |
    TraceEvent.ResourceChangePriority |
    ResourceDispatcher.OnReceivedRedirect |
    ResourceDispatcher.OnReceivedResponse |
    ResourceDispatcher.OnRequestComplete |
    ResourceFetcher.DetermineRevalidationPolicy |
    ResourceFetcher.RequestResource |
    TraceEvent.ResourceFinish |
    TraceEvent.ResourceLoad |
    ResourceLoadPriorityOptimizer.UpdateAllImageResourcePriorities |
    ResourcePrefetchPredictor.StartInitialization |
    TraceEvent.ResourcePrioritySet |
    TraceEvent.ResourceReceivedData |
    TraceEvent.ResourceReceiveResponse |
    TraceEvent.ResourceSendRequest |
    TraceEvent.ResponseEnd |
    RootScrollerController.PerformRootScrollerSelection |
    RuleSet.AddRulesFromSheet |
    TraceEvent.RunMicrotasks |
    TraceEvent.RunTask |
    TraceEvent.RunWithFaviconResults |
    Safe_browsing.Mojom.PhishingDetector |
    Safe_browsing.Mojom.PhishingModelSetter |
    Safe_browsing.Mojom.SafeBrowsing |
    Safe_browsing.Mojom.SafeBrowsingUrlChecker |
    ScheduledAction.Execute |
    TraceEvent.ScheduledTasks |
    Scheduler.AwaitingTouchstartResponse |
    Scheduler.BeginFrame |
    Scheduler.BeginFrameDropped |
    Scheduler.BeginFrameNotExpectedSoon |
    Scheduler.BeginImplFrame |
    Scheduler.BeginMainFrameAborted |
    Scheduler.BeginMainFrameOnCriticalPath |
    Scheduler.BlockingInputExpectedSoon |
    Scheduler.CompositorWillSendMainFrameNotExpected |
    Scheduler.DefaultGesturePrevented |
    Scheduler.DidCreateAndInitializeLayerTreeFrameSink |
    Scheduler.DidLoseLayerTreeFrameSink |
    Scheduler.HasNavigated |
    Scheduler.HasReportedBlockingInterventionInCurrentPolicy |
    Scheduler.HasReportedBlockingInterventionSinceNavigation |
    Scheduler.HasSeenBeginMainFrame |
    Scheduler.HasVisibleRenderWidgetWithTouchHandler |
    Scheduler.HaveSeenBlockingGesture |
    Scheduler.HaveSeenInputSinceNavigation |
    Scheduler.Hidden |
    Scheduler.InIdlePeriod |
    Scheduler.KeepRendererActive |
    Scheduler.LastGestureWasCompositorDriven |
    Scheduler.LongestJankFreeTaskDuration |
    Scheduler.MainThreadTask |
    Scheduler.MissedBeginFrameDropped |
    Scheduler.NotifyBeginMainFrameStarted |
    Scheduler.NotifyReadyToCommit |
    Scheduler.Now |
    Scheduler.OnBeginImplFrameDeadline |
    Scheduler.PauseCount |
    Scheduler.PauseTimersForWebview |
    Scheduler.Pending_submit_frames |
    Scheduler.RAILMode |
    Scheduler.RunNextTask |
    Scheduler.Running |
    Scheduler.ScheduleBeginImplFrameDeadline |
    Scheduler.Scheduler |
    Scheduler.Sequence.RemoveWaitingPriority |
    Scheduler.Sequence.UpdateSchedulingPriority |
    Scheduler.SetDeferMainFrameUpdate |
    Scheduler.SkipNextBeginMainFrameToReduceLatency |
    Scheduler.TaskPriority |
    Scheduler.UseCase |
    Scheduler.UseVirtualTime |
    Scheduler.WaitingForMeaningfulPaint |
    SchedulerStateMachine.SetNeedsPrepareTiles |
    TraceEvent.SchedulerWorkerThreadactive |
    TraceEvent.SchedulerWorkerThreadborn |
    TraceEvent.SchedulerWorkerThreaddead |
    TraceEvent.ScheduleStyleInvalidationTracking |
    TraceEvent.ScheduleStyleRecalculation |
    TraceEvent.ScopedBlockingCall |
    TraceEvent.ScopedBlockingCallWithBaseSyncPrimitives |
    TraceEvent.Screenshot |
    ScriptRunner.ExecuteAsyncTask |
    ScrollAnchor.FindAnchor |
    ScrollingCoordinator.UpdateAfterPaint |
    ScrollingCoordinator.UpdateTouchEventTargetRectsIfNeeded |
    SearchProvider.OnURLLoadComplete |
    SearchProvider.Question_mark |
    SearchProvider.Start |
    SelectionController.HandleMousePressEvent |
    SelectionController.HandleMousePressEventSingleClick |
    SelectionController.HandleMouseReleaseEvent |
    TraceEvent.SequenceEnabled |
    SequenceManager.DidProcessTaskObservers |
    SequenceManager.DidProcessTaskTimeObservers |
    SequenceManager.PostTask |
    SequenceManager.QueueNotifyDidProcessTask |
    SequenceManager.QueueNotifyWillProcessTask |
    SequenceManager.QueueOnTaskCompleted |
    SequenceManager.QueueOnTaskStarted |
    SequenceManager.RunTask |
    SequenceManager.WillProcessTaskObservers |
    SequenceManager.WillProcessTaskTimeObservers |
    SequenceManagerImpl.NotifyDidProcessTaskObservers |
    SequenceManagerImpl.NotifyWillProcessTaskObservers |
    SequenceManagerImpl.RunTask |
    SequenceManagerImpl.TakeTask |
    SequenceManagerImpl.UnregisterTaskQueue |
    SequenceManagerImpl.WakeUpReadyDelayedQueues |
    SerializedScriptValueFactory.Create |
    SerializedScriptValueFactory.Deserialize |
    Service_manager.Mojom.Connector |
    Service_manager.Mojom.InterfaceProvider |
    Service_manager.Mojom.PIDReceiver |
    Service_manager.Mojom.Service |
    Service_manager.Mojom.ServiceFactory |
    Service_manager.Mojom.ServiceManagerListener |
    ServiceManager.Connect |
    ServiceWorkerControlleeRequestHandler.PrepareForMainResource |
    ServiceWorkerDispatcherHost.OnProviderCreated |
    ServiceWorkerNavigationLoader.FallbackToNetwork |
    ServiceWorkerNavigationLoader.ServiceWorkerNavigationloader |
    ServiceWorkerProviderHost.RemoveProviderHost |
    ServiceWorkerStorage.FindRegistrationForDocument.CheckInstalling |
    TraceEvent.SetIdlePeriodState |
    TraceEvent.SetLayerTreeId |
    SharedImageStub.OnCreateSharedImage |
    SharedImageStub.OnCreateSharedImageWithData |
    SharedImageStub.OnDestroySharedImage |
    SharedImageStub.OnRegisterSharedImageUploadBuffer |
    TraceEvent.ShCompile |
    ShortcutsProvider.Start |
    TraceEvent.SIGNED_CERTIFICATE_TIMESTAMPS_CHECKED |
    TraceEvent.SIGNED_CERTIFICATE_TIMESTAMPS_RECEIVED |
    TraceEvent.SIMPLE_CACHE_ENTRY_CLOSE_BEGIN |
    TraceEvent.SIMPLE_CACHE_ENTRY_CLOSE_CALL |
    TraceEvent.SIMPLE_CACHE_ENTRY_CLOSE_END |
    TraceEvent.SIMPLE_CACHE_ENTRY_CREATE_BEGIN |
    TraceEvent.SIMPLE_CACHE_ENTRY_CREATE_CALL |
    TraceEvent.SIMPLE_CACHE_ENTRY_CREATE_END |
    TraceEvent.SIMPLE_CACHE_ENTRY_CREATE_OPTIMISTIC |
    TraceEvent.SIMPLE_CACHE_ENTRY_DOOM_BEGIN |
    TraceEvent.SIMPLE_CACHE_ENTRY_DOOM_CALL |
    TraceEvent.SIMPLE_CACHE_ENTRY_DOOM_END |
    TraceEvent.SIMPLE_CACHE_ENTRY_OPEN_BEGIN |
    TraceEvent.SIMPLE_CACHE_ENTRY_OPEN_CALL |
    TraceEvent.SIMPLE_CACHE_ENTRY_OPEN_END |
    TraceEvent.SIMPLE_CACHE_ENTRY_READ_BEGIN |
    TraceEvent.SIMPLE_CACHE_ENTRY_READ_CALL |
    TraceEvent.SIMPLE_CACHE_ENTRY_READ_END |
    TraceEvent.SIMPLE_CACHE_ENTRY_SET_KEY |
    TraceEvent.SIMPLE_CACHE_ENTRY_WRITE_BEGIN |
    TraceEvent.SIMPLE_CACHE_ENTRY_WRITE_CALL |
    TraceEvent.SIMPLE_CACHE_ENTRY_WRITE_END |
    TraceEvent.SIMPLE_CACHE_ENTRY_WRITE_OPTIMISTIC |
    TraceEvent.SIMPLE_CACHE_ENTRY |
    SingleThreadIdleTaskRunner.RunTask |
    SingleThreadProxy.DidReceiveCompositorFrameAckOnImplThread |
    SingleThreadProxy.DoCommit |
    SingleThreadProxy.DoComposite |
    SingleThreadProxy.NotifyReadyToActivate |
    SingleThreadProxy.NotifyReadyToDraw |
    SingleThreadProxy.OnCanDrawStateChanged |
    SingleThreadProxy.PostAnimationEventsToMainThreadOnImplThread |
    SingleThreadProxy.ScheduledActionPrepareTiles |
    SingleThreadProxy.ScheduledActionSendBeginMainFrame |
    SingleThreadProxy.SetDeferMainFrameUpdate |
    SingleThreadProxy.SetNeedsAnimate |
    SingleThreadProxy.SetNeedsOneBeginImplFrameOnImplThread |
    SingleThreadProxy.SetNeedsPrepareTilesOnImplThread |
    SingleThreadProxy.SetNeedsUpdateLayers |
    SingleThreadProxy.SetVisible |
    SingleThreadProxy.SingleThreadProxy |
    SingleThreadTaskGraphRunner.CollectCompletedTasks |
    SingleThreadTaskGraphRunner.RunTaskWithLockAcquired |
    SingleThreadTaskGraphRunner.ScheduleTasks |
    SingleThreadTaskGraphRunner.WaitForTasksToFinishRunning |
    SiteInstanceImpl.GetProcess |
    SiteInstanceImpl.LockToOrigin |
    SiteInstanceImpl.SetSite |
    SkCanvas.DrawImageRectSkImageSkRectSkRectSkPaintSkCanvas.SrcRectConstraint |
    SkCanvas.DrawImageSkImageSkScalarSkScalarSkPaint |
    SkCanvas.DrawOvalSkRectSkPaint |
    SkCanvas.DrawPaintSkPaint |
    SkCanvas.DrawPathSkPathSkPaint |
    SkCanvas.DrawPointsSkCanvas.PointModesize_tSkPointSkPaint |
    SkCanvas.DrawRectSkRectSkPaint |
    SkCanvas.DrawRRectSkRRectSkPaint |
    SkCanvas.DrawTextBlobSkTextBlobSkScalarSkScalarSkPaint |
    SkCanvas.InternalSaveLayerSkCanvas.SaveLayerRecSkCanvas.SaveLayerStrategy |
    SkCanvas.SaveLayerSkCanvas.SaveLayerRec |
    SkGpuDevice.ClearAll |
    SkGpuDevice.DrawDevice |
    SkGpuDevice.DrawGlyphRunList |
    SkGpuDevice.DrawOval |
    SkGpuDevice.DrawPaint |
    SkGpuDevice.DrawPath |
    SkGpuDevice.DrawPoints |
    SkGpuDevice.DrawRect |
    SkGpuDevice.DrawRRect |
    SkGpuDevice.DrawSpecial |
    SkGpuDevice.DrawStrokedLine |
    Skia_gpu.GLShader |
    TraceEvent.Skiabudget |
    TraceEvent.SkipBeginImplFrameToReduceLatency |
    TraceEvent.SkipBeginMainFrameToReduceLatency |
    TraceEvent.SmallPathOp |
    TraceEvent.SOCKET_ALIVE |
    TraceEvent.SOCKET_BYTES_RECEIVED |
    TraceEvent.SOCKET_BYTES_SENT |
    TraceEvent.SOCKET_IN_USE |
    TraceEvent.SOCKET_POOL_BOUND_TO_CONNECT_JOB |
    TraceEvent.SOCKET_POOL_BOUND_TO_SOCKET |
    TraceEvent.SOCKET_POOL_CONNECT_JOB_CONNECT |
    TraceEvent.SOCKET_POOL_CONNECT_JOB |
    TraceEvent.SOCKET_POOL_REUSED_AN_EXISTING_SOCKET |
    TraceEvent.SOCKET_POOL |
    SocketPosix.OnFileCanReadWithoutBlocking |
    SoftwareImageDecodeCache.DecodeImageIfNecessary |
    SoftwareImageDecodeCache.DrawWithImageFinished |
    SoftwareImageDecodeCache.GetDecodedImageForDrawInternal |
    SoftwareImageDecodeCache.ReduceCacheUsageUntilWithinLimit |
    SoftwareImageDecodeCache.UnrefImage |
    SolidColorAnalyzer.CheckIfRRectClipCoversCanvas |
    SolidColorAnalyzer.CheckIfSolidShape |
    SpdySessionPool.CreateAvailableSessionFromSocket |
    TraceEvent.SpeedIndex |
    Spellcheck.Mojom.SpellChecker |
    Spellcheck.Mojom.SpellCheckHost |
    TraceEvent.SSL_CONNECT |
    TraceEvent.SSL_HANDSHAKE_MESSAGE_RECEIVED |
    TraceEvent.SSL_HANDSHAKE_MESSAGE_SENT |
    TraceEvent.SSL_SOCKET_BYTES_RECEIVED |
    TraceEvent.SSL_SOCKET_BYTES_SENT |
    SSLClientSocketImpl.DoHandshakeLoop |
    SSLConnectJob.DoLoop |
    SSLConnectJob.DoSSLConnect |
    TraceEvent.StackCpuSampling |
    StackSamplingProfiler.StackSamplingProfiler |
    StackSamplingProfiler.Start |
    StackSamplingProfiler.Started |
    TraceEvent.StartIdlePeriod |
    Startup_metric_utils.Mojom.StartupMetricHost |
    StructTraits.CompositorFrame.Read |
    StructTraits.RenderPass.Read |
    StructTraits.TransferableResource.Read |
    StyleElement.ProcessStyleSheet |
    StyleEngine.ClearResolver |
    StyleEngine.ScheduleInvalidationsForRuleSets |
    StyleEngine.UpdateActiveStyleSheets |
    TraceEvent.StyleRecalcInvalidationTracking |
    TraceEvent.SubImage |
    SubmitCompositorFrame.TimeElapsed |
    TraceEvent.Submitrejectedtoevictedsurface |
    TraceEvent.SubresourceFilterMsg_SetRulesetForProcess |
    SubresourceFilterSafeBrowsingActivationThrottle.DoesMainFrameURLSatisfyActivationConditions |
    SubresourceFilterSafeBrowsingActivationThrottle.GetHighestPriorityConfiguration |
    SubresourceFilterSafeBrowsingActivationThrottle.NotifyResult |
    TraceEvent.SubresourceFilterSBCheck |
    TraceEvent.Subthread_default_tq |
    Surface.ActivateFrame |
    Surface.OnDeadline |
    SurfaceLayer.PushPropertiesTo |
    SurfaceManager.GarbageCollectSurfaces |
    TraceEvent.SwapBuffers |
    TraceEvent.Swapskipped |
    TraceEvent.Swapthrottled |
    SyncChannel.Send |
    SyncChannel.SyncContext.TryToUnblockListener |
    TabManager.LoadNextBackgroundTabIfNeeded |
    TabSwitching.Latency |
    TraceEvent.TabSwitchVisibilityRequest |
    TaskGraphRunner.RunTask |
    TaskQueueManager.ProcessTaskFromWorkQueue |
    TraceEvent.TaskQueueThrottler_TaskQueueThrottled |
    TraceEvent.TaskQueueThrottler_TaskQueueUnthrottled |
    TaskQueueThrottler.MaybeSchedulePumpThrottledTasks |
    TaskQueueThrottler.OnQueueNextWakeUpChanged |
    TaskQueueThrottler.PumpThrottledTasks |
    TraceEvent.TaskSchedulerPostTask |
    TraceEvent.TaskSchedulerRunTask |
    TaskSetFinishedTaskImpl.RunOnWorkerThread |
    TaskTracker.RunTask |
    TraceEvent.TCP_CLIENT_SOCKET_POOL_REQUESTED_SOCKET |
    TraceEvent.TCP_CONNECT_ATTEMPT |
    TraceEvent.TCP_CONNECT |
    TraceEvent.TessellatingPathOp |
    Textfield.PaintTextAndCursor |
    TextureManager.ValidateAndDoTexSubImage |
    TraceEvent.TextureOp |
    TraceEvent.Thread_name |
    TraceEvent.Thread_sort_index |
    ThreadControllerImpl.DoWork |
    ThreadControllerImpl.RunTask |
    ThreadControllerImpl.ScheduleWork.PostTask |
    ThreadProxy.BeginMainFrame |
    ThreadProxy.ScheduledActionSendBeginMainFrame |
    ThreadState.HeapEstimatedSizeKB |
    ThreadState.HeapGrowingRate |
    ThreadState.PartitionAllocEstimatedSizeKB |
    ThreadState.PartitionAllocGrowingRate |
    ThreadState.PerformIdleLazySweep |
    TileManager.AssignGpuMemorytileviolatesmemorypolicy |
    TileManager.AssignGpuMemoryToTiles |
    TileManager.CheckForCompletedTasks |
    TileManager.CheckForCompletedTasksFinished |
    TileManager.CheckPendingGpuWorkAndIssueSignals |
    TileManager.CreateRasterTask |
    TileManager.DidFinishRunningAllTileTasks |
    TileManager.DidFinishRunningTileTasksRequiredForActivation |
    TileManager.DidFinishRunningTileTasksRequiredForDraw |
    TileManager.FlushAndIssueSignals |
    TileManager.IsReadyToActivate |
    TileManager.IsReadyToDraw |
    TileManager.IssueSignalsalltiletaskscompleted |
    TileManager.IssueSignalsreadytoactivate |
    TileManager.IssueSignalsreadytodraw |
    TileManager.PrepareTiles |
    TileManager.ScheduleTasks |
    TileTaskManagerImpl.CheckForCompletedTasks |
    TileTaskManagerImpl.ScheduleTasks |
    TileTaskManagerImpl.Shutdown |
    TimeoutMonitor.Restart |
    TimeoutMonitor.Start |
    TimeoutMonitor.Stop |
    TimeoutMonitor.TimeOutHandler |
    TimerBase.Run |
    TraceEvent.TimerFire |
    TraceEvent.TimerInstall |
    TraceEvent.TimerRemove |
    TraceEvent.TimeStamp |
    TraceEvent.TimeToDomReady |
    TraceEvent.TimeToInteractive |
    TraceEvent.TimeToZonesAndDomReady |
    TraceEvent.TimeToZonesComplete |
    TraceEvent.TopLevel |
    ToSpaceUpdatingItem.ProcessVisitAll |
    TraceEvent.Trace_buffer_overflowed |
    Tracing.Mojom.Agent |
    Tracing.Mojom.AgentRegistry |
    Tracing.Mojom.Coordinator |
    Tracing.Mojom.PerfettoService |
    Tracing.Mojom.ProducerHost |
    TraceEvent.TracingHostMsg_ChildSupportsTracing |
    TraceEvent.TracingMsg_SetTracingProcessId |
    TraceEvent.TracingSessionIdForWorker |
    TraceEvent.TracingStartedInBrowser |
    TraceEvent.TracingStartedInPage |
    TransferBuffer.Free |
    TraceEvent.TransfersBytesPendingOnDisk |
    TraceEvent.TransfersPendingOnDisk |
    Translate.Mojom.ContentTranslateDriver |
    TransportConnectJob.DoResolveHostComplete |
    TreeSynchronizer.PushLayerPropertiesTo.Impl |
    TreeSynchronizer.PushLayerPropertiesTo.Main |
    TreeSynchronizer.SynchronizeTrees |
    TraceEvent.TrianglesDrawn |
    TraceEvent.UDP_BYTES_RECEIVED |
    TraceEvent.UDP_BYTES_SENT |
    TraceEvent.UDP_CONNECT |
    TraceEvent.UDP_LOCAL_ADDRESS |
    UDPSocketPosix.ReadWatcher.OnFileCanReadWithoutBlocking |
    Ukm.Mojom.UkmRecorderInterface |
    TraceEvent.Unknowninterface |
    TraceEvent.UnloadEventEnd |
    TraceEvent.UnloadEventStart |
    TraceEvent.UpdateCounters |
    TraceEvent.UpdateLayer |
    TraceEvent.UpdateLayerTree |
    TraceEvent.UpdateLayoutTree |
    TraceEvent.UpdateLongIdlePeriodStateAfterIdleTask |
    TraceEvent.UpdateStateFromAnimationDrivers |
    TraceEvent.UPLOAD_DATA_STREAM_INIT |
    TraceEvent.UPLOAD_DATA_STREAM_READ |
    TraceEvent.URL_REQUEST_DELEGATE_RECEIVED_REDIRECT |
    TraceEvent.URL_REQUEST_DELEGATE_RESPONSE_STARTED |
    TraceEvent.URL_REQUEST_FAKE_RESPONSE_HEADERS_CREATED |
    TraceEvent.URL_REQUEST_FILTERS_SET |
    TraceEvent.URL_REQUEST_JOB_BYTES_READ |
    TraceEvent.URL_REQUEST_JOB_FILTERED_BYTES_READ |
    TraceEvent.URL_REQUEST_REDIRECT_JOB |
    TraceEvent.URL_REQUEST_REDIRECTED |
    TraceEvent.URL_REQUEST_START_JOB |
    UrlPatternIndexMatcher.FindMatch |
    URLRequestHttpJob.OnReadCompleted |
    URLRequestHttpJob.OnStartCompleted |
    TraceEvent.UserEvent |
    TraceEvent.Usingexistingdeadline |
    TraceEvent.Usingnewdeadline |
    TraceEvent.V8_tq |
    V8.Builtin_ArrayConcat |
    V8.Builtin_ArrayPop |
    V8.Builtin_ArrayPush |
    V8.Builtin_ArrayShift |
    V8.Builtin_ArrayUnshift |
    V8.Builtin_BooleanConstructor |
    V8.Builtin_ConsoleLog |
    V8.Builtin_ConsoleWarn |
    V8.Builtin_DateConstructor |
    V8.Builtin_DateNow |
    V8.Builtin_DatePrototypeSetTime |
    V8.Builtin_DatePrototypeToUTCString |
    V8.Builtin_ErrorConstructor |
    V8.Builtin_FunctionConstructor |
    V8.Builtin_FunctionPrototypeBind |
    V8.Builtin_FunctionPrototypeToString |
    V8.Builtin_GlobalDecodeURI |
    V8.Builtin_GlobalDecodeURIComponent |
    V8.Builtin_GlobalEncodeURIComponent |
    V8.Builtin_GlobalEval |
    V8.Builtin_HandleApiCall |
    V8.Builtin_JsonParse |
    V8.Builtin_JsonStringify |
    V8.Builtin_MapPrototypeClear |
    V8.Builtin_NumberPrototypeToFixed |
    V8.Builtin_NumberPrototypeToString |
    V8.Builtin_ObjectDefineGetter |
    V8.Builtin_ObjectDefineProperties |
    V8.Builtin_ObjectDefineProperty |
    V8.Builtin_ObjectFreeze |
    V8.Builtin_ObjectGetPrototypeOf |
    V8.Builtin_ObjectLookupGetter |
    V8.Builtin_ObjectPrototypeGetProto |
    V8.Builtin_ObjectPrototypePropertyIsEnumerable |
    V8.Builtin_ObjectPrototypeSetProto |
    V8.Builtin_ObjectSetPrototypeOf |
    V8.Builtin_RegExpPrototypeToString |
    V8.Builtin_SetPrototypeClear |
    V8.Builtin_StringPrototypeEndsWith |
    V8.Builtin_StringPrototypeLastIndexOf |
    V8.Builtin_StringPrototypeStartsWith |
    V8.Builtin_StringPrototypeToUpperCaseIntl |
    V8.CallFunction |
    V8.Compile |
    V8.CompileCode |
    V8.CompileCodeBackground |
    V8.CompileEval |
    V8.CompileIgnition |
    V8.CompileIgnitionFinalization |
    V8.CompileScript |
    V8.CompileStreamedScript |
    V8.DeoptimizeCode |
    V8.ExternalCallback |
    V8.GC_BACKGROUND_ARRAY_BUFFER_FREE |
    V8.GC_BACKGROUND_STORE_BUFFER |
    V8.GC_BACKGROUND_UNMAPPER |
    V8.GC_HEAP_EMBEDDER_TRACING_EPILOGUE |
    V8.GC_HEAP_EPILOGUE_REDUCE_NEW_SPACE |
    V8.GC_HEAP_EPILOGUE |
    V8.GC_HEAP_EXTERNAL_EPILOGUE |
    V8.GC_HEAP_EXTERNAL_PROLOGUE |
    V8.GC_HEAP_EXTERNAL_WEAK_GLOBAL_HANDLES |
    V8.GC_HEAP_PROLOGUE |
    V8.GC_MC_BACKGROUND_EVACUATE_COPY |
    V8.GC_MC_BACKGROUND_EVACUATE_UPDATE_POINTERS |
    V8.GC_MC_BACKGROUND_MARKING |
    V8.GC_MC_BACKGROUND_SWEEPING |
    V8.GC_MC_CLEAR_FLUSHABLE_BYTECODE |
    V8.GC_MC_CLEAR_FLUSHED_JS_FUNCTIONS |
    V8.GC_MC_CLEAR_MAPS |
    V8.GC_MC_CLEAR_STRING_TABLE |
    V8.GC_MC_CLEAR_WEAK_COLLECTIONS |
    V8.GC_MC_CLEAR_WEAK_LISTS |
    V8.GC_MC_CLEAR_WEAK_REFERENCES |
    V8.GC_MC_CLEAR |
    V8.GC_MC_EPILOGUE |
    V8.GC_MC_EVACUATE_CLEAN_UP |
    V8.GC_MC_EVACUATE_COPY |
    V8.GC_MC_EVACUATE_EPILOGUE |
    V8.GC_MC_EVACUATE_PROLOGUE |
    V8.GC_MC_EVACUATE_REBALANCE |
    V8.GC_MC_EVACUATE_UPDATE_POINTERS_SLOTS_MAIN |
    V8.GC_MC_EVACUATE_UPDATE_POINTERS_SLOTS_MAP_SPACE |
    V8.GC_MC_EVACUATE_UPDATE_POINTERS_TO_NEW_ROOTS |
    V8.GC_MC_EVACUATE_UPDATE_POINTERS_WEAK |
    V8.GC_MC_EVACUATE_UPDATE_POINTERS |
    V8.GC_MC_EVACUATE |
    V8.GC_MC_FINISH |
    V8.GC_MC_INCREMENTAL_EMBEDDER_PROLOGUE |
    V8.GC_MC_INCREMENTAL_EMBEDDER_TRACING |
    V8.GC_MC_INCREMENTAL_EXTERNAL_EPILOGUE |
    V8.GC_MC_INCREMENTAL_EXTERNAL_PROLOGUE |
    V8.GC_MC_INCREMENTAL_FINALIZE_BODY |
    V8.GC_MC_INCREMENTAL_FINALIZE |
    V8.GC_MC_INCREMENTAL_LAYOUT_CHANGE |
    V8.GC_MC_INCREMENTAL_START |
    V8.GC_MC_INCREMENTAL_SWEEPING |
    V8.GC_MC_INCREMENTAL |
    V8.GC_MC_MARK_EMBEDDER_TRACING_CLOSURE |
    V8.GC_MC_MARK_EMBEDDER_TRACING |
    V8.GC_MC_MARK_FINISH_INCREMENTAL |
    V8.GC_MC_MARK_MAIN |
    V8.GC_MC_MARK_ROOTS |
    V8.GC_MC_MARK_WEAK_CLOSURE_EPHEMERON_MARKING |
    V8.GC_MC_MARK_WEAK_CLOSURE_EPHEMERON |
    V8.GC_MC_MARK_WEAK_CLOSURE_HARMONY |
    V8.GC_MC_MARK_WEAK_CLOSURE_WEAK_HANDLES |
    V8.GC_MC_MARK_WEAK_CLOSURE_WEAK_ROOTS |
    V8.GC_MC_MARK_WEAK_CLOSURE |
    V8.GC_MC_MARK |
    V8.GC_MC_PROLOGUE |
    V8.GC_MC_SWEEP |
    V8.GC_Objects_Stats |
    V8.GC_SCAVENGER_BACKGROUND_SCAVENGE_PARALLEL |
    V8.GC_SCAVENGER_PROCESS_ARRAY_BUFFERS |
    V8.GC_SCAVENGER_SCAVENGE_FINALIZE |
    V8.GC_SCAVENGER_SCAVENGE_PARALLEL |
    V8.GC_SCAVENGER_SCAVENGE_ROOTS |
    V8.GC_SCAVENGER_SCAVENGE_UPDATE_REFS |
    V8.GC_SCAVENGER_SCAVENGE_WEAK_GLOBAL_HANDLES_IDENTIFY |
    V8.GC_SCAVENGER_SCAVENGE_WEAK_GLOBAL_HANDLES_PROCESS |
    V8.GC_SCAVENGER_SCAVENGE |
    V8.GCCompactor |
    V8.GCFinalizeMC |
    V8.GCFinalizeMCReduceMemory |
    V8.GCIdleNotification |
    V8.GCIncrementalMarking |
    V8.GCIncrementalMarkingFinalize |
    V8.GCIncrementalMarkingLayoutChange |
    V8.GCIncrementalMarkingStart |
    V8.GCMarkCompactorMarkingSummary |
    V8.GCMarkCompactorSummary |
    V8.GCPhantomHandleProcessingCallback |
    V8.GCScavenger |
    V8.HandleInterrupts |
    V8.ICStats |
    V8.InvokeApiInterruptCallbacks |
    V8.NewContext |
    V8.NewInstance |
    V8.OptimizeCode |
    V8.ParseFunction |
    V8.ParseOnBackground |
    V8.ParseProgram |
    V8.PreParse |
    V8.RecompileConcurrent |
    V8.RecompileSynchronous |
    V8.Run |
    V8.Runtime_Runtime_AddDictionaryProperty |
    V8.Runtime_Runtime_AllocateInNewSpace |
    V8.Runtime_Runtime_AllocateInTargetSpace |
    V8.Runtime_Runtime_AllocateSeqTwoByteString |
    V8.Runtime_Runtime_ArrayIndexOf |
    V8.Runtime_Runtime_ArraySpeciesConstructor |
    V8.Runtime_Runtime_CompileLazy |
    V8.Runtime_Runtime_CompileOptimized_Concurrent |
    V8.Runtime_Runtime_CompleteInobjectSlackTrackingForMap |
    V8.Runtime_Runtime_CreateArrayLiteral |
    V8.Runtime_Runtime_CreateArrayLiteralWithoutAllocationSite |
    V8.Runtime_Runtime_CreateDataProperty |
    V8.Runtime_Runtime_CreateJSGeneratorObject |
    V8.Runtime_Runtime_CreateListFromArrayLike |
    V8.Runtime_Runtime_CreateObjectLiteral |
    V8.Runtime_Runtime_CreateObjectLiteralWithoutAllocationSite |
    V8.Runtime_Runtime_CreateRegExpLiteral |
    V8.Runtime_Runtime_DateCurrentTime |
    V8.Runtime_Runtime_DeclareEvalFunction |
    V8.Runtime_Runtime_DeclareGlobals |
    V8.Runtime_Runtime_DefineAccessorPropertyUnchecked |
    V8.Runtime_Runtime_DefineClass |
    V8.Runtime_Runtime_DefineDataPropertyInLiteral |
    V8.Runtime_Runtime_DeleteProperty |
    V8.Runtime_Runtime_ElementsTransitionAndStoreIC_Miss |
    V8.Runtime_Runtime_ForInEnumerate |
    V8.Runtime_Runtime_GetOwnPropertyDescriptor |
    V8.Runtime_Runtime_GetProperty |
    V8.Runtime_Runtime_HasInPrototypeChain |
    V8.Runtime_Runtime_HasProperty |
    V8.Runtime_Runtime_Interrupt |
    V8.Runtime_Runtime_KeyedLoadIC_Miss |
    V8.Runtime_Runtime_KeyedStoreIC_Miss |
    V8.Runtime_Runtime_KeyedStoreIC_Slow |
    V8.Runtime_Runtime_LoadAccessorProperty |
    V8.Runtime_Runtime_LoadCallbackProperty |
    V8.Runtime_Runtime_LoadElementWithInterceptor |
    V8.Runtime_Runtime_LoadGlobalIC_Miss |
    V8.Runtime_Runtime_LoadGlobalIC_Slow |
    V8.Runtime_Runtime_LoadIC_Miss |
    V8.Runtime_Runtime_LoadLookupSlot |
    V8.Runtime_Runtime_LoadLookupSlotForCall |
    V8.Runtime_Runtime_LoadLookupSlotInsideTypeof |
    V8.Runtime_Runtime_LoadPropertyWithInterceptor |
    V8.Runtime_Runtime_MapGrow |
    V8.Runtime_Runtime_MapShrink |
    V8.Runtime_Runtime_NewArray |
    V8.Runtime_Runtime_NewClosure_Tenured |
    V8.Runtime_Runtime_NewClosure |
    V8.Runtime_Runtime_NewObject |
    V8.Runtime_Runtime_NewScriptContext |
    V8.Runtime_Runtime_NotifyDeoptimized |
    V8.Runtime_Runtime_NumberToString |
    V8.Runtime_Runtime_ObjectCreate |
    V8.Runtime_Runtime_ObjectEntries |
    V8.Runtime_Runtime_ObjectGetOwnPropertyNames |
    V8.Runtime_Runtime_ObjectHasOwnProperty |
    V8.Runtime_Runtime_ObjectKeys |
    V8.Runtime_Runtime_OrdinaryHasInstance |
    V8.Runtime_Runtime_PrepareElementsForSort |
    V8.Runtime_Runtime_PushBlockContext |
    V8.Runtime_Runtime_PushCatchContext |
    V8.Runtime_Runtime_PushWithContext |
    V8.Runtime_Runtime_RegExpExec |
    V8.Runtime_Runtime_RegExpExecMultiple |
    V8.Runtime_Runtime_RegExpInitializeAndCompile |
    V8.Runtime_Runtime_RegExpReplace |
    V8.Runtime_Runtime_ResolvePossiblyDirectEval |
    V8.Runtime_Runtime_RunMicrotaskCallback |
    V8.Runtime_Runtime_SetGrow |
    V8.Runtime_Runtime_SetKeyedProperty |
    V8.Runtime_Runtime_SetNamedProperty |
    V8.Runtime_Runtime_ShrinkPropertyDictionary |
    V8.Runtime_Runtime_StackGuard |
    V8.Runtime_Runtime_StoreCallbackProperty |
    V8.Runtime_Runtime_StoreGlobalIC_Miss |
    V8.Runtime_Runtime_StoreGlobalIC_Slow |
    V8.Runtime_Runtime_StoreIC_Miss |
    V8.Runtime_Runtime_StoreInArrayLiteralIC_Miss |
    V8.Runtime_Runtime_StoreLookupSlot_Sloppy |
    V8.Runtime_Runtime_StoreLookupSlot_Strict |
    V8.Runtime_Runtime_StringAdd |
    V8.Runtime_Runtime_StringBuilderConcat |
    V8.Runtime_Runtime_StringCharCodeAt |
    V8.Runtime_Runtime_StringEqual |
    V8.Runtime_Runtime_StringIncludes |
    V8.Runtime_Runtime_StringIndexOfUnchecked |
    V8.Runtime_Runtime_StringLessThan |
    V8.Runtime_Runtime_StringParseFloat |
    V8.Runtime_Runtime_StringParseInt |
    V8.Runtime_Runtime_StringSplit |
    V8.Runtime_Runtime_StringSubstring |
    V8.Runtime_Runtime_StringToArray |
    V8.Runtime_Runtime_StringToLowerCaseIntl |
    V8.Runtime_Runtime_StringToNumber |
    V8.Runtime_Runtime_Throw |
    V8.Runtime_Runtime_ThrowCalledNonCallable |
    V8.Runtime_Runtime_ThrowConstructedNonConstructable |
    V8.Runtime_Runtime_ToString |
    V8.Runtime_Runtime_TransitionElementsKind |
    V8.Runtime_Runtime_UnwindAndFindExceptionHandler |
    V8.RuntimeStats |
    V8.ScriptCompiler |
    V8.StackGuard |
    V8.Task |
    V8ContextSnapshot.InstallRuntimeEnabled |
    VerifiedRulesetDealer.GetRuleset |
    View.Layout |
    View.Layoutbounds_changed |
    View.Layoutset_bounds |
    View.OnPaint |
    View.OnPaintBackground |
    View.OnPaintBorder |
    View.Paint |
    View.PaintChildren |
    TraceEvent.ViewHostMsg_DidContentsPreferredSizeChange |
    TraceEvent.ViewHostMsg_DocumentAvailableInMainFrame |
    TraceEvent.ViewHostMsg_UpdateZoomLimits |
    TraceEvent.ViewMsg_EnablePreferredSizeChangedMode |
    VirtualboolGrRenderTargetOpList.OnExecuteGrOpFlushState |
    VirtualGrOp.CombineResultnamespace.FillRectOp.OnCombineIfPossibleGrOpGrCaps |
    VirtualGrOp.CombineResultnamespace.TextureOp.OnCombineIfPossibleGrOpGrCaps |
    Virtualnamespace.FillRectOp.OnPrepareDrawsGrMeshDrawOp.Target |
    Virtualnamespace.TextureOp.OnPrepareDrawsGrMeshDrawOp.Target |
    VisibleUnits.CanonicalPosition |
    VisibleUnits.MostBackwardCaretPosition |
    VisibleUnits.MostForwardCaretPosition |
    Visitedlink.Mojom.VisitedLinkNotificationSink |
    TraceEvent.VisuallyComplete100 |
    VisualViewport.MainFrameDidChangeSize |
    VisualViewport.SetSize |
    Viz.BeginFrameArgs |
    Viz.Mojom.CompositingModeReporter |
    Viz.Mojom.CompositorFrameSink |
    Viz.Mojom.CompositorFrameSinkClient |
    Viz.Mojom.DisplayClient |
    Viz.Mojom.FrameSinkManager |
    Viz.Mojom.FrameSinkManagerClient |
    Viz.Mojom.GpuHost |
    Viz.Mojom.GpuService |
    Viz.SharedQuadState |
    TraceEvent.WaitingfornextBeginFrame |
    Web_cache.Mojom.WebCache |
    WebContentsImpl.CreateRenderFrameForRenderManager |
    WebContentsImpl.CreateRenderViewForRenderManager |
    WebContentsImpl.CreateWithOpener |
    WebContentsImpl.DidFinishNavigation |
    WebContentsImpl.DidStartNavigation |
    WebContentsImpl.ReadyToCommitNavigation |
    TraceEvent.WebContentsImplLoading |
    WebFrameWidgetImpl.BeginFrame |
    WebFrameWidgetImpl.UpdateAllLifecyclePhases |
    WebLocalFrameImpl.CreateChildframe |
    WebLocalFrameImpl.CreateFrameView |
    WebScopedVirtualTimePauser.PauseVirtualTime |
    WebURLLoaderImpl.Context.Cancel |
    WebURLLoaderImpl.Context.OnCompletedRequest |
    WebURLLoaderImpl.Context.OnReceivedData |
    WebURLLoaderImpl.Context.OnReceivedRedirect |
    WebURLLoaderImpl.Context.OnReceivedResponse |
    WebURLLoaderImpl.Context.Start |
    WebURLLoaderImpl.LoadAsynchronously |
    WebViewImpl.BeginFrame |
    WebViewImpl.HandleInputEvent |
    WebViewImpl.HandleKeyEvent |
    WebViewImpl.SetIsAcceleratedCompositingActivetrue |
    WebViewImpl.UpdateAllLifecyclePhases |
    Widget.Init |
    TraceEvent.WidgetHostMsg_Close_ACK |
    TraceEvent.WidgetHostMsg_DidCommitAndDrawCompositorFrame |
    TraceEvent.WidgetHostMsg_DidFirstVisuallyNonEmptyPaint |
    TraceEvent.WidgetHostMsg_FrameSwapMessages |
    TraceEvent.WidgetHostMsg_HasTouchEventHandlers |
    TraceEvent.WidgetHostMsg_SelectionBoundsChanged |
    TraceEvent.WidgetHostMsg_TextInputStateChanged |
    TraceEvent.WidgetHostMsg_UpdateScreenRects_ACK |
    WidgetInputHandlerImpl.DispatchEvent |
    TraceEvent.WidgetMsg_SetActive |
    TraceEvent.WidgetMsg_SetInheritedEffectiveTouchAction |
    TraceEvent.WidgetMsg_SetIsInert |
    TraceEvent.WidgetMsg_SetViewportIntersection |
    TraceEvent.WidgetMsg_SynchronizeVisualProperties |
    TraceEvent.WidgetMsg_UpdateRenderThrottlingStatus |
    TraceEvent.WidgetMsg_UpdateScreenRects |
    TraceEvent.WidgetMsg_WasHidden |
    TraceEvent.WidgetMsg_WasShown |
    TraceEvent.WriteTransaction |
    Ws.Mojom.Gpu |
    X509Certificate.CreateFromDERCertChain |
    TraceEvent.XHRLoad |
    TraceEvent.XHRReadyStateChange |
    TraceEvent.YieldParserForScriptBlockingResources |
    TraceEvent.YieldParserForScriptLoad |
    ZeroSuggestProvider.Start |
    TraceEvent.ZonesAndDomReady |
    TraceEvent.ZonesReady;

  type A = 
    TraceEvent.A.F |
    TraceEvent.A.S;

  type AAConvexPathOp = 
    TraceEvent.AAConvexPathOp.X;

  type AAStrokeRect = 
    TraceEvent.AAStrokeRect.X;

  type AcquireLock = 
    TraceEvent.AcquireLock.X;

  type ActivateLayerTree = 
    TraceEvent.ActivateLayerTree.I;

  type AddFrameDisplayed = 
    TraceEvent.AddFrameDisplayed.X;

  type Allactivesurfacesready = 
    TraceEvent.Allactivesurfacesready.I;

  type Animation = 
    TraceEvent.Animation.b |
    TraceEvent.Animation.e |
    TraceEvent.Animation.n;

  type AsyncTask = 
    TraceEvent.AsyncTask.f |
    TraceEvent.AsyncTask.s |
    TraceEvent.AsyncTask.t;

  type AtlasTextOp = 
    TraceEvent.AtlasTextOp.X;

  type BeginFrame = 
    TraceEvent.BeginFrame.I;

  type BeginFrameArgs = 
    TraceEvent.BeginFrameArgs.t;

  type BeginMainThreadFrame = 
    TraceEvent.BeginMainThreadFrame.I;

  type BlinkGCMarking = 
    TraceEvent.BlinkGCMarking.X;

  type BrowserWorker0x7fd3431d1a00 = 
    TraceEvent.BrowserWorker0x7fd3431d1a00.b |
    TraceEvent.BrowserWorker0x7fd3431d1a00.e |
    TraceEvent.BrowserWorker0x7fd3431d1a00.F |
    TraceEvent.BrowserWorker0x7fd3431d1a00.S;

  type BudgetPool_DisableThrottling = 
    TraceEvent.BudgetPool_DisableThrottling.X;

  type CalculateRenderSurfaceLayerList = 
    TraceEvent.CalculateRenderSurfaceLayerList.X;

  type CancelAnimationFrame = 
    TraceEvent.CancelAnimationFrame.I;

  type CANCELLED = 
    TraceEvent.CANCELLED.n;

  type CanExceedIdleDeadlineIfRequired = 
    TraceEvent.CanExceedIdleDeadlineIfRequired.X;

  type Canvas2DLayerBridgeCreation = 
    TraceEvent.Canvas2DLayerBridgeCreation.I;

  type CERT_VERIFIER_REQUEST_BOUND_TO_JOB = 
    TraceEvent.CERT_VERIFIER_REQUEST_BOUND_TO_JOB.n;

  type CERT_VERIFIER_REQUEST = 
    TraceEvent.CERT_VERIFIER_REQUEST.b |
    TraceEvent.CERT_VERIFIER_REQUEST.e;

  type ChromeViewHostMsg_AllowDOMStorage = 
    TraceEvent.ChromeViewHostMsg_AllowDOMStorage.X;

  type CircleOp = 
    TraceEvent.CircleOp.X;

  type CircularRRectOp = 
    TraceEvent.CircularRRectOp.X;

  type Cleanup_tq = 
    TraceEvent.Cleanup_tq.C;

  type ClearusingTexSubImage2D = 
    TraceEvent.ClearusingTexSubImage2D.X;

  type CommitLoad = 
    TraceEvent.CommitLoad.X;

  type CommitPendingTreesToCA = 
    TraceEvent.CommitPendingTreesToCA.X;

  type CompositeLayers = 
    TraceEvent.CompositeLayers.B |
    TraceEvent.CompositeLayers.E;

  type Compositor_tq = 
    TraceEvent.Compositor_tq.C;

  type CONNECT_JOB_SET_SOCKET = 
    TraceEvent.CONNECT_JOB_SET_SOCKET.n;

  type ContextCreatedNotification = 
    TraceEvent.ContextCreatedNotification.X;

  type Control_tq = 
    TraceEvent.Control_tq.C;

  type COOKIE_STORE_COOKIE_ADDED = 
    TraceEvent.COOKIE_STORE_COOKIE_ADDED.n;

  type COOKIE_STORE_COOKIE_DELETED = 
    TraceEvent.COOKIE_STORE_COOKIE_DELETED.n;

  type CreateIOSurface = 
    TraceEvent.CreateIOSurface.X;

  type CSSFirstUsed = 
    TraceEvent.CSSFirstUsed.X;

  type Damagenotvisible = 
    TraceEvent.Damagenotvisible.I;

  type DecodeFont = 
    TraceEvent.DecodeFont.B |
    TraceEvent.DecodeFont.E;

  type DecodeImage = 
    TraceEvent.DecodeImage.X;

  type DecodeLazyPixelRef = 
    TraceEvent.DecodeLazyPixelRef.X;

  type Default_tq = 
    TraceEvent.Default_tq.C;

  type DefaultPathOp = 
    TraceEvent.DefaultPathOp.X;

  type DidPrepareTiles = 
    TraceEvent.DidPrepareTiles.I;

  type DidProcessTask = 
    TraceEvent.DidProcessTask.X;

  type DiskUsage = 
    TraceEvent.DiskUsage.C;

  type DisplayCompositor = 
    TraceEvent.DisplayCompositor.b |
    TraceEvent.DisplayCompositor.e |
    TraceEvent.DisplayCompositor.F |
    TraceEvent.DisplayCompositor.S;

  type DNS_TRANSACTION_ATTEMPT = 
    TraceEvent.DNS_TRANSACTION_ATTEMPT.n;

  type DNS_TRANSACTION_QUERY = 
    TraceEvent.DNS_TRANSACTION_QUERY.b |
    TraceEvent.DNS_TRANSACTION_QUERY.e;

  type DNS_TRANSACTION_RESPONSE = 
    TraceEvent.DNS_TRANSACTION_RESPONSE.n;

  type DNS_TRANSACTION = 
    TraceEvent.DNS_TRANSACTION.b |
    TraceEvent.DNS_TRANSACTION.e;

  type DomComplete = 
    TraceEvent.DomComplete.R;

  type DOMContentLoaded = 
    TraceEvent.DOMContentLoaded.b |
    TraceEvent.DOMContentLoaded.e;

  type DomContentLoadedEventEnd = 
    TraceEvent.DomContentLoadedEventEnd.R;

  type DomContentLoadedEventStart = 
    TraceEvent.DomContentLoadedEventStart.R;

  type DomInteractive = 
    TraceEvent.DomInteractive.R;

  type DomLoading = 
    TraceEvent.DomLoading.R;

  type DomReady = 
    TraceEvent.DomReady.R;

  type DOMStorageHostMsg_LoadStorageArea = 
    TraceEvent.DOMStorageHostMsg_LoadStorageArea.X;

  type DOMStorageHostMsg_OpenStorageArea = 
    TraceEvent.DOMStorageHostMsg_OpenStorageArea.X;

  type DOMStorageHostMsg_RemoveItem = 
    TraceEvent.DOMStorageHostMsg_RemoveItem.X;

  type DOMStorageHostMsg_SetItem = 
    TraceEvent.DOMStorageHostMsg_SetItem.X;

  type DOMStorageMsg_AsyncOperationComplete = 
    TraceEvent.DOMStorageMsg_AsyncOperationComplete.X;

  type DOMStorageMsg_Event = 
    TraceEvent.DOMStorageMsg_Event.X;

  type DomTime = 
    TraceEvent.DomTime.b |
    TraceEvent.DomTime.e;

  type DoVerifyOnWorkerThread = 
    TraceEvent.DoVerifyOnWorkerThread.X;

  type DrawFrame = 
    TraceEvent.DrawFrame.I;

  type DrawLazyPixelRef = 
    TraceEvent.DrawLazyPixelRef.I;

  type Drawskipped = 
    TraceEvent.Drawskipped.I;

  type DrawVerticesOp = 
    TraceEvent.DrawVerticesOp.X;

  type EarlyOut_DeferCommit_InsideBeginMainFrame = 
    TraceEvent.EarlyOut_DeferCommit_InsideBeginMainFrame.I;

  type EarlyOut_NoUpdates = 
    TraceEvent.EarlyOut_NoUpdates.I;

  type EnableLongIdlePeriod = 
    TraceEvent.EnableLongIdlePeriod.X;

  type EndIdlePeriod = 
    TraceEvent.EndIdlePeriod.X;

  type EndofTrace = 
    TraceEvent.EndofTrace.b |
    TraceEvent.EndofTrace.e;

  type Estimated_queueing_time_for_window = 
    TraceEvent.Estimated_queueing_time_for_window.C;

  type EvaluateScript = 
    TraceEvent.EvaluateScript.X;

  type EventDispatch = 
    TraceEvent.EventDispatch.X;

  type ExtensionHostMsg_AddLazyListener = 
    TraceEvent.ExtensionHostMsg_AddLazyListener.X;

  type ExtensionHostMsg_AddListener = 
    TraceEvent.ExtensionHostMsg_AddListener.X;

  type ExtensionHostMsg_CloseMessagePort = 
    TraceEvent.ExtensionHostMsg_CloseMessagePort.X;

  type ExtensionHostMsg_EventAck = 
    TraceEvent.ExtensionHostMsg_EventAck.X;

  type ExtensionHostMsg_ExecuteCodeFinished = 
    TraceEvent.ExtensionHostMsg_ExecuteCodeFinished.X;

  type ExtensionHostMsg_GenerateUniqueID = 
    TraceEvent.ExtensionHostMsg_GenerateUniqueID.X;

  type ExtensionHostMsg_GetMessageBundle = 
    TraceEvent.ExtensionHostMsg_GetMessageBundle.X;

  type ExtensionHostMsg_OpenChannelToExtension = 
    TraceEvent.ExtensionHostMsg_OpenChannelToExtension.X;

  type ExtensionHostMsg_OpenChannelToTab = 
    TraceEvent.ExtensionHostMsg_OpenChannelToTab.X;

  type ExtensionHostMsg_OpenMessagePort = 
    TraceEvent.ExtensionHostMsg_OpenMessagePort.X;

  type ExtensionHostMsg_PostMessage = 
    TraceEvent.ExtensionHostMsg_PostMessage.X;

  type ExtensionHostMsg_Request = 
    TraceEvent.ExtensionHostMsg_Request.X;

  type ExtensionHostMsg_RequestForIOThread = 
    TraceEvent.ExtensionHostMsg_RequestForIOThread.X;

  type ExtensionMsg_ActivateExtension = 
    TraceEvent.ExtensionMsg_ActivateExtension.X;

  type ExtensionMsg_DeliverMessage = 
    TraceEvent.ExtensionMsg_DeliverMessage.X;

  type ExtensionMsg_DispatchEvent = 
    TraceEvent.ExtensionMsg_DispatchEvent.X;

  type ExtensionMsg_DispatchOnConnect = 
    TraceEvent.ExtensionMsg_DispatchOnConnect.X;

  type ExtensionMsg_DispatchOnDisconnect = 
    TraceEvent.ExtensionMsg_DispatchOnDisconnect.X;

  type ExtensionMsg_ExecuteCode = 
    TraceEvent.ExtensionMsg_ExecuteCode.X;

  type ExtensionMsg_Loaded = 
    TraceEvent.ExtensionMsg_Loaded.X;

  type ExtensionMsg_NotifyRenderViewType = 
    TraceEvent.ExtensionMsg_NotifyRenderViewType.X;

  type ExtensionMsg_Response = 
    TraceEvent.ExtensionMsg_Response.X;

  type ExtensionMsg_SetScriptingWhitelist = 
    TraceEvent.ExtensionMsg_SetScriptingWhitelist.X;

  type ExtensionMsg_SetSessionInfo = 
    TraceEvent.ExtensionMsg_SetSessionInfo.X;

  type ExtensionMsg_SetSystemFont = 
    TraceEvent.ExtensionMsg_SetSystemFont.X;

  type ExtensionMsg_SetTabId = 
    TraceEvent.ExtensionMsg_SetTabId.X;

  type ExtensionMsg_UpdateBrowserWindowId = 
    TraceEvent.ExtensionMsg_UpdateBrowserWindowId.X;

  type ExtensionMsg_UpdateDefaultPolicyHostRestrictions = 
    TraceEvent.ExtensionMsg_UpdateDefaultPolicyHostRestrictions.X;

  type ExtensionMsg_UpdateUserScripts = 
    TraceEvent.ExtensionMsg_UpdateUserScripts.X;

  type ExtensionMsg_ValidateMessagePort = 
    TraceEvent.ExtensionMsg_ValidateMessagePort.X;

  type ExtensionMsg_WatchPages = 
    TraceEvent.ExtensionMsg_WatchPages.X;

  type FaveReady_mark = 
    TraceEvent.FaveReady_mark.R;

  type FaveReady = 
    TraceEvent.FaveReady.b |
    TraceEvent.FaveReady.e;

  type FeatureFirstUsed = 
    TraceEvent.FeatureFirstUsed.X;

  type FetchStart = 
    TraceEvent.FetchStart.R;

  type FillRectOp = 
    TraceEvent.FillRectOp.X;

  type FireAnimationFrame = 
    TraceEvent.FireAnimationFrame.X;

  type FireIdleCallback = 
    TraceEvent.FireIdleCallback.X;

  type FirstContentfulPaint = 
    TraceEvent.FirstContentfulPaint.b |
    TraceEvent.FirstContentfulPaint.e |
    TraceEvent.FirstContentfulPaint.I |
    TraceEvent.FirstContentfulPaint.R;

  type FirstImagePaint = 
    TraceEvent.FirstImagePaint.R;

  type FirstLayout = 
    TraceEvent.FirstLayout.R;

  type FirstMeaningfulPaint = 
    TraceEvent.FirstMeaningfulPaint.b |
    TraceEvent.FirstMeaningfulPaint.e |
    TraceEvent.FirstMeaningfulPaint.R;

  type FirstMeaningfulPaintCandidate = 
    TraceEvent.FirstMeaningfulPaintCandidate.R;

  type FirstPaint = 
    TraceEvent.FirstPaint.I |
    TraceEvent.FirstPaint.R;

  type FirstTextPaint = 
    TraceEvent.FirstTextPaint.R;

  type FirstVisualChange = 
    TraceEvent.FirstVisualChange.b |
    TraceEvent.FirstVisualChange.e;

  type FooterEnd = 
    TraceEvent.FooterEnd.R;

  type FooterStart = 
    TraceEvent.FooterStart.R;

  type FooterTime = 
    TraceEvent.FooterTime.b |
    TraceEvent.FooterTime.e;

  type Frame_deferrable_tq = 
    TraceEvent.Frame_deferrable_tq.C;

  type Frame_loading_control_tq = 
    TraceEvent.Frame_loading_control_tq.C;

  type Frame_loading_tq = 
    TraceEvent.Frame_loading_tq.C;

  type Frame_pausable_tq = 
    TraceEvent.Frame_pausable_tq.C;

  type Frame_throttleable_tq = 
    TraceEvent.Frame_throttleable_tq.C;

  type Frame_unpausable_tq = 
    TraceEvent.Frame_unpausable_tq.C;

  type FrameBlameContext = 
    TraceEvent.FrameBlameContext.LP |
    TraceEvent.FrameBlameContext.RP;

  type FrameCommittedInBrowser = 
    TraceEvent.FrameCommittedInBrowser.I;

  type FrameDeletedInBrowser = 
    TraceEvent.FrameDeletedInBrowser.I;

  type FrameHostMsg_BeforeUnload_ACK = 
    TraceEvent.FrameHostMsg_BeforeUnload_ACK.X;

  type FrameHostMsg_CheckCompleted = 
    TraceEvent.FrameHostMsg_CheckCompleted.X;

  type FrameHostMsg_CookiesEnabled = 
    TraceEvent.FrameHostMsg_CookiesEnabled.X;

  type FrameHostMsg_CreateChildFrame = 
    TraceEvent.FrameHostMsg_CreateChildFrame.X;

  type FrameHostMsg_DidAddContentSecurityPolicies = 
    TraceEvent.FrameHostMsg_DidAddContentSecurityPolicies.X;

  type FrameHostMsg_DidAddMessageToConsole = 
    TraceEvent.FrameHostMsg_DidAddMessageToConsole.X;

  type FrameHostMsg_DidChangeFrameOwnerProperties = 
    TraceEvent.FrameHostMsg_DidChangeFrameOwnerProperties.X;

  type FrameHostMsg_DidChangeLoadProgress = 
    TraceEvent.FrameHostMsg_DidChangeLoadProgress.X;

  type FrameHostMsg_DidFailLoadWithError = 
    TraceEvent.FrameHostMsg_DidFailLoadWithError.X;

  type FrameHostMsg_DidFinishDocumentLoad = 
    TraceEvent.FrameHostMsg_DidFinishDocumentLoad.X;

  type FrameHostMsg_DidFinishLoad = 
    TraceEvent.FrameHostMsg_DidFinishLoad.X;

  type FrameHostMsg_DidStopLoading = 
    TraceEvent.FrameHostMsg_DidStopLoading.X;

  type FrameHostMsg_DispatchLoad = 
    TraceEvent.FrameHostMsg_DispatchLoad.X;

  type FrameHostMsg_DocumentOnLoadCompleted = 
    TraceEvent.FrameHostMsg_DocumentOnLoadCompleted.X;

  type FrameHostMsg_FocusedNodeChanged = 
    TraceEvent.FrameHostMsg_FocusedNodeChanged.X;

  type FrameHostMsg_ForwardResourceTimingToParent = 
    TraceEvent.FrameHostMsg_ForwardResourceTimingToParent.X;

  type FrameHostMsg_FrameFocused = 
    TraceEvent.FrameHostMsg_FrameFocused.X;

  type FrameHostMsg_HittestData = 
    TraceEvent.FrameHostMsg_HittestData.X;

  type FrameHostMsg_RouteMessageEvent = 
    TraceEvent.FrameHostMsg_RouteMessageEvent.X;

  type FrameHostMsg_SuddenTerminationDisablerChanged = 
    TraceEvent.FrameHostMsg_SuddenTerminationDisablerChanged.X;

  type FrameHostMsg_SwapOut_ACK = 
    TraceEvent.FrameHostMsg_SwapOut_ACK.X;

  type FrameHostMsg_SynchronizeVisualProperties = 
    TraceEvent.FrameHostMsg_SynchronizeVisualProperties.X;

  type FrameHostMsg_UpdatePageImportanceSignals = 
    TraceEvent.FrameHostMsg_UpdatePageImportanceSignals.X;

  type FrameHostMsg_UpdateRenderThrottlingStatus = 
    TraceEvent.FrameHostMsg_UpdateRenderThrottlingStatus.X;

  type FrameHostMsg_UpdateState = 
    TraceEvent.FrameHostMsg_UpdateState.X;

  type FrameHostMsg_UpdateTitle = 
    TraceEvent.FrameHostMsg_UpdateTitle.X;

  type FrameHostMsg_UpdateUserActivationState = 
    TraceEvent.FrameHostMsg_UpdateUserActivationState.X;

  type FrameHostMsg_UpdateViewportIntersection = 
    TraceEvent.FrameHostMsg_UpdateViewportIntersection.X;

  type FrameHostMsg_VisibilityChanged = 
    TraceEvent.FrameHostMsg_VisibilityChanged.X;

  type FrameLoader = 
    TraceEvent.FrameLoader.D |
    TraceEvent.FrameLoader.N |
    TraceEvent.FrameLoader.O;

  type FrameMsg_AddContentSecurityPolicies = 
    TraceEvent.FrameMsg_AddContentSecurityPolicies.X;

  type FrameMsg_Delete = 
    TraceEvent.FrameMsg_Delete.X;

  type FrameMsg_DeleteProxy = 
    TraceEvent.FrameMsg_DeleteProxy.X;

  type FrameMsg_DidStartLoading = 
    TraceEvent.FrameMsg_DidStartLoading.X;

  type FrameMsg_DidStopLoading = 
    TraceEvent.FrameMsg_DidStopLoading.X;

  type FrameMsg_DidUpdateFramePolicy = 
    TraceEvent.FrameMsg_DidUpdateFramePolicy.X;

  type FrameMsg_DidUpdateOrigin = 
    TraceEvent.FrameMsg_DidUpdateOrigin.X;

  type FrameMsg_PostMessageEvent = 
    TraceEvent.FrameMsg_PostMessageEvent.X;

  type FrameMsg_ResetContentSecurityPolicy = 
    TraceEvent.FrameMsg_ResetContentSecurityPolicy.X;

  type FrameMsg_SetAccessibilityMode = 
    TraceEvent.FrameMsg_SetAccessibilityMode.X;

  type FrameMsg_SetFrameOwnerProperties = 
    TraceEvent.FrameMsg_SetFrameOwnerProperties.X;

  type FrameMsg_UpdateUserActivationState = 
    TraceEvent.FrameMsg_UpdateUserActivationState.X;

  type FramePresented = 
    TraceEvent.FramePresented.R;

  type FrameStartedLoading = 
    TraceEvent.FrameStartedLoading.I;

  type FullImage = 
    TraceEvent.FullImage.X;

  type FunctionCall = 
    TraceEvent.FunctionCall.B |
    TraceEvent.FunctionCall.E;

  type GlResizeChromium = 
    TraceEvent.GlResizeChromium.X;

  type Goog_123_3_1_end = 
    TraceEvent.Goog_123_3_1_end.R;

  type Goog_123_3_1_start = 
    TraceEvent.Goog_123_3_1_start.R;

  type Goog_123_3_1 = 
    TraceEvent.Goog_123_3_1.b |
    TraceEvent.Goog_123_3_1.e;

  type GpuChannelMsg_CreateCommandBuffer = 
    TraceEvent.GpuChannelMsg_CreateCommandBuffer.X;

  type GpuChannelMsg_CreateSharedImage = 
    TraceEvent.GpuChannelMsg_CreateSharedImage.X;

  type GpuChannelMsg_CreateSharedImageWithData = 
    TraceEvent.GpuChannelMsg_CreateSharedImageWithData.X;

  type GpuChannelMsg_DestroyCommandBuffer = 
    TraceEvent.GpuChannelMsg_DestroyCommandBuffer.X;

  type GpuChannelMsg_DestroySharedImage = 
    TraceEvent.GpuChannelMsg_DestroySharedImage.X;

  type GpuChannelMsg_RegisterSharedImageUploadBuffer = 
    TraceEvent.GpuChannelMsg_RegisterSharedImageUploadBuffer.X;

  type GpuCommandBufferMsg_AsyncFlush = 
    TraceEvent.GpuCommandBufferMsg_AsyncFlush.X;

  type GpuCommandBufferMsg_DestroyTransferBuffer = 
    TraceEvent.GpuCommandBufferMsg_DestroyTransferBuffer.X;

  type GpuCommandBufferMsg_GetChannelToken = 
    TraceEvent.GpuCommandBufferMsg_GetChannelToken.X;

  type GpuCommandBufferMsg_RegisterTransferBuffer = 
    TraceEvent.GpuCommandBufferMsg_RegisterTransferBuffer.X;

  type GpuCommandBufferMsg_SetGetBuffer = 
    TraceEvent.GpuCommandBufferMsg_SetGetBuffer.X;

  type GpuCommandBufferMsg_WaitForGetOffsetInRange = 
    TraceEvent.GpuCommandBufferMsg_WaitForGetOffsetInRange.X;

  type GpuRasterization = 
    TraceEvent.GpuRasterization.b |
    TraceEvent.GpuRasterization.e |
    TraceEvent.GpuRasterization.F |
    TraceEvent.GpuRasterization.S;

  type GPUTask = 
    TraceEvent.GPUTask.X;

  type HandleMouseMove = 
    TraceEvent.HandleMouseMove.X;

  type HeadEnd = 
    TraceEvent.HeadEnd.R;

  type HeadTime = 
    TraceEvent.HeadTime.b |
    TraceEvent.HeadTime.e;

  type HitTest = 
    TraceEvent.HitTest.B |
    TraceEvent.HitTest.E;

  type HOST_RESOLVER_IMPL_ATTEMPT_FINISHED = 
    TraceEvent.HOST_RESOLVER_IMPL_ATTEMPT_FINISHED.n;

  type HOST_RESOLVER_IMPL_ATTEMPT_STARTED = 
    TraceEvent.HOST_RESOLVER_IMPL_ATTEMPT_STARTED.n;

  type HOST_RESOLVER_IMPL_CACHE_HIT = 
    TraceEvent.HOST_RESOLVER_IMPL_CACHE_HIT.n;

  type HOST_RESOLVER_IMPL_CREATE_JOB = 
    TraceEvent.HOST_RESOLVER_IMPL_CREATE_JOB.n;

  type HOST_RESOLVER_IMPL_DNS_TASK = 
    TraceEvent.HOST_RESOLVER_IMPL_DNS_TASK.b |
    TraceEvent.HOST_RESOLVER_IMPL_DNS_TASK.e;

  type HOST_RESOLVER_IMPL_IPV6_REACHABILITY_CHECK = 
    TraceEvent.HOST_RESOLVER_IMPL_IPV6_REACHABILITY_CHECK.n;

  type HOST_RESOLVER_IMPL_JOB_ATTACH = 
    TraceEvent.HOST_RESOLVER_IMPL_JOB_ATTACH.n;

  type HOST_RESOLVER_IMPL_JOB_REQUEST_ATTACH = 
    TraceEvent.HOST_RESOLVER_IMPL_JOB_REQUEST_ATTACH.n;

  type HOST_RESOLVER_IMPL_JOB_STARTED = 
    TraceEvent.HOST_RESOLVER_IMPL_JOB_STARTED.n;

  type HOST_RESOLVER_IMPL_JOB = 
    TraceEvent.HOST_RESOLVER_IMPL_JOB.b |
    TraceEvent.HOST_RESOLVER_IMPL_JOB.e;

  type HOST_RESOLVER_IMPL_PROC_TASK = 
    TraceEvent.HOST_RESOLVER_IMPL_PROC_TASK.b |
    TraceEvent.HOST_RESOLVER_IMPL_PROC_TASK.e;

  type HOST_RESOLVER_IMPL_REQUEST = 
    TraceEvent.HOST_RESOLVER_IMPL_REQUEST.b |
    TraceEvent.HOST_RESOLVER_IMPL_REQUEST.e;

  type HTMLParserScriptRunnerExecuteScript = 
    TraceEvent.HTMLParserScriptRunnerExecuteScript.X;

  type HTTP_CACHE_ADD_TO_ENTRY = 
    TraceEvent.HTTP_CACHE_ADD_TO_ENTRY.b |
    TraceEvent.HTTP_CACHE_ADD_TO_ENTRY.e;

  type HTTP_CACHE_CALLER_REQUEST_HEADERS = 
    TraceEvent.HTTP_CACHE_CALLER_REQUEST_HEADERS.n;

  type HTTP_CACHE_CREATE_ENTRY = 
    TraceEvent.HTTP_CACHE_CREATE_ENTRY.b |
    TraceEvent.HTTP_CACHE_CREATE_ENTRY.e;

  type HTTP_CACHE_GET_BACKEND = 
    TraceEvent.HTTP_CACHE_GET_BACKEND.b |
    TraceEvent.HTTP_CACHE_GET_BACKEND.e;

  type HTTP_CACHE_OPEN_ENTRY = 
    TraceEvent.HTTP_CACHE_OPEN_ENTRY.b |
    TraceEvent.HTTP_CACHE_OPEN_ENTRY.e;

  type HTTP_CACHE_READ_DATA = 
    TraceEvent.HTTP_CACHE_READ_DATA.b |
    TraceEvent.HTTP_CACHE_READ_DATA.e;

  type HTTP_CACHE_READ_INFO = 
    TraceEvent.HTTP_CACHE_READ_INFO.b |
    TraceEvent.HTTP_CACHE_READ_INFO.e;

  type HTTP_CACHE_WRITE_DATA = 
    TraceEvent.HTTP_CACHE_WRITE_DATA.b |
    TraceEvent.HTTP_CACHE_WRITE_DATA.e;

  type HTTP_CACHE_WRITE_INFO = 
    TraceEvent.HTTP_CACHE_WRITE_INFO.b |
    TraceEvent.HTTP_CACHE_WRITE_INFO.e;

  type HTTP_STREAM_JOB_BOUND_TO_QUIC_STREAM_FACTORY_JOB = 
    TraceEvent.HTTP_STREAM_JOB_BOUND_TO_QUIC_STREAM_FACTORY_JOB.n;

  type HTTP_STREAM_JOB_BOUND_TO_REQUEST = 
    TraceEvent.HTTP_STREAM_JOB_BOUND_TO_REQUEST.n;

  type HTTP_STREAM_JOB_CONTROLLER_ALT_SVC_FOUND = 
    TraceEvent.HTTP_STREAM_JOB_CONTROLLER_ALT_SVC_FOUND.n;

  type HTTP_STREAM_JOB_CONTROLLER_BOUND = 
    TraceEvent.HTTP_STREAM_JOB_CONTROLLER_BOUND.n;

  type HTTP_STREAM_JOB_CONTROLLER_PROXY_SERVER_RESOLVED = 
    TraceEvent.HTTP_STREAM_JOB_CONTROLLER_PROXY_SERVER_RESOLVED.n;

  type HTTP_STREAM_JOB_CONTROLLER = 
    TraceEvent.HTTP_STREAM_JOB_CONTROLLER.b |
    TraceEvent.HTTP_STREAM_JOB_CONTROLLER.e;

  type HTTP_STREAM_JOB_DELAYED = 
    TraceEvent.HTTP_STREAM_JOB_DELAYED.n;

  type HTTP_STREAM_JOB_INIT_CONNECTION = 
    TraceEvent.HTTP_STREAM_JOB_INIT_CONNECTION.b |
    TraceEvent.HTTP_STREAM_JOB_INIT_CONNECTION.e;

  type HTTP_STREAM_JOB_WAITING = 
    TraceEvent.HTTP_STREAM_JOB_WAITING.b |
    TraceEvent.HTTP_STREAM_JOB_WAITING.e;

  type HTTP_STREAM_JOB = 
    TraceEvent.HTTP_STREAM_JOB.b |
    TraceEvent.HTTP_STREAM_JOB.e;

  type HTTP_STREAM_PARSER_READ_HEADERS = 
    TraceEvent.HTTP_STREAM_PARSER_READ_HEADERS.b |
    TraceEvent.HTTP_STREAM_PARSER_READ_HEADERS.e;

  type HTTP_STREAM_REQUEST_BOUND_TO_JOB = 
    TraceEvent.HTTP_STREAM_REQUEST_BOUND_TO_JOB.n;

  type HTTP_STREAM_REQUEST_BOUND_TO_QUIC_SESSION = 
    TraceEvent.HTTP_STREAM_REQUEST_BOUND_TO_QUIC_SESSION.n;

  type HTTP_STREAM_REQUEST_PROTO = 
    TraceEvent.HTTP_STREAM_REQUEST_PROTO.n;

  type HTTP_STREAM_REQUEST_STARTED_JOB = 
    TraceEvent.HTTP_STREAM_REQUEST_STARTED_JOB.n;

  type HTTP_STREAM_REQUEST = 
    TraceEvent.HTTP_STREAM_REQUEST.b |
    TraceEvent.HTTP_STREAM_REQUEST.e;

  type HTTP_TRANSACTION_HTTP2_SEND_REQUEST_HEADERS = 
    TraceEvent.HTTP_TRANSACTION_HTTP2_SEND_REQUEST_HEADERS.n;

  type HTTP_TRANSACTION_QUIC_SEND_REQUEST_HEADERS = 
    TraceEvent.HTTP_TRANSACTION_QUIC_SEND_REQUEST_HEADERS.n;

  type HTTP_TRANSACTION_READ_BODY = 
    TraceEvent.HTTP_TRANSACTION_READ_BODY.b |
    TraceEvent.HTTP_TRANSACTION_READ_BODY.e;

  type HTTP_TRANSACTION_READ_HEADERS = 
    TraceEvent.HTTP_TRANSACTION_READ_HEADERS.b |
    TraceEvent.HTTP_TRANSACTION_READ_HEADERS.e;

  type HTTP_TRANSACTION_READ_RESPONSE_HEADERS = 
    TraceEvent.HTTP_TRANSACTION_READ_RESPONSE_HEADERS.n;

  type HTTP_TRANSACTION_SEND_REQUEST_HEADERS = 
    TraceEvent.HTTP_TRANSACTION_SEND_REQUEST_HEADERS.n;

  type HTTP_TRANSACTION_SEND_REQUEST = 
    TraceEvent.HTTP_TRANSACTION_SEND_REQUEST.b |
    TraceEvent.HTTP_TRANSACTION_SEND_REQUEST.e;

  type HTTP2_SESSION_INITIALIZED = 
    TraceEvent.HTTP2_SESSION_INITIALIZED.n;

  type HTTP2_SESSION_PING = 
    TraceEvent.HTTP2_SESSION_PING.n;

  type HTTP2_SESSION_POOL_FOUND_EXISTING_SESSION_FROM_IP_POOL = 
    TraceEvent.HTTP2_SESSION_POOL_FOUND_EXISTING_SESSION_FROM_IP_POOL.n;

  type HTTP2_SESSION_POOL_FOUND_EXISTING_SESSION = 
    TraceEvent.HTTP2_SESSION_POOL_FOUND_EXISTING_SESSION.n;

  type HTTP2_SESSION_POOL_IMPORTED_SESSION_FROM_SOCKET = 
    TraceEvent.HTTP2_SESSION_POOL_IMPORTED_SESSION_FROM_SOCKET.n;

  type HTTP2_SESSION_RECV_DATA = 
    TraceEvent.HTTP2_SESSION_RECV_DATA.n;

  type HTTP2_SESSION_RECV_HEADERS = 
    TraceEvent.HTTP2_SESSION_RECV_HEADERS.n;

  type HTTP2_SESSION_RECV_SETTING = 
    TraceEvent.HTTP2_SESSION_RECV_SETTING.n;

  type HTTP2_SESSION_RECV_SETTINGS_ACK = 
    TraceEvent.HTTP2_SESSION_RECV_SETTINGS_ACK.n;

  type HTTP2_SESSION_RECV_SETTINGS = 
    TraceEvent.HTTP2_SESSION_RECV_SETTINGS.n;

  type HTTP2_SESSION_RECV_WINDOW_UPDATE = 
    TraceEvent.HTTP2_SESSION_RECV_WINDOW_UPDATE.n;

  type HTTP2_SESSION_SEND_HEADERS = 
    TraceEvent.HTTP2_SESSION_SEND_HEADERS.n;

  type HTTP2_SESSION_SEND_SETTINGS_ACK = 
    TraceEvent.HTTP2_SESSION_SEND_SETTINGS_ACK.n;

  type HTTP2_SESSION_SEND_SETTINGS = 
    TraceEvent.HTTP2_SESSION_SEND_SETTINGS.n;

  type HTTP2_SESSION_SEND_WINDOW_UPDATE = 
    TraceEvent.HTTP2_SESSION_SEND_WINDOW_UPDATE.n;

  type HTTP2_SESSION_UPDATE_RECV_WINDOW = 
    TraceEvent.HTTP2_SESSION_UPDATE_RECV_WINDOW.n;

  type HTTP2_SESSION_UPDATE_SEND_WINDOW = 
    TraceEvent.HTTP2_SESSION_UPDATE_SEND_WINDOW.n;

  type HTTP2_SESSION_UPDATE_STREAMS_SEND_WINDOW_SIZE = 
    TraceEvent.HTTP2_SESSION_UPDATE_STREAMS_SEND_WINDOW_SIZE.n;

  type HTTP2_SESSION = 
    TraceEvent.HTTP2_SESSION.b;

  type HTTP2_STREAM_UPDATE_RECV_WINDOW = 
    TraceEvent.HTTP2_STREAM_UPDATE_RECV_WINDOW.n;

  type HTTP2_STREAM_UPDATE_SEND_WINDOW = 
    TraceEvent.HTTP2_STREAM_UPDATE_SEND_WINDOW.n;

  type Idle_tq = 
    TraceEvent.Idle_tq.C;

  type ImageDecodeTask = 
    TraceEvent.ImageDecodeTask.B |
    TraceEvent.ImageDecodeTask.E;

  type Input_tq = 
    TraceEvent.Input_tq.C;

  type InputEventSentBlocking = 
    TraceEvent.InputEventSentBlocking.I;

  type InputMsg_SetFocus = 
    TraceEvent.InputMsg_SetFocus.X;

  type InstallConditionalFeatures = 
    TraceEvent.InstallConditionalFeatures.X;

  type InteractiveTime = 
    TraceEvent.InteractiveTime.R;

  type InvalidateLayout = 
    TraceEvent.InvalidateLayout.I;

  type Ipc_tq = 
    TraceEvent.Ipc_tq.C;

  type IPCChannel = 
    TraceEvent.IPCChannel.X;

  type Is_gesture_active = 
    TraceEvent.Is_gesture_active.C;

  type KeyframeModel = 
    TraceEvent.KeyframeModel.F |
    TraceEvent.KeyframeModel.S;

  type LaunchProcess = 
    TraceEvent.LaunchProcess.X;

  type LayerId = 
    TraceEvent.LayerId.D |
    TraceEvent.LayerId.N;

  type LayerInvalidationTracking = 
    TraceEvent.LayerInvalidationTracking.I;

  type Layout = 
    TraceEvent.Layout.B |
    TraceEvent.Layout.E;

  type LayoutInvalidationTracking = 
    TraceEvent.LayoutInvalidationTracking.I;

  type LoadAnyStartablePendingRequests = 
    TraceEvent.LoadAnyStartablePendingRequests.X;

  type LoadEndeventUtils = 
    TraceEvent.LoadEndeventUtils.R;

  type LoadEndpixelQueue = 
    TraceEvent.LoadEndpixelQueue.R;

  type LoadEventEnd = 
    TraceEvent.LoadEventEnd.R;

  type LoadEventStart = 
    TraceEvent.LoadEventStart.R;

  type LoadFinished = 
    TraceEvent.LoadFinished.I;

  type LoadStarteventUtils = 
    TraceEvent.LoadStarteventUtils.R;

  type LoadStartpixelQueue = 
    TraceEvent.LoadStartpixelQueue.R;

  type LongTask = 
    TraceEvent.LongTask.I;

  type Lteu = 
    TraceEvent.Lteu.b |
    TraceEvent.Lteu.e;

  type Ltpq = 
    TraceEvent.Ltpq.b |
    TraceEvent.Ltpq.e;

  type MainThreadLatency = 
    TraceEvent.MainThreadLatency.C;

  type MainThreadSchedulerIdlePeriod = 
    TraceEvent.MainThreadSchedulerIdlePeriod.F |
    TraceEvent.MainThreadSchedulerIdlePeriod.S |
    TraceEvent.MainThreadSchedulerIdlePeriod.T;

  type MajorGC = 
    TraceEvent.MajorGC.B |
    TraceEvent.MajorGC.E;

  type Mark_test = 
    TraceEvent.Mark_test.R;

  type MarkAsMainFrame = 
    TraceEvent.MarkAsMainFrame.I;

  type MarkDOMContent = 
    TraceEvent.MarkDOMContent.I;

  type MarkLoad = 
    TraceEvent.MarkLoad.I;

  type Measure_test = 
    TraceEvent.Measure_test.b |
    TraceEvent.Measure_test.e;

  type MediaPlayerDelegateHostMsg_OnMutedStatusChanged = 
    TraceEvent.MediaPlayerDelegateHostMsg_OnMutedStatusChanged.X;

  type MemoryUsage = 
    TraceEvent.MemoryUsage.C;

  type MinorGC = 
    TraceEvent.MinorGC.B |
    TraceEvent.MinorGC.E;

  type ModelNeutralWriteTransaction = 
    TraceEvent.ModelNeutralWriteTransaction.B |
    TraceEvent.ModelNeutralWriteTransaction.E;

  type Moredamageexpectedsoon = 
    TraceEvent.Moredamageexpectedsoon.I;

  type NavigationHandle = 
    TraceEvent.NavigationHandle.F |
    TraceEvent.NavigationHandle.S |
    TraceEvent.NavigationHandle.T;

  type NavigationRequest = 
    TraceEvent.NavigationRequest.F |
    TraceEvent.NavigationRequest.S |
    TraceEvent.NavigationRequest.T;

  type NavigationStart = 
    TraceEvent.NavigationStart.R;

  type NavigationStartToCommit = 
    TraceEvent.NavigationStartToCommit.F |
    TraceEvent.NavigationStartToCommit.S;

  type NavigationtimeToResponseStarted = 
    TraceEvent.NavigationtimeToResponseStarted.F |
    TraceEvent.NavigationtimeToResponseStarted.S;

  type NavigationTimingnavigationStart = 
    TraceEvent.NavigationTimingnavigationStart.I;

  type NeedsBeginFrameChanged = 
    TraceEvent.NeedsBeginFrameChanged.I;

  type NeedsTickAnimations = 
    TraceEvent.NeedsTickAnimations.I;

  type NETWORK_DELEGATE_BEFORE_START_TRANSACTION = 
    TraceEvent.NETWORK_DELEGATE_BEFORE_START_TRANSACTION.b |
    TraceEvent.NETWORK_DELEGATE_BEFORE_START_TRANSACTION.e;

  type NETWORK_DELEGATE_BEFORE_URL_REQUEST = 
    TraceEvent.NETWORK_DELEGATE_BEFORE_URL_REQUEST.b |
    TraceEvent.NETWORK_DELEGATE_BEFORE_URL_REQUEST.e;

  type NETWORK_DELEGATE_HEADERS_RECEIVED = 
    TraceEvent.NETWORK_DELEGATE_HEADERS_RECEIVED.b |
    TraceEvent.NETWORK_DELEGATE_HEADERS_RECEIVED.e;

  type NETWORK_QUALITY_CHANGED = 
    TraceEvent.NETWORK_QUALITY_CHANGED.n;

  type NetworkHintsMsg_DNSPrefetch = 
    TraceEvent.NetworkHintsMsg_DNSPrefetch.X;

  type Nodamageyet = 
    TraceEvent.Nodamageyet.I;

  type NotStartingIdlePeriodBecauseDeadlineIsTooClose = 
    TraceEvent.NotStartingIdlePeriodBecauseDeadlineIsTooClose.X;

  type Num_cpus = 
    TraceEvent.Num_cpus.M;

  type Obmark0c_search = 
    TraceEvent.Obmark0c_search.R;

  type Obmark0odbMB_120 = 
    TraceEvent.Obmark0odbMB_120.R;

  type Obmark0odbTR_11 = 
    TraceEvent.Obmark0odbTR_11.R;

  type Obmark0renderMB_120 = 
    TraceEvent.Obmark0renderMB_120.R;

  type Obmark0renderTR_11 = 
    TraceEvent.Obmark0renderTR_11.R;

  type Obmark0start = 
    TraceEvent.Obmark0start.R;

  type Obmark1c_foundMB_120 = 
    TraceEvent.Obmark1c_foundMB_120.R;

  type Obmark1c_foundTR_11 = 
    TraceEvent.Obmark1c_foundTR_11.R;

  type Obmark1odb_rMB_120 = 
    TraceEvent.Obmark1odb_rMB_120.R;

  type Obmark1odb_rTR_11 = 
    TraceEvent.Obmark1odb_rTR_11.R;

  type Obmark1renderedMB_120 = 
    TraceEvent.Obmark1renderedMB_120.R;

  type Obmark1renderedTR_11 = 
    TraceEvent.Obmark1renderedTR_11.R;

  type Obmeasurec_foundMB_120 = 
    TraceEvent.Obmeasurec_foundMB_120.b |
    TraceEvent.Obmeasurec_foundMB_120.e;

  type Obmeasurec_foundTR_11 = 
    TraceEvent.Obmeasurec_foundTR_11.b |
    TraceEvent.Obmeasurec_foundTR_11.e;

  type Obmeasureodb_rMB_120 = 
    TraceEvent.Obmeasureodb_rMB_120.b |
    TraceEvent.Obmeasureodb_rMB_120.e;

  type Obmeasureodb_rTR_11 = 
    TraceEvent.Obmeasureodb_rTR_11.b |
    TraceEvent.Obmeasureodb_rTR_11.e;

  type ObmeasureodbMB_120 = 
    TraceEvent.ObmeasureodbMB_120.b |
    TraceEvent.ObmeasureodbMB_120.e;

  type ObmeasureodbTR_11 = 
    TraceEvent.ObmeasureodbTR_11.b |
    TraceEvent.ObmeasureodbTR_11.e;

  type ObmeasurerenderedMB_120 = 
    TraceEvent.ObmeasurerenderedMB_120.b |
    TraceEvent.ObmeasurerenderedMB_120.e;

  type ObmeasurerenderedTR_11 = 
    TraceEvent.ObmeasurerenderedTR_11.b |
    TraceEvent.ObmeasurerenderedTR_11.e;

  type OnIdleTaskPosted = 
    TraceEvent.OnIdleTaskPosted.X;

  type OnIdleTaskPostedOnMainThread = 
    TraceEvent.OnIdleTaskPostedOnMainThread.X;

  type OnLibevent = 
    TraceEvent.OnLibevent.X;

  type OnLoad = 
    TraceEvent.OnLoad.b |
    TraceEvent.OnLoad.e;

  type OptimizelyEnd = 
    TraceEvent.OptimizelyEnd.R;

  type OptimizelyStart = 
    TraceEvent.OptimizelyStart.R;

  type OptimizelyTime = 
    TraceEvent.OptimizelyTime.b |
    TraceEvent.OptimizelyTime.e;

  type PageLoad = 
    TraceEvent.PageLoad.b |
    TraceEvent.PageLoad.e;

  type PageMsg_SetHistoryOffsetAndLength = 
    TraceEvent.PageMsg_SetHistoryOffsetAndLength.X;

  type PageMsg_UpdateScreenInfo = 
    TraceEvent.PageMsg_UpdateScreenInfo.X;

  type PageMsg_UpdateWindowScreenRect = 
    TraceEvent.PageMsg_UpdateWindowScreenRect.X;

  type PageMsg_WasHidden = 
    TraceEvent.PageMsg_WasHidden.X;

  type PageMsg_WasShown = 
    TraceEvent.PageMsg_WasShown.X;

  type Paint = 
    TraceEvent.Paint.X;

  type PaintImage = 
    TraceEvent.PaintImage.X;

  type PaintInvalidationTracking = 
    TraceEvent.PaintInvalidationTracking.I;

  type PaintNonDefaultBackgroundColor = 
    TraceEvent.PaintNonDefaultBackgroundColor.R;

  type ParseAuthorStyleSheet = 
    TraceEvent.ParseAuthorStyleSheet.X;

  type ParseHTML = 
    TraceEvent.ParseHTML.B |
    TraceEvent.ParseHTML.E;

  type PlatformResourceSendRequest = 
    TraceEvent.PlatformResourceSendRequest.B |
    TraceEvent.PlatformResourceSendRequest.E;

  type PostCommit = 
    TraceEvent.PostCommit.B |
    TraceEvent.PostCommit.E;

  type PrintMsg_SetPrintingEnabled = 
    TraceEvent.PrintMsg_SetPrintingEnabled.X;

  type Process_labels = 
    TraceEvent.Process_labels.M;

  type Process_name = 
    TraceEvent.Process_name.M;

  type Process_sort_index = 
    TraceEvent.Process_sort_index.M;

  type Process_uptime_seconds = 
    TraceEvent.Process_uptime_seconds.M;

  type ProcessCommitResponse = 
    TraceEvent.ProcessCommitResponse.X;

  type ProcessMemoryDump = 
    TraceEvent.ProcessMemoryDump.b |
    TraceEvent.ProcessMemoryDump.e;

  type ProcessPriority = 
    TraceEvent.ProcessPriority.I;

  type Profile = 
    TraceEvent.Profile.P;

  type ProfileChunk = 
    TraceEvent.ProfileChunk.P;

  type PROXY_RESOLUTION_SERVICE_RESOLVED_PROXY_LIST = 
    TraceEvent.PROXY_RESOLUTION_SERVICE_RESOLVED_PROXY_LIST.n;

  type PROXY_RESOLUTION_SERVICE = 
    TraceEvent.PROXY_RESOLUTION_SERVICE.b |
    TraceEvent.PROXY_RESOLUTION_SERVICE.e;

  type QUIC_CHROMIUM_CLIENT_STREAM_READ_RESPONSE_HEADERS = 
    TraceEvent.QUIC_CHROMIUM_CLIENT_STREAM_READ_RESPONSE_HEADERS.n;

  type QUIC_CHROMIUM_CLIENT_STREAM_SEND_REQUEST_HEADERS = 
    TraceEvent.QUIC_CHROMIUM_CLIENT_STREAM_SEND_REQUEST_HEADERS.n;

  type QUIC_CONNECTION_MIGRATION_MODE = 
    TraceEvent.QUIC_CONNECTION_MIGRATION_MODE.n;

  type QUIC_SESSION_ACK_FRAME_SENT = 
    TraceEvent.QUIC_SESSION_ACK_FRAME_SENT.n;

  type QUIC_SESSION_CERTIFICATE_VERIFIED = 
    TraceEvent.QUIC_SESSION_CERTIFICATE_VERIFIED.n;

  type QUIC_SESSION_CLOSED = 
    TraceEvent.QUIC_SESSION_CLOSED.n;

  type QUIC_SESSION_CRYPTO_HANDSHAKE_MESSAGE_RECEIVED = 
    TraceEvent.QUIC_SESSION_CRYPTO_HANDSHAKE_MESSAGE_RECEIVED.n;

  type QUIC_SESSION_CRYPTO_HANDSHAKE_MESSAGE_SENT = 
    TraceEvent.QUIC_SESSION_CRYPTO_HANDSHAKE_MESSAGE_SENT.n;

  type QUIC_SESSION_PACKET_AUTHENTICATED = 
    TraceEvent.QUIC_SESSION_PACKET_AUTHENTICATED.n;

  type QUIC_SESSION_PACKET_LOST = 
    TraceEvent.QUIC_SESSION_PACKET_LOST.n;

  type QUIC_SESSION_PACKET_RECEIVED = 
    TraceEvent.QUIC_SESSION_PACKET_RECEIVED.n;

  type QUIC_SESSION_PACKET_SENT = 
    TraceEvent.QUIC_SESSION_PACKET_SENT.n;

  type QUIC_SESSION_PING_FRAME_SENT = 
    TraceEvent.QUIC_SESSION_PING_FRAME_SENT.n;

  type QUIC_SESSION_RST_STREAM_FRAME_RECEIVED = 
    TraceEvent.QUIC_SESSION_RST_STREAM_FRAME_RECEIVED.n;

  type QUIC_SESSION_RST_STREAM_FRAME_SENT = 
    TraceEvent.QUIC_SESSION_RST_STREAM_FRAME_SENT.n;

  type QUIC_SESSION_STREAM_FRAME_RECEIVED = 
    TraceEvent.QUIC_SESSION_STREAM_FRAME_RECEIVED.n;

  type QUIC_SESSION_STREAM_FRAME_SENT = 
    TraceEvent.QUIC_SESSION_STREAM_FRAME_SENT.n;

  type QUIC_SESSION_UNAUTHENTICATED_PACKET_HEADER_RECEIVED = 
    TraceEvent.QUIC_SESSION_UNAUTHENTICATED_PACKET_HEADER_RECEIVED.n;

  type QUIC_SESSION_VERSION_NEGOTIATED = 
    TraceEvent.QUIC_SESSION_VERSION_NEGOTIATED.n;

  type QUIC_SESSION = 
    TraceEvent.QUIC_SESSION.b |
    TraceEvent.QUIC_SESSION.e;

  type QUIC_STREAM_FACTORY_JOB_BOUND_TO_HTTP_STREAM_JOB = 
    TraceEvent.QUIC_STREAM_FACTORY_JOB_BOUND_TO_HTTP_STREAM_JOB.n;

  type QUIC_STREAM_FACTORY_JOB_CONNECT = 
    TraceEvent.QUIC_STREAM_FACTORY_JOB_CONNECT.b |
    TraceEvent.QUIC_STREAM_FACTORY_JOB_CONNECT.e;

  type QUIC_STREAM_FACTORY_JOB = 
    TraceEvent.QUIC_STREAM_FACTORY_JOB.b |
    TraceEvent.QUIC_STREAM_FACTORY_JOB.e;

  type RasterTask = 
    TraceEvent.RasterTask.B |
    TraceEvent.RasterTask.E;

  type ReadTransaction = 
    TraceEvent.ReadTransaction.B |
    TraceEvent.ReadTransaction.E;

  type RedirectEnd = 
    TraceEvent.RedirectEnd.R;

  type RedirectStart = 
    TraceEvent.RedirectStart.R;

  type RendererAudioState = 
    TraceEvent.RendererAudioState.S |
    TraceEvent.RendererAudioState.T;

  type RendererProcessType = 
    TraceEvent.RendererProcessType.S |
    TraceEvent.RendererProcessType.T;

  type RendererVisibility = 
    TraceEvent.RendererVisibility.F |
    TraceEvent.RendererVisibility.S |
    TraceEvent.RendererVisibility.T;

  type RenderFrame = 
    TraceEvent.RenderFrame.D |
    TraceEvent.RenderFrame.N |
    TraceEvent.RenderFrame.O;

  type RenderFrameHostImplBeforeUnload = 
    TraceEvent.RenderFrameHostImplBeforeUnload.F |
    TraceEvent.RenderFrameHostImplBeforeUnload.S;

  type RenderPass = 
    TraceEvent.RenderPass.D;

  type RenderWorker0x7f8e1500b000 = 
    TraceEvent.RenderWorker0x7f8e1500b000.b |
    TraceEvent.RenderWorker0x7f8e1500b000.e |
    TraceEvent.RenderWorker0x7f8e1500b000.F |
    TraceEvent.RenderWorker0x7f8e1500b000.S;

  type RenderWorker0x7fa57a039c00 = 
    TraceEvent.RenderWorker0x7fa57a039c00.b |
    TraceEvent.RenderWorker0x7fa57a039c00.e |
    TraceEvent.RenderWorker0x7fa57a039c00.F |
    TraceEvent.RenderWorker0x7fa57a039c00.S;

  type RenderWorker0x7fcab207b200 = 
    TraceEvent.RenderWorker0x7fcab207b200.b |
    TraceEvent.RenderWorker0x7fcab207b200.e |
    TraceEvent.RenderWorker0x7fcab207b200.F |
    TraceEvent.RenderWorker0x7fcab207b200.S;

  type RenderWorker0x7fd50f00aa00 = 
    TraceEvent.RenderWorker0x7fd50f00aa00.b |
    TraceEvent.RenderWorker0x7fd50f00aa00.e |
    TraceEvent.RenderWorker0x7fd50f00aa00.F |
    TraceEvent.RenderWorker0x7fd50f00aa00.S;

  type RenderWorker0x7fdabc07b400 = 
    TraceEvent.RenderWorker0x7fdabc07b400.b |
    TraceEvent.RenderWorker0x7fdabc07b400.e |
    TraceEvent.RenderWorker0x7fdabc07b400.F |
    TraceEvent.RenderWorker0x7fdabc07b400.S;

  type RenderWorker0x7fdefa843000 = 
    TraceEvent.RenderWorker0x7fdefa843000.b |
    TraceEvent.RenderWorker0x7fdefa843000.e |
    TraceEvent.RenderWorker0x7fdefa843000.F |
    TraceEvent.RenderWorker0x7fdefa843000.S;

  type RenderWorker0x7fe5c4821c00 = 
    TraceEvent.RenderWorker0x7fe5c4821c00.b |
    TraceEvent.RenderWorker0x7fe5c4821c00.e |
    TraceEvent.RenderWorker0x7fe5c4821c00.F |
    TraceEvent.RenderWorker0x7fe5c4821c00.S;

  type REQUEST_ALIVE = 
    TraceEvent.REQUEST_ALIVE.b |
    TraceEvent.REQUEST_ALIVE.e;

  type RequestAnimationFrame = 
    TraceEvent.RequestAnimationFrame.I;

  type RequestIdleCallback = 
    TraceEvent.RequestIdleCallback.I;

  type RequestMainThreadFrame = 
    TraceEvent.RequestMainThreadFrame.I;

  type RequestStart = 
    TraceEvent.RequestStart.R;

  type ResourceChangePriority = 
    TraceEvent.ResourceChangePriority.I |
    TraceEvent.ResourceChangePriority.X;

  type ResourceFinish = 
    TraceEvent.ResourceFinish.I;

  type ResourceLoad = 
    TraceEvent.ResourceLoad.b |
    TraceEvent.ResourceLoad.e;

  type ResourcePrioritySet = 
    TraceEvent.ResourcePrioritySet.n;

  type ResourceReceivedData = 
    TraceEvent.ResourceReceivedData.I;

  type ResourceReceiveResponse = 
    TraceEvent.ResourceReceiveResponse.I;

  type ResourceSendRequest = 
    TraceEvent.ResourceSendRequest.I;

  type ResponseEnd = 
    TraceEvent.ResponseEnd.R;

  type RunMicrotasks = 
    TraceEvent.RunMicrotasks.B |
    TraceEvent.RunMicrotasks.E |
    TraceEvent.RunMicrotasks.X;

  type RunTask = 
    TraceEvent.RunTask.X;

  type RunWithFaviconResults = 
    TraceEvent.RunWithFaviconResults.X;

  type ScheduledTasks = 
    TraceEvent.ScheduledTasks.F |
    TraceEvent.ScheduledTasks.S |
    TraceEvent.ScheduledTasks.T;

  type SchedulerWorkerThreadactive = 
    TraceEvent.SchedulerWorkerThreadactive.B |
    TraceEvent.SchedulerWorkerThreadactive.E;

  type SchedulerWorkerThreadborn = 
    TraceEvent.SchedulerWorkerThreadborn.I;

  type SchedulerWorkerThreaddead = 
    TraceEvent.SchedulerWorkerThreaddead.I;

  type ScheduleStyleInvalidationTracking = 
    TraceEvent.ScheduleStyleInvalidationTracking.I;

  type ScheduleStyleRecalculation = 
    TraceEvent.ScheduleStyleRecalculation.I;

  type ScopedBlockingCall = 
    TraceEvent.ScopedBlockingCall.B |
    TraceEvent.ScopedBlockingCall.E;

  type ScopedBlockingCallWithBaseSyncPrimitives = 
    TraceEvent.ScopedBlockingCallWithBaseSyncPrimitives.B |
    TraceEvent.ScopedBlockingCallWithBaseSyncPrimitives.E;

  type Screenshot = 
    TraceEvent.Screenshot.O;

  type SequenceEnabled = 
    TraceEvent.SequenceEnabled.F;

  type SetIdlePeriodState = 
    TraceEvent.SetIdlePeriodState.X;

  type SetLayerTreeId = 
    TraceEvent.SetLayerTreeId.I;

  type ShCompile = 
    TraceEvent.ShCompile.X;

  type SIGNED_CERTIFICATE_TIMESTAMPS_CHECKED = 
    TraceEvent.SIGNED_CERTIFICATE_TIMESTAMPS_CHECKED.n;

  type SIGNED_CERTIFICATE_TIMESTAMPS_RECEIVED = 
    TraceEvent.SIGNED_CERTIFICATE_TIMESTAMPS_RECEIVED.n;

  type SIMPLE_CACHE_ENTRY_CLOSE_BEGIN = 
    TraceEvent.SIMPLE_CACHE_ENTRY_CLOSE_BEGIN.n;

  type SIMPLE_CACHE_ENTRY_CLOSE_CALL = 
    TraceEvent.SIMPLE_CACHE_ENTRY_CLOSE_CALL.n;

  type SIMPLE_CACHE_ENTRY_CLOSE_END = 
    TraceEvent.SIMPLE_CACHE_ENTRY_CLOSE_END.n;

  type SIMPLE_CACHE_ENTRY_CREATE_BEGIN = 
    TraceEvent.SIMPLE_CACHE_ENTRY_CREATE_BEGIN.n;

  type SIMPLE_CACHE_ENTRY_CREATE_CALL = 
    TraceEvent.SIMPLE_CACHE_ENTRY_CREATE_CALL.n;

  type SIMPLE_CACHE_ENTRY_CREATE_END = 
    TraceEvent.SIMPLE_CACHE_ENTRY_CREATE_END.n;

  type SIMPLE_CACHE_ENTRY_CREATE_OPTIMISTIC = 
    TraceEvent.SIMPLE_CACHE_ENTRY_CREATE_OPTIMISTIC.n;

  type SIMPLE_CACHE_ENTRY_DOOM_BEGIN = 
    TraceEvent.SIMPLE_CACHE_ENTRY_DOOM_BEGIN.n;

  type SIMPLE_CACHE_ENTRY_DOOM_CALL = 
    TraceEvent.SIMPLE_CACHE_ENTRY_DOOM_CALL.n;

  type SIMPLE_CACHE_ENTRY_DOOM_END = 
    TraceEvent.SIMPLE_CACHE_ENTRY_DOOM_END.n;

  type SIMPLE_CACHE_ENTRY_OPEN_BEGIN = 
    TraceEvent.SIMPLE_CACHE_ENTRY_OPEN_BEGIN.n;

  type SIMPLE_CACHE_ENTRY_OPEN_CALL = 
    TraceEvent.SIMPLE_CACHE_ENTRY_OPEN_CALL.n;

  type SIMPLE_CACHE_ENTRY_OPEN_END = 
    TraceEvent.SIMPLE_CACHE_ENTRY_OPEN_END.n;

  type SIMPLE_CACHE_ENTRY_READ_BEGIN = 
    TraceEvent.SIMPLE_CACHE_ENTRY_READ_BEGIN.n;

  type SIMPLE_CACHE_ENTRY_READ_CALL = 
    TraceEvent.SIMPLE_CACHE_ENTRY_READ_CALL.n;

  type SIMPLE_CACHE_ENTRY_READ_END = 
    TraceEvent.SIMPLE_CACHE_ENTRY_READ_END.n;

  type SIMPLE_CACHE_ENTRY_SET_KEY = 
    TraceEvent.SIMPLE_CACHE_ENTRY_SET_KEY.n;

  type SIMPLE_CACHE_ENTRY_WRITE_BEGIN = 
    TraceEvent.SIMPLE_CACHE_ENTRY_WRITE_BEGIN.n;

  type SIMPLE_CACHE_ENTRY_WRITE_CALL = 
    TraceEvent.SIMPLE_CACHE_ENTRY_WRITE_CALL.n;

  type SIMPLE_CACHE_ENTRY_WRITE_END = 
    TraceEvent.SIMPLE_CACHE_ENTRY_WRITE_END.n;

  type SIMPLE_CACHE_ENTRY_WRITE_OPTIMISTIC = 
    TraceEvent.SIMPLE_CACHE_ENTRY_WRITE_OPTIMISTIC.n;

  type SIMPLE_CACHE_ENTRY = 
    TraceEvent.SIMPLE_CACHE_ENTRY.b |
    TraceEvent.SIMPLE_CACHE_ENTRY.e;

  type Skiabudget = 
    TraceEvent.Skiabudget.C;

  type SkipBeginImplFrameToReduceLatency = 
    TraceEvent.SkipBeginImplFrameToReduceLatency.I;

  type SkipBeginMainFrameToReduceLatency = 
    TraceEvent.SkipBeginMainFrameToReduceLatency.I;

  type SmallPathOp = 
    TraceEvent.SmallPathOp.X;

  type SOCKET_ALIVE = 
    TraceEvent.SOCKET_ALIVE.b |
    TraceEvent.SOCKET_ALIVE.e;

  type SOCKET_BYTES_RECEIVED = 
    TraceEvent.SOCKET_BYTES_RECEIVED.n;

  type SOCKET_BYTES_SENT = 
    TraceEvent.SOCKET_BYTES_SENT.n;

  type SOCKET_IN_USE = 
    TraceEvent.SOCKET_IN_USE.b |
    TraceEvent.SOCKET_IN_USE.e;

  type SOCKET_POOL_BOUND_TO_CONNECT_JOB = 
    TraceEvent.SOCKET_POOL_BOUND_TO_CONNECT_JOB.n;

  type SOCKET_POOL_BOUND_TO_SOCKET = 
    TraceEvent.SOCKET_POOL_BOUND_TO_SOCKET.n;

  type SOCKET_POOL_CONNECT_JOB_CONNECT = 
    TraceEvent.SOCKET_POOL_CONNECT_JOB_CONNECT.b |
    TraceEvent.SOCKET_POOL_CONNECT_JOB_CONNECT.e;

  type SOCKET_POOL_CONNECT_JOB = 
    TraceEvent.SOCKET_POOL_CONNECT_JOB.b |
    TraceEvent.SOCKET_POOL_CONNECT_JOB.e;

  type SOCKET_POOL_REUSED_AN_EXISTING_SOCKET = 
    TraceEvent.SOCKET_POOL_REUSED_AN_EXISTING_SOCKET.n;

  type SOCKET_POOL = 
    TraceEvent.SOCKET_POOL.b |
    TraceEvent.SOCKET_POOL.e;

  type SpeedIndex = 
    TraceEvent.SpeedIndex.b |
    TraceEvent.SpeedIndex.e;

  type SSL_CONNECT = 
    TraceEvent.SSL_CONNECT.b |
    TraceEvent.SSL_CONNECT.e;

  type SSL_HANDSHAKE_MESSAGE_RECEIVED = 
    TraceEvent.SSL_HANDSHAKE_MESSAGE_RECEIVED.n;

  type SSL_HANDSHAKE_MESSAGE_SENT = 
    TraceEvent.SSL_HANDSHAKE_MESSAGE_SENT.n;

  type SSL_SOCKET_BYTES_RECEIVED = 
    TraceEvent.SSL_SOCKET_BYTES_RECEIVED.n;

  type SSL_SOCKET_BYTES_SENT = 
    TraceEvent.SSL_SOCKET_BYTES_SENT.n;

  type StackCpuSampling = 
    TraceEvent.StackCpuSampling.I;

  type StartIdlePeriod = 
    TraceEvent.StartIdlePeriod.X;

  type StyleRecalcInvalidationTracking = 
    TraceEvent.StyleRecalcInvalidationTracking.I;

  type SubImage = 
    TraceEvent.SubImage.X;

  type Submitrejectedtoevictedsurface = 
    TraceEvent.Submitrejectedtoevictedsurface.I;

  type SubresourceFilterMsg_SetRulesetForProcess = 
    TraceEvent.SubresourceFilterMsg_SetRulesetForProcess.X;

  type SubresourceFilterSBCheck = 
    TraceEvent.SubresourceFilterSBCheck.F |
    TraceEvent.SubresourceFilterSBCheck.S;

  type Subthread_default_tq = 
    TraceEvent.Subthread_default_tq.C;

  type SwapBuffers = 
    TraceEvent.SwapBuffers.I;

  type Swapskipped = 
    TraceEvent.Swapskipped.I;

  type Swapthrottled = 
    TraceEvent.Swapthrottled.I;

  type TabSwitchVisibilityRequest = 
    TraceEvent.TabSwitchVisibilityRequest.F |
    TraceEvent.TabSwitchVisibilityRequest.S;

  type TaskQueueThrottler_TaskQueueThrottled = 
    TraceEvent.TaskQueueThrottler_TaskQueueThrottled.X;

  type TaskQueueThrottler_TaskQueueUnthrottled = 
    TraceEvent.TaskQueueThrottler_TaskQueueUnthrottled.X;

  type TaskSchedulerPostTask = 
    TraceEvent.TaskSchedulerPostTask.X;

  type TaskSchedulerRunTask = 
    TraceEvent.TaskSchedulerRunTask.X;

  type TCP_CLIENT_SOCKET_POOL_REQUESTED_SOCKET = 
    TraceEvent.TCP_CLIENT_SOCKET_POOL_REQUESTED_SOCKET.n;

  type TCP_CONNECT_ATTEMPT = 
    TraceEvent.TCP_CONNECT_ATTEMPT.b |
    TraceEvent.TCP_CONNECT_ATTEMPT.e;

  type TCP_CONNECT = 
    TraceEvent.TCP_CONNECT.b |
    TraceEvent.TCP_CONNECT.e;

  type TessellatingPathOp = 
    TraceEvent.TessellatingPathOp.X;

  type TextureOp = 
    TraceEvent.TextureOp.X;

  type Thread_name = 
    TraceEvent.Thread_name.M;

  type Thread_sort_index = 
    TraceEvent.Thread_sort_index.M;

  type TimerFire = 
    TraceEvent.TimerFire.X;

  type TimerInstall = 
    TraceEvent.TimerInstall.I;

  type TimerRemove = 
    TraceEvent.TimerRemove.I;

  type TimeStamp = 
    TraceEvent.TimeStamp.I;

  type TimeToDomReady = 
    TraceEvent.TimeToDomReady.b |
    TraceEvent.TimeToDomReady.e;

  type TimeToInteractive = 
    TraceEvent.TimeToInteractive.b |
    TraceEvent.TimeToInteractive.e;

  type TimeToZonesAndDomReady = 
    TraceEvent.TimeToZonesAndDomReady.b |
    TraceEvent.TimeToZonesAndDomReady.e;

  type TimeToZonesComplete = 
    TraceEvent.TimeToZonesComplete.b |
    TraceEvent.TimeToZonesComplete.e;

  type TopLevel = 
    TraceEvent.TopLevel.O;

  type Trace_buffer_overflowed = 
    TraceEvent.Trace_buffer_overflowed.M;

  type TracingHostMsg_ChildSupportsTracing = 
    TraceEvent.TracingHostMsg_ChildSupportsTracing.X;

  type TracingMsg_SetTracingProcessId = 
    TraceEvent.TracingMsg_SetTracingProcessId.X;

  type TracingSessionIdForWorker = 
    TraceEvent.TracingSessionIdForWorker.I;

  type TracingStartedInBrowser = 
    TraceEvent.TracingStartedInBrowser.I;

  type TracingStartedInPage = 
    TraceEvent.TracingStartedInPage.I;

  type TransfersBytesPendingOnDisk = 
    TraceEvent.TransfersBytesPendingOnDisk.C;

  type TransfersPendingOnDisk = 
    TraceEvent.TransfersPendingOnDisk.C;

  type TrianglesDrawn = 
    TraceEvent.TrianglesDrawn.C;

  type UDP_BYTES_RECEIVED = 
    TraceEvent.UDP_BYTES_RECEIVED.n;

  type UDP_BYTES_SENT = 
    TraceEvent.UDP_BYTES_SENT.n;

  type UDP_CONNECT = 
    TraceEvent.UDP_CONNECT.b |
    TraceEvent.UDP_CONNECT.e;

  type UDP_LOCAL_ADDRESS = 
    TraceEvent.UDP_LOCAL_ADDRESS.n;

  type Unknowninterface = 
    TraceEvent.Unknowninterface.X;

  type UnloadEventEnd = 
    TraceEvent.UnloadEventEnd.R;

  type UnloadEventStart = 
    TraceEvent.UnloadEventStart.R;

  type UpdateCounters = 
    TraceEvent.UpdateCounters.I;

  type UpdateLayer = 
    TraceEvent.UpdateLayer.B |
    TraceEvent.UpdateLayer.E;

  type UpdateLayerTree = 
    TraceEvent.UpdateLayerTree.X;

  type UpdateLayoutTree = 
    TraceEvent.UpdateLayoutTree.B |
    TraceEvent.UpdateLayoutTree.E;

  type UpdateLongIdlePeriodStateAfterIdleTask = 
    TraceEvent.UpdateLongIdlePeriodStateAfterIdleTask.X;

  type UpdateStateFromAnimationDrivers = 
    TraceEvent.UpdateStateFromAnimationDrivers.X;

  type UPLOAD_DATA_STREAM_INIT = 
    TraceEvent.UPLOAD_DATA_STREAM_INIT.b |
    TraceEvent.UPLOAD_DATA_STREAM_INIT.e;

  type UPLOAD_DATA_STREAM_READ = 
    TraceEvent.UPLOAD_DATA_STREAM_READ.b |
    TraceEvent.UPLOAD_DATA_STREAM_READ.e;

  type URL_REQUEST_DELEGATE_RECEIVED_REDIRECT = 
    TraceEvent.URL_REQUEST_DELEGATE_RECEIVED_REDIRECT.b |
    TraceEvent.URL_REQUEST_DELEGATE_RECEIVED_REDIRECT.e;

  type URL_REQUEST_DELEGATE_RESPONSE_STARTED = 
    TraceEvent.URL_REQUEST_DELEGATE_RESPONSE_STARTED.b |
    TraceEvent.URL_REQUEST_DELEGATE_RESPONSE_STARTED.e;

  type URL_REQUEST_FAKE_RESPONSE_HEADERS_CREATED = 
    TraceEvent.URL_REQUEST_FAKE_RESPONSE_HEADERS_CREATED.n;

  type URL_REQUEST_FILTERS_SET = 
    TraceEvent.URL_REQUEST_FILTERS_SET.n;

  type URL_REQUEST_JOB_BYTES_READ = 
    TraceEvent.URL_REQUEST_JOB_BYTES_READ.n;

  type URL_REQUEST_JOB_FILTERED_BYTES_READ = 
    TraceEvent.URL_REQUEST_JOB_FILTERED_BYTES_READ.n;

  type URL_REQUEST_REDIRECT_JOB = 
    TraceEvent.URL_REQUEST_REDIRECT_JOB.n;

  type URL_REQUEST_REDIRECTED = 
    TraceEvent.URL_REQUEST_REDIRECTED.n;

  type URL_REQUEST_START_JOB = 
    TraceEvent.URL_REQUEST_START_JOB.b |
    TraceEvent.URL_REQUEST_START_JOB.e;

  type UserEvent = 
    TraceEvent.UserEvent.I;

  type Usingexistingdeadline = 
    TraceEvent.Usingexistingdeadline.I;

  type Usingnewdeadline = 
    TraceEvent.Usingnewdeadline.X;

  type V8_tq = 
    TraceEvent.V8_tq.C;

  type ViewHostMsg_DidContentsPreferredSizeChange = 
    TraceEvent.ViewHostMsg_DidContentsPreferredSizeChange.X;

  type ViewHostMsg_DocumentAvailableInMainFrame = 
    TraceEvent.ViewHostMsg_DocumentAvailableInMainFrame.X;

  type ViewHostMsg_UpdateZoomLimits = 
    TraceEvent.ViewHostMsg_UpdateZoomLimits.X;

  type ViewMsg_EnablePreferredSizeChangedMode = 
    TraceEvent.ViewMsg_EnablePreferredSizeChangedMode.X;

  type VisuallyComplete100 = 
    TraceEvent.VisuallyComplete100.b |
    TraceEvent.VisuallyComplete100.e;

  type WaitingfornextBeginFrame = 
    TraceEvent.WaitingfornextBeginFrame.I;

  type WebContentsImplLoading = 
    TraceEvent.WebContentsImplLoading.F |
    TraceEvent.WebContentsImplLoading.S;

  type WidgetHostMsg_Close_ACK = 
    TraceEvent.WidgetHostMsg_Close_ACK.X;

  type WidgetHostMsg_DidCommitAndDrawCompositorFrame = 
    TraceEvent.WidgetHostMsg_DidCommitAndDrawCompositorFrame.X;

  type WidgetHostMsg_DidFirstVisuallyNonEmptyPaint = 
    TraceEvent.WidgetHostMsg_DidFirstVisuallyNonEmptyPaint.X;

  type WidgetHostMsg_FrameSwapMessages = 
    TraceEvent.WidgetHostMsg_FrameSwapMessages.X;

  type WidgetHostMsg_HasTouchEventHandlers = 
    TraceEvent.WidgetHostMsg_HasTouchEventHandlers.X;

  type WidgetHostMsg_SelectionBoundsChanged = 
    TraceEvent.WidgetHostMsg_SelectionBoundsChanged.X;

  type WidgetHostMsg_TextInputStateChanged = 
    TraceEvent.WidgetHostMsg_TextInputStateChanged.X;

  type WidgetHostMsg_UpdateScreenRects_ACK = 
    TraceEvent.WidgetHostMsg_UpdateScreenRects_ACK.X;

  type WidgetMsg_SetActive = 
    TraceEvent.WidgetMsg_SetActive.X;

  type WidgetMsg_SetInheritedEffectiveTouchAction = 
    TraceEvent.WidgetMsg_SetInheritedEffectiveTouchAction.X;

  type WidgetMsg_SetIsInert = 
    TraceEvent.WidgetMsg_SetIsInert.X;

  type WidgetMsg_SetViewportIntersection = 
    TraceEvent.WidgetMsg_SetViewportIntersection.X;

  type WidgetMsg_SynchronizeVisualProperties = 
    TraceEvent.WidgetMsg_SynchronizeVisualProperties.X;

  type WidgetMsg_UpdateRenderThrottlingStatus = 
    TraceEvent.WidgetMsg_UpdateRenderThrottlingStatus.X;

  type WidgetMsg_UpdateScreenRects = 
    TraceEvent.WidgetMsg_UpdateScreenRects.X;

  type WidgetMsg_WasHidden = 
    TraceEvent.WidgetMsg_WasHidden.X;

  type WidgetMsg_WasShown = 
    TraceEvent.WidgetMsg_WasShown.X;

  type WriteTransaction = 
    TraceEvent.WriteTransaction.B |
    TraceEvent.WriteTransaction.E;

  type XHRLoad = 
    TraceEvent.XHRLoad.X;

  type XHRReadyStateChange = 
    TraceEvent.XHRReadyStateChange.X;

  type YieldParserForScriptBlockingResources = 
    TraceEvent.YieldParserForScriptBlockingResources.X;

  type YieldParserForScriptLoad = 
    TraceEvent.YieldParserForScriptLoad.X;

  type ZonesAndDomReady = 
    TraceEvent.ZonesAndDomReady.R;

  type ZonesReady = 
    TraceEvent.ZonesReady.R;

  namespace A {
    interface F extends Base {
      args: {
      
      };
      id: string;
      name: 'a';
      // Denotes the ending of the async event A.
      ph: 'F';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface S extends Base {
      args: {
      
      };
      id: string;
      name: 'a';
      // Denotes the beginning of the async event A.
      ph: 'S';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace AAConvexPathOp {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'AAConvexPathOp';
      // Denotes the end of the event AAConvexPathOp.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace AAStrokeRect {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'AAStrokeRect';
      // Denotes the end of the event AAStrokeRect.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace AcquireLock {
    interface X extends Base {
      args: {
        src_file: string;
        src_func: string;
      };
      // Duration.
      dur: number;
      name: 'AcquireLock';
      // Denotes the end of the event AcquireLock.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ActivateLayerTree {
    interface I extends Base {
      args: {
        frameId: number;
        layerTreeId: number;
      };
      name: 'ActivateLayerTree';
      // Denotes an event ActivateLayerTree. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace AddFrameDisplayed {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'AddFrameDisplayed';
      // Denotes the end of the event AddFrameDisplayed.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ADFUEL {
    type AdFuelDOMContentLoaded = 
      TraceEvent.ADFUEL.AdFuelDOMContentLoaded.R;
  
    type AdFuelInitialized = 
      TraceEvent.ADFUEL.AdFuelInitialized.R;
  
    type AdFuelRequestComplete = 
      TraceEvent.ADFUEL.AdFuelRequestComplete.R;
  
    type AdRenderedad_bnr_atf_01 = 
      TraceEvent.ADFUEL.AdRenderedad_bnr_atf_01.R;
  
    type AdRenderedad_bnr_btf_01 = 
      TraceEvent.ADFUEL.AdRenderedad_bnr_btf_01.R;
  
    type AdRenderedad_mod_35731bb1e = 
      TraceEvent.ADFUEL.AdRenderedad_mod_35731bb1e.R;
  
    type AdRenderedad_oop_float_01 = 
      TraceEvent.ADFUEL.AdRenderedad_oop_float_01.R;
  
    type AdRenderedad_rect_btf_02 = 
      TraceEvent.ADFUEL.AdRenderedad_rect_btf_02.R;
  
    type ApplyingPageLevelTargeting = 
      TraceEvent.ADFUEL.ApplyingPageLevelTargeting.R;
  
    type ApplyingWindowSiteLevelOptions = 
      TraceEvent.ADFUEL.ApplyingWindowSiteLevelOptions.R;
  
    type BuildingSlotad_bnr_atf_01 = 
      TraceEvent.ADFUEL.BuildingSlotad_bnr_atf_01.b |
      TraceEvent.ADFUEL.BuildingSlotad_bnr_atf_01.e;
  
    type BuildingSlotad_bnr_atf_01End = 
      TraceEvent.ADFUEL.BuildingSlotad_bnr_atf_01End.R;
  
    type BuildingSlotad_bnr_atf_01Start = 
      TraceEvent.ADFUEL.BuildingSlotad_bnr_atf_01Start.R;
  
    type BuildingSlotad_bnr_btf_01 = 
      TraceEvent.ADFUEL.BuildingSlotad_bnr_btf_01.b |
      TraceEvent.ADFUEL.BuildingSlotad_bnr_btf_01.e;
  
    type BuildingSlotad_bnr_btf_01End = 
      TraceEvent.ADFUEL.BuildingSlotad_bnr_btf_01End.R;
  
    type BuildingSlotad_bnr_btf_01Start = 
      TraceEvent.ADFUEL.BuildingSlotad_bnr_btf_01Start.R;
  
    type BuildingSlotad_bnr_btf_02 = 
      TraceEvent.ADFUEL.BuildingSlotad_bnr_btf_02.b |
      TraceEvent.ADFUEL.BuildingSlotad_bnr_btf_02.e;
  
    type BuildingSlotad_bnr_btf_02End = 
      TraceEvent.ADFUEL.BuildingSlotad_bnr_btf_02End.R;
  
    type BuildingSlotad_bnr_btf_02Start = 
      TraceEvent.ADFUEL.BuildingSlotad_bnr_btf_02Start.R;
  
    type BuildingSlotad_mod_35731bb1e = 
      TraceEvent.ADFUEL.BuildingSlotad_mod_35731bb1e.b |
      TraceEvent.ADFUEL.BuildingSlotad_mod_35731bb1e.e;
  
    type BuildingSlotad_mod_35731bb1eEnd = 
      TraceEvent.ADFUEL.BuildingSlotad_mod_35731bb1eEnd.R;
  
    type BuildingSlotad_mod_35731bb1eStart = 
      TraceEvent.ADFUEL.BuildingSlotad_mod_35731bb1eStart.R;
  
    type BuildingSlotad_oop_float_01 = 
      TraceEvent.ADFUEL.BuildingSlotad_oop_float_01.b |
      TraceEvent.ADFUEL.BuildingSlotad_oop_float_01.e;
  
    type BuildingSlotad_oop_float_01End = 
      TraceEvent.ADFUEL.BuildingSlotad_oop_float_01End.R;
  
    type BuildingSlotad_oop_float_01Start = 
      TraceEvent.ADFUEL.BuildingSlotad_oop_float_01Start.R;
  
    type BuildingSlotad_oop_skin_01 = 
      TraceEvent.ADFUEL.BuildingSlotad_oop_skin_01.b |
      TraceEvent.ADFUEL.BuildingSlotad_oop_skin_01.e;
  
    type BuildingSlotad_oop_skin_01End = 
      TraceEvent.ADFUEL.BuildingSlotad_oop_skin_01End.R;
  
    type BuildingSlotad_oop_skin_01Start = 
      TraceEvent.ADFUEL.BuildingSlotad_oop_skin_01Start.R;
  
    type BuildingSlotad_rect_btf_02 = 
      TraceEvent.ADFUEL.BuildingSlotad_rect_btf_02.b |
      TraceEvent.ADFUEL.BuildingSlotad_rect_btf_02.e;
  
    type BuildingSlotad_rect_btf_02End = 
      TraceEvent.ADFUEL.BuildingSlotad_rect_btf_02End.R;
  
    type BuildingSlotad_rect_btf_02Start = 
      TraceEvent.ADFUEL.BuildingSlotad_rect_btf_02Start.R;
  
    type DispatchQueue = 
      TraceEvent.ADFUEL.DispatchQueue.b |
      TraceEvent.ADFUEL.DispatchQueue.e;
  
    type DispatchQueueEnd = 
      TraceEvent.ADFUEL.DispatchQueueEnd.R;
  
    type DispatchQueueStart = 
      TraceEvent.ADFUEL.DispatchQueueStart.R;
  
    type GPTIncluded = 
      TraceEvent.ADFUEL.GPTIncluded.R;
  
    type PageLevelGPTBuild = 
      TraceEvent.ADFUEL.PageLevelGPTBuild.b |
      TraceEvent.ADFUEL.PageLevelGPTBuild.e;
  
    type PageLevelGPTBuildEnd = 
      TraceEvent.ADFUEL.PageLevelGPTBuildEnd.R;
  
    type PageLevelGPTBuildStart = 
      TraceEvent.ADFUEL.PageLevelGPTBuildStart.R;
  
    type QueueRegistrycnn_homepage_rb = 
      TraceEvent.ADFUEL.QueueRegistrycnn_homepage_rb.b |
      TraceEvent.ADFUEL.QueueRegistrycnn_homepage_rb.e;
  
    type QueueRegistrycnn_homepage_rbEnd = 
      TraceEvent.ADFUEL.QueueRegistrycnn_homepage_rbEnd.R;
  
    type QueueRegistrycnn_homepage_rbStart = 
      TraceEvent.ADFUEL.QueueRegistrycnn_homepage_rbStart.R;
  
    type QueueRegistrycnn_homepage = 
      TraceEvent.ADFUEL.QueueRegistrycnn_homepage.b |
      TraceEvent.ADFUEL.QueueRegistrycnn_homepage.e;
  
    type QueueRegistrycnn_homepageEnd = 
      TraceEvent.ADFUEL.QueueRegistrycnn_homepageEnd.R;
  
    type QueueRegistrycnn_homepageStart = 
      TraceEvent.ADFUEL.QueueRegistrycnn_homepageStart.R;
  
    type SendingRequest = 
      TraceEvent.ADFUEL.SendingRequest.b |
      TraceEvent.ADFUEL.SendingRequest.e;
  
    type SendingRequestEnd = 
      TraceEvent.ADFUEL.SendingRequestEnd.R;
  
    type SendingRequestStart = 
      TraceEvent.ADFUEL.SendingRequestStart.R;
  
    type SlotLoadedad_bnr_atf_01 = 
      TraceEvent.ADFUEL.SlotLoadedad_bnr_atf_01.R;
  
    type SlotLoadedad_mod_35731bb1e = 
      TraceEvent.ADFUEL.SlotLoadedad_mod_35731bb1e.R;
  
    type SlotLoadedad_oop_float_01 = 
      TraceEvent.ADFUEL.SlotLoadedad_oop_float_01.R;
  
    type SlotLoadedad_rect_btf_02 = 
      TraceEvent.ADFUEL.SlotLoadedad_rect_btf_02.R;
  
    namespace AdFuelDOMContentLoaded {
      interface R extends Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] AdFuel DOMContentLoaded';
        // Denotes a mark of the event AdFuelDOMContentLoaded.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace AdFuelInitialized {
      interface R extends Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] AdFuel Initialized';
        // Denotes a mark of the event AdFuelInitialized.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace AdFuelRequestComplete {
      interface R extends Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] AdFuel Request Complete';
        // Denotes a mark of the event AdFuelRequestComplete.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace AdFuelwindow {
      type Load = 
        TraceEvent.ADFUEL.AdFuelwindow.Load.R;
    
      namespace Load {
        interface R extends Base {
          args: {
            data: {
              navigationId: string;
            };
          };
          name: '[ADFUEL] AdFuel window.load';
          // Denotes a mark of the event Load.
          ph: 'R';
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  
    namespace AdRenderedad_bnr_atf_01 {
      interface R extends Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Ad Rendered [ad_bnr_atf_01]';
        // Denotes a mark of the event AdRenderedad_bnr_atf_01.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace AdRenderedad_bnr_btf_01 {
      interface R extends Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Ad Rendered [ad_bnr_btf_01]';
        // Denotes a mark of the event AdRenderedad_bnr_btf_01.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace AdRenderedad_mod_35731bb1e {
      interface R extends Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Ad Rendered [ad_mod_35731bb1e]';
        // Denotes a mark of the event AdRenderedad_mod_35731bb1e.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace AdRenderedad_oop_float_01 {
      interface R extends Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Ad Rendered [ad_oop_float_01]';
        // Denotes a mark of the event AdRenderedad_oop_float_01.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace AdRenderedad_rect_btf_02 {
      interface R extends Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Ad Rendered [ad_rect_btf_02]';
        // Denotes a mark of the event AdRenderedad_rect_btf_02.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ApplyingPageLevelTargeting {
      interface R extends Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Applying Page-Level Targeting';
        // Denotes a mark of the event ApplyingPageLevelTargeting.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ApplyingWindowSiteLevelOptions {
      interface R extends Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Applying Window Site-Level Options.';
        // Denotes a mark of the event ApplyingWindowSiteLevelOptions.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BuildingSlotad_bnr_atf_01 {
      interface b extends Base {
        args: {
        
        };
        id: string;
        name: '[ADFUEL] Building Slot [ad_bnr_atf_01]';
        // Denotes the beginning of the nestable async flow event BuildingSlotad_bnr_atf_01.
        ph: 'b';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface e extends Base {
        args: {
        
        };
        id: string;
        name: '[ADFUEL] Building Slot [ad_bnr_atf_01]';
        // Denotes a step into the nestable async flow event BuildingSlotad_bnr_atf_01.
        ph: 'e';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BuildingSlotad_bnr_atf_01End {
      interface R extends Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Building Slot [ad_bnr_atf_01] End';
        // Denotes a mark of the event BuildingSlotad_bnr_atf_01End.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BuildingSlotad_bnr_atf_01Start {
      interface R extends Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Building Slot [ad_bnr_atf_01] Start';
        // Denotes a mark of the event BuildingSlotad_bnr_atf_01Start.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BuildingSlotad_bnr_btf_01 {
      interface b extends Base {
        args: {
        
        };
        id: string;
        name: '[ADFUEL] Building Slot [ad_bnr_btf_01]';
        // Denotes the beginning of the nestable async flow event BuildingSlotad_bnr_btf_01.
        ph: 'b';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface e extends Base {
        args: {
        
        };
        id: string;
        name: '[ADFUEL] Building Slot [ad_bnr_btf_01]';
        // Denotes a step into the nestable async flow event BuildingSlotad_bnr_btf_01.
        ph: 'e';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BuildingSlotad_bnr_btf_01End {
      interface R extends Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Building Slot [ad_bnr_btf_01] End';
        // Denotes a mark of the event BuildingSlotad_bnr_btf_01End.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BuildingSlotad_bnr_btf_01Start {
      interface R extends Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Building Slot [ad_bnr_btf_01] Start';
        // Denotes a mark of the event BuildingSlotad_bnr_btf_01Start.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BuildingSlotad_bnr_btf_02 {
      interface b extends Base {
        args: {
        
        };
        id: string;
        name: '[ADFUEL] Building Slot [ad_bnr_btf_02]';
        // Denotes the beginning of the nestable async flow event BuildingSlotad_bnr_btf_02.
        ph: 'b';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface e extends Base {
        args: {
        
        };
        id: string;
        name: '[ADFUEL] Building Slot [ad_bnr_btf_02]';
        // Denotes a step into the nestable async flow event BuildingSlotad_bnr_btf_02.
        ph: 'e';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BuildingSlotad_bnr_btf_02End {
      interface R extends Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Building Slot [ad_bnr_btf_02] End';
        // Denotes a mark of the event BuildingSlotad_bnr_btf_02End.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BuildingSlotad_bnr_btf_02Start {
      interface R extends Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Building Slot [ad_bnr_btf_02] Start';
        // Denotes a mark of the event BuildingSlotad_bnr_btf_02Start.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BuildingSlotad_mod_35731bb1e {
      interface b extends Base {
        args: {
        
        };
        id: string;
        name: '[ADFUEL] Building Slot [ad_mod_35731bb1e]';
        // Denotes the beginning of the nestable async flow event BuildingSlotad_mod_35731bb1e.
        ph: 'b';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface e extends Base {
        args: {
        
        };
        id: string;
        name: '[ADFUEL] Building Slot [ad_mod_35731bb1e]';
        // Denotes a step into the nestable async flow event BuildingSlotad_mod_35731bb1e.
        ph: 'e';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BuildingSlotad_mod_35731bb1eEnd {
      interface R extends Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Building Slot [ad_mod_35731bb1e] End';
        // Denotes a mark of the event BuildingSlotad_mod_35731bb1eEnd.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BuildingSlotad_mod_35731bb1eStart {
      interface R extends Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Building Slot [ad_mod_35731bb1e] Start';
        // Denotes a mark of the event BuildingSlotad_mod_35731bb1eStart.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BuildingSlotad_oop_float_01 {
      interface b extends Base {
        args: {
        
        };
        id: string;
        name: '[ADFUEL] Building Slot [ad_oop_float_01]';
        // Denotes the beginning of the nestable async flow event BuildingSlotad_oop_float_01.
        ph: 'b';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface e extends Base {
        args: {
        
        };
        id: string;
        name: '[ADFUEL] Building Slot [ad_oop_float_01]';
        // Denotes a step into the nestable async flow event BuildingSlotad_oop_float_01.
        ph: 'e';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BuildingSlotad_oop_float_01End {
      interface R extends Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Building Slot [ad_oop_float_01] End';
        // Denotes a mark of the event BuildingSlotad_oop_float_01End.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BuildingSlotad_oop_float_01Start {
      interface R extends Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Building Slot [ad_oop_float_01] Start';
        // Denotes a mark of the event BuildingSlotad_oop_float_01Start.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BuildingSlotad_oop_skin_01 {
      interface b extends Base {
        args: {
        
        };
        id: string;
        name: '[ADFUEL] Building Slot [ad_oop_skin_01]';
        // Denotes the beginning of the nestable async flow event BuildingSlotad_oop_skin_01.
        ph: 'b';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface e extends Base {
        args: {
        
        };
        id: string;
        name: '[ADFUEL] Building Slot [ad_oop_skin_01]';
        // Denotes a step into the nestable async flow event BuildingSlotad_oop_skin_01.
        ph: 'e';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BuildingSlotad_oop_skin_01End {
      interface R extends Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Building Slot [ad_oop_skin_01] End';
        // Denotes a mark of the event BuildingSlotad_oop_skin_01End.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BuildingSlotad_oop_skin_01Start {
      interface R extends Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Building Slot [ad_oop_skin_01] Start';
        // Denotes a mark of the event BuildingSlotad_oop_skin_01Start.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BuildingSlotad_rect_btf_02 {
      interface b extends Base {
        args: {
        
        };
        id: string;
        name: '[ADFUEL] Building Slot [ad_rect_btf_02]';
        // Denotes the beginning of the nestable async flow event BuildingSlotad_rect_btf_02.
        ph: 'b';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface e extends Base {
        args: {
        
        };
        id: string;
        name: '[ADFUEL] Building Slot [ad_rect_btf_02]';
        // Denotes a step into the nestable async flow event BuildingSlotad_rect_btf_02.
        ph: 'e';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BuildingSlotad_rect_btf_02End {
      interface R extends Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Building Slot [ad_rect_btf_02] End';
        // Denotes a mark of the event BuildingSlotad_rect_btf_02End.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BuildingSlotad_rect_btf_02Start {
      interface R extends Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Building Slot [ad_rect_btf_02] Start';
        // Denotes a mark of the event BuildingSlotad_rect_btf_02Start.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DispatchQueue {
      interface b extends Base {
        args: {
        
        };
        id: string;
        name: '[ADFUEL] Dispatch Queue';
        // Denotes the beginning of the nestable async flow event DispatchQueue.
        ph: 'b';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface e extends Base {
        args: {
        
        };
        id: string;
        name: '[ADFUEL] Dispatch Queue';
        // Denotes a step into the nestable async flow event DispatchQueue.
        ph: 'e';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DispatchQueueEnd {
      interface R extends Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Dispatch Queue End';
        // Denotes a mark of the event DispatchQueueEnd.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DispatchQueueStart {
      interface R extends Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Dispatch Queue Start';
        // Denotes a mark of the event DispatchQueueStart.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GPTIncluded {
      interface R extends Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] GPT Included';
        // Denotes a mark of the event GPTIncluded.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PageLevelGPTBuild {
      interface b extends Base {
        args: {
        
        };
        id: string;
        name: '[ADFUEL] Page-Level GPT Build';
        // Denotes the beginning of the nestable async flow event PageLevelGPTBuild.
        ph: 'b';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface e extends Base {
        args: {
        
        };
        id: string;
        name: '[ADFUEL] Page-Level GPT Build';
        // Denotes a step into the nestable async flow event PageLevelGPTBuild.
        ph: 'e';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PageLevelGPTBuildEnd {
      interface R extends Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Page-Level GPT Build End';
        // Denotes a mark of the event PageLevelGPTBuildEnd.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PageLevelGPTBuildStart {
      interface R extends Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Page-Level GPT Build Start';
        // Denotes a mark of the event PageLevelGPTBuildStart.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace QueueRegistrycnn_homepage_rb {
      interface b extends Base {
        args: {
        
        };
        id: string;
        name: '[ADFUEL] Queue Registry [cnn_homepage_rb]';
        // Denotes the beginning of the nestable async flow event QueueRegistrycnn_homepage_rb.
        ph: 'b';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface e extends Base {
        args: {
        
        };
        id: string;
        name: '[ADFUEL] Queue Registry [cnn_homepage_rb]';
        // Denotes a step into the nestable async flow event QueueRegistrycnn_homepage_rb.
        ph: 'e';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace QueueRegistrycnn_homepage_rbEnd {
      interface R extends Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Queue Registry [cnn_homepage_rb] End';
        // Denotes a mark of the event QueueRegistrycnn_homepage_rbEnd.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace QueueRegistrycnn_homepage_rbStart {
      interface R extends Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Queue Registry [cnn_homepage_rb] Start';
        // Denotes a mark of the event QueueRegistrycnn_homepage_rbStart.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace QueueRegistrycnn_homepage {
      interface b extends Base {
        args: {
        
        };
        id: string;
        name: '[ADFUEL] Queue Registry [cnn_homepage]';
        // Denotes the beginning of the nestable async flow event QueueRegistrycnn_homepage.
        ph: 'b';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface e extends Base {
        args: {
        
        };
        id: string;
        name: '[ADFUEL] Queue Registry [cnn_homepage]';
        // Denotes a step into the nestable async flow event QueueRegistrycnn_homepage.
        ph: 'e';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace QueueRegistrycnn_homepageEnd {
      interface R extends Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Queue Registry [cnn_homepage] End';
        // Denotes a mark of the event QueueRegistrycnn_homepageEnd.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace QueueRegistrycnn_homepageStart {
      interface R extends Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Queue Registry [cnn_homepage] Start';
        // Denotes a mark of the event QueueRegistrycnn_homepageStart.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RegisteringModule {
      type AmazonA9Modulev3_2_5 = 
        TraceEvent.ADFUEL.RegisteringModule.AmazonA9Modulev3_2_5.R;
    
      type CEPModulev3_0_2 = 
        TraceEvent.ADFUEL.RegisteringModule.CEPModulev3_0_2.R;
    
      type CreativeReviewModulev3_0_5 = 
        TraceEvent.ADFUEL.RegisteringModule.CreativeReviewModulev3_0_5.R;
    
      type CriteoModulev3_2_2 = 
        TraceEvent.ADFUEL.RegisteringModule.CriteoModulev3_2_2.R;
    
      type IndexExchangeWrapperModulev3_1_1 = 
        TraceEvent.ADFUEL.RegisteringModule.IndexExchangeWrapperModulev3_1_1.R;
    
      type InViewRefreshv3_0_5 = 
        TraceEvent.ADFUEL.RegisteringModule.InViewRefreshv3_0_5.R;
    
      type KruxModulev3_1_1 = 
        TraceEvent.ADFUEL.RegisteringModule.KruxModulev3_1_1.R;
    
      type PrebidModulev3_3_0 = 
        TraceEvent.ADFUEL.RegisteringModule.PrebidModulev3_3_0.R;
    
      type ProximicModulev3_1_2 = 
        TraceEvent.ADFUEL.RegisteringModule.ProximicModulev3_1_2.R;
    
      type TransactionIDModulev3_1_1 = 
        TraceEvent.ADFUEL.RegisteringModule.TransactionIDModulev3_1_1.R;
    
      type TurnerGUIDModulev3_1_1 = 
        TraceEvent.ADFUEL.RegisteringModule.TurnerGUIDModulev3_1_1.R;
    
      namespace AmazonA9Modulev3_2_5 {
        interface R extends Base {
          args: {
            data: {
              navigationId: string;
            };
          };
          name: '[ADFUEL] Registering Module: Amazon A9 Module v3.2.5';
          // Denotes a mark of the event AmazonA9Modulev3_2_5.
          ph: 'R';
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace CEPModulev3_0_2 {
        interface R extends Base {
          args: {
            data: {
              navigationId: string;
            };
          };
          name: '[ADFUEL] Registering Module: CEP Module v3.0.2';
          // Denotes a mark of the event CEPModulev3_0_2.
          ph: 'R';
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace CreativeReviewModulev3_0_5 {
        interface R extends Base {
          args: {
            data: {
              navigationId: string;
            };
          };
          name: '[ADFUEL] Registering Module: Creative Review Module v3.0.5';
          // Denotes a mark of the event CreativeReviewModulev3_0_5.
          ph: 'R';
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace CriteoModulev3_2_2 {
        interface R extends Base {
          args: {
            data: {
              navigationId: string;
            };
          };
          name: '[ADFUEL] Registering Module: Criteo Module v3.2.2';
          // Denotes a mark of the event CriteoModulev3_2_2.
          ph: 'R';
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace IndexExchangeWrapperModulev3_1_1 {
        interface R extends Base {
          args: {
            data: {
              navigationId: string;
            };
          };
          name: '[ADFUEL] Registering Module: IndexExchange Wrapper Module v3.1.1';
          // Denotes a mark of the event IndexExchangeWrapperModulev3_1_1.
          ph: 'R';
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace InViewRefreshv3_0_5 {
        interface R extends Base {
          args: {
            data: {
              navigationId: string;
            };
          };
          name: '[ADFUEL] Registering Module: In View Refresh v3.0.5';
          // Denotes a mark of the event InViewRefreshv3_0_5.
          ph: 'R';
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace KruxModulev3_1_1 {
        interface R extends Base {
          args: {
            data: {
              navigationId: string;
            };
          };
          name: '[ADFUEL] Registering Module: Krux Module v3.1.1';
          // Denotes a mark of the event KruxModulev3_1_1.
          ph: 'R';
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace PrebidModulev3_3_0 {
        interface R extends Base {
          args: {
            data: {
              navigationId: string;
            };
          };
          name: '[ADFUEL] Registering Module: Prebid Module v3.3.0';
          // Denotes a mark of the event PrebidModulev3_3_0.
          ph: 'R';
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace ProximicModulev3_1_2 {
        interface R extends Base {
          args: {
            data: {
              navigationId: string;
            };
          };
          name: '[ADFUEL] Registering Module: Proximic Module v3.1.2';
          // Denotes a mark of the event ProximicModulev3_1_2.
          ph: 'R';
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace TransactionIDModulev3_1_1 {
        interface R extends Base {
          args: {
            data: {
              navigationId: string;
            };
          };
          name: '[ADFUEL] Registering Module: Transaction ID Module v3.1.1';
          // Denotes a mark of the event TransactionIDModulev3_1_1.
          ph: 'R';
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace TurnerGUIDModulev3_1_1 {
        interface R extends Base {
          args: {
            data: {
              navigationId: string;
            };
          };
          name: '[ADFUEL] Registering Module: Turner GUID Module v3.1.1';
          // Denotes a mark of the event TurnerGUIDModulev3_1_1.
          ph: 'R';
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  
    namespace RegistryLoadcdn {
      namespace Cnn {
        namespace Comadscnncnn_homepage {
          type Json = 
            TraceEvent.ADFUEL.RegistryLoadcdn.Cnn.Comadscnncnn_homepage.Json.b |
            TraceEvent.ADFUEL.RegistryLoadcdn.Cnn.Comadscnncnn_homepage.Json.e;
        
          type JsonEnd = 
            TraceEvent.ADFUEL.RegistryLoadcdn.Cnn.Comadscnncnn_homepage.JsonEnd.R;
        
          type JsonStart = 
            TraceEvent.ADFUEL.RegistryLoadcdn.Cnn.Comadscnncnn_homepage.JsonStart.R;
        
          namespace Json {
            interface b extends Base {
              args: {
              
              };
              id: string;
              name: '[ADFUEL] Registry Load [//cdn.cnn.com/ads/cnn/cnn_homepage.json]';
              // Denotes the beginning of the nestable async flow event Json.
              ph: 'b';
              // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
              tts: number;
            }
          
            interface e extends Base {
              args: {
              
              };
              id: string;
              name: '[ADFUEL] Registry Load [//cdn.cnn.com/ads/cnn/cnn_homepage.json]';
              // Denotes a step into the nestable async flow event Json.
              ph: 'e';
              // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
              tts: number;
            }
          }
        
          namespace JsonEnd {
            interface R extends Base {
              args: {
                data: {
                  navigationId: string;
                };
              };
              name: '[ADFUEL] Registry Load [//cdn.cnn.com/ads/cnn/cnn_homepage.json] End';
              // Denotes a mark of the event JsonEnd.
              ph: 'R';
              // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
              tts: number;
            }
          }
        
          namespace JsonStart {
            interface R extends Base {
              args: {
                data: {
                  navigationId: string;
                };
              };
              name: '[ADFUEL] Registry Load [//cdn.cnn.com/ads/cnn/cnn_homepage.json] Start';
              // Denotes a mark of the event JsonStart.
              ph: 'R';
              // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
              tts: number;
            }
          }
        }
      }
    }
  
    namespace SendingRequest {
      interface b extends Base {
        args: {
        
        };
        id: string;
        name: '[ADFUEL] Sending Request';
        // Denotes the beginning of the nestable async flow event SendingRequest.
        ph: 'b';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface e extends Base {
        args: {
        
        };
        id: string;
        name: '[ADFUEL] Sending Request';
        // Denotes a step into the nestable async flow event SendingRequest.
        ph: 'e';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SendingRequestEnd {
      interface R extends Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Sending Request End';
        // Denotes a mark of the event SendingRequestEnd.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SendingRequestStart {
      interface R extends Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Sending Request Start';
        // Denotes a mark of the event SendingRequestStart.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SlotLoadedad_bnr_atf_01 {
      interface R extends Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Slot Loaded [ad_bnr_atf_01]';
        // Denotes a mark of the event SlotLoadedad_bnr_atf_01.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SlotLoadedad_mod_35731bb1e {
      interface R extends Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Slot Loaded [ad_mod_35731bb1e]';
        // Denotes a mark of the event SlotLoadedad_mod_35731bb1e.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SlotLoadedad_oop_float_01 {
      interface R extends Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Slot Loaded [ad_oop_float_01]';
        // Denotes a mark of the event SlotLoadedad_oop_float_01.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SlotLoadedad_rect_btf_02 {
      interface R extends Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: '[ADFUEL] Slot Loaded [ad_rect_btf_02]';
        // Denotes a mark of the event SlotLoadedad_rect_btf_02.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Allactivesurfacesready {
    interface I extends Base {
      args: {
      
      };
      name: 'All active surfaces ready';
      // Denotes an event Allactivesurfacesready. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Animation {
    interface b extends Base {
      args: {
        data: {
          id: string;
          name: string;
          nodeId: number;
          nodeName: string;
          state: string;
        };
      };
      id: string;
      name: 'Animation';
      // Denotes the beginning of the nestable async flow event Animation.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
        endData: {
          state: string;
        };
      };
      id: string;
      name: 'Animation';
      // Denotes a step into the nestable async flow event Animation.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface n extends Base {
      args: {
        data: {
          state: string;
        };
      };
      id: string;
      name: 'Animation';
      // Denotes the ending of the nestable async flow event Animation.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace AnimationHost {
    type ActivateAnimations = 
      TraceEvent.AnimationHost.ActivateAnimations.X;
  
    type TickAnimations = 
      TraceEvent.AnimationHost.TickAnimations.X;
  
    type UpdateAnimationState = 
      TraceEvent.AnimationHost.UpdateAnimationState.X;
  
    namespace ActivateAnimations {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'AnimationHost::ActivateAnimations';
        // Denotes the end of the event ActivateAnimations.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace TickAnimations {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'AnimationHost::TickAnimations';
        // Denotes the end of the event TickAnimations.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UpdateAnimationState {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'AnimationHost::UpdateAnimationState';
        // Denotes the end of the event UpdateAnimationState.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ArrayBufferTrackerUpdatingItem {
    type Process = 
      TraceEvent.ArrayBufferTrackerUpdatingItem.Process.X;
  
    namespace Process {
      interface X extends Base {
        args: {
          EvacuationState: number;
        };
        // Duration.
        dur: number;
        name: 'ArrayBufferTrackerUpdatingItem::Process';
        // Denotes the end of the event Process.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace AsyncLayerTreeFrameSink {
    type SubmitCompositorFrame = 
      TraceEvent.AsyncLayerTreeFrameSink.SubmitCompositorFrame.X;
  
    namespace SubmitCompositorFrame {
      interface X extends Base {
        args: {
          source_frame_number_: number;
        };
        // Duration.
        dur: number;
        name: 'AsyncLayerTreeFrameSink::SubmitCompositorFrame';
        // Denotes the end of the event SubmitCompositorFrame.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace AsyncTask {
    interface f extends Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'AsyncTask';
      // Denotes the ending of the async flow event AsyncTask.
      ph: 'f';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface s extends Base {
      args: {
        data: {
          name: string;
        };
      };
      id2: {
        local: string;
      };
      name: 'AsyncTask';
      // Denotes the beginning of the async flow event AsyncTask.
      ph: 's';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface t extends Base {
      args: {
        step: string;
      };
      id2: {
        local: string;
      };
      name: 'AsyncTask';
      // Denotes a step into the async flow event AsyncTask.
      ph: 't';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace AtlasTextOp {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'AtlasTextOp';
      // Denotes the end of the event AtlasTextOp.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace AutocompleteController {
    type Start = 
      TraceEvent.AutocompleteController.Start.X;
  
    type UpdateResult = 
      TraceEvent.AutocompleteController.UpdateResult.X;
  
    namespace Start {
      interface X extends Base {
        args: {
          text: string;
        };
        // Duration.
        dur: number;
        name: 'AutocompleteController::Start';
        // Denotes the end of the event Start.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UpdateResult {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'AutocompleteController::UpdateResult';
        // Denotes the end of the event UpdateResult.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace BackgroundCompileTask {
    type Run = 
      TraceEvent.BackgroundCompileTask.Run.X;
  
    namespace Run {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur?: number;
        name: 'BackgroundCompileTask::Run';
        // Denotes the end of the event Run.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace BackgroundHTMLParser {
    type PumpTokenizer = 
      TraceEvent.BackgroundHTMLParser.PumpTokenizer.X;
  
    type SendTokensToMainThread = 
      TraceEvent.BackgroundHTMLParser.SendTokensToMainThread.X;
  
    namespace PumpTokenizer {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'BackgroundHTMLParser::pumpTokenizer';
        // Denotes the end of the event PumpTokenizer.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SendTokensToMainThread {
      interface X extends Base {
        args: {
        
        };
        bind_id: string;
        // Duration.
        dur: number;
        flow_out: boolean;
        id: string;
        name: 'BackgroundHTMLParser::sendTokensToMainThread';
        // Denotes the end of the event SendTokensToMainThread.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Base {
    namespace TraceEventSystemStatsMonitor {
      type SystemStats = 
        TraceEvent.Base.TraceEventSystemStatsMonitor.SystemStats.O;
    
      namespace SystemStats {
        interface O extends Base {
          args: {
            snapshot: {
              committed_memory: number;
            };
          };
          id: string;
          name: 'base::TraceEventSystemStatsMonitor::SystemStats';
          // Denotes a snapshot object of the event SystemStats.
          ph: 'O';
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace BeginFrame {
    interface I extends Base {
      args: {
        layerTreeId: number;
      };
      name: 'BeginFrame';
      // Denotes an event BeginFrame. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace BeginFrameArgs {
    interface t extends Base {
      args: {
        step: string;
      };
      id: string;
      name: 'BeginFrameArgs';
      // Denotes a step into the async flow event BeginFrameArgs.
      ph: 't';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace BeginMainThreadFrame {
    interface I extends Base {
      args: {
        data: {
          frameId: number;
        };
        layerTreeId: number;
      };
      name: 'BeginMainThreadFrame';
      // Denotes an event BeginMainThreadFrame. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace BenchmarkInstrumentation {
    type DisplayRenderingStats = 
      TraceEvent.BenchmarkInstrumentation.DisplayRenderingStats.I;
  
    type ImplThreadRenderingStats = 
      TraceEvent.BenchmarkInstrumentation.ImplThreadRenderingStats.I;
  
    namespace DisplayRenderingStats {
      interface I extends Base {
        args: {
          data: {
            frame_count: number;
          };
        };
        name: 'BenchmarkInstrumentation::DisplayRenderingStats';
        // Denotes an event DisplayRenderingStats. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ImplThreadRenderingStats {
      interface I extends Base {
        args: {
          data: {
            approximated_visible_content_area: number;
            checkerboarded_needs_raster_content_area: number;
            checkerboarded_no_recording_content_area: number;
            checkerboarded_visible_content_area: number;
            frame_count: number;
            visible_content_area: number;
          };
        };
        name: 'BenchmarkInstrumentation::ImplThreadRenderingStats';
        // Denotes an event ImplThreadRenderingStats. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace BitmapImage {
    type DataChanged = 
      TraceEvent.BitmapImage.DataChanged.X;
  
    type Draw = 
      TraceEvent.BitmapImage.Draw.X;
  
    namespace DataChanged {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'BitmapImage::dataChanged';
        // Denotes the end of the event DataChanged.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Draw {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'BitmapImage::draw';
        // Denotes the end of the event Draw.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Blankframe {
    type NooverlaysorCALayers = 
      TraceEvent.Blankframe.NooverlaysorCALayers.X;
  
    namespace NooverlaysorCALayers {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Blank frame: No overlays or CALayers';
        // Denotes the end of the event NooverlaysorCALayers.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Blink {
    namespace Mojom {
      type AppCacheBackend = 
        TraceEvent.Blink.Mojom.AppCacheBackend.X;
    
      type AppCacheFrontend = 
        TraceEvent.Blink.Mojom.AppCacheFrontend.X;
    
      type Blob = 
        TraceEvent.Blink.Mojom.Blob.X;
    
      type BlobRegistry = 
        TraceEvent.Blink.Mojom.BlobRegistry.X;
    
      type CodeCacheHost = 
        TraceEvent.Blink.Mojom.CodeCacheHost.X;
    
      type ManifestManager = 
        TraceEvent.Blink.Mojom.ManifestManager.X;
    
      type PluginRegistry = 
        TraceEvent.Blink.Mojom.PluginRegistry.X;
    
      type StorageArea = 
        TraceEvent.Blink.Mojom.StorageArea.X;
    
      type StoragePartitionService = 
        TraceEvent.Blink.Mojom.StoragePartitionService.X;
    
      namespace AppCacheBackend {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'blink.mojom.AppCacheBackend';
          // Denotes the end of the event AppCacheBackend.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace AppCacheFrontend {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'blink.mojom.AppCacheFrontend';
          // Denotes the end of the event AppCacheFrontend.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace Blob {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'blink.mojom.Blob';
          // Denotes the end of the event Blob.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace BlobRegistry {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'blink.mojom.BlobRegistry';
          // Denotes the end of the event BlobRegistry.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace CodeCacheHost {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'blink.mojom.CodeCacheHost';
          // Denotes the end of the event CodeCacheHost.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace ManifestManager {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'blink.mojom.ManifestManager';
          // Denotes the end of the event ManifestManager.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace PluginRegistry {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'blink.mojom.PluginRegistry';
          // Denotes the end of the event PluginRegistry.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace StorageArea {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'blink.mojom.StorageArea';
          // Denotes the end of the event StorageArea.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace StoragePartitionService {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'blink.mojom.StoragePartitionService';
          // Denotes the end of the event StoragePartitionService.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace BlinkGC {
    type AllocatedObjectSizeSincePreviousGCKB = 
      TraceEvent.BlinkGC.AllocatedObjectSizeSincePreviousGCKB.C;
  
    type AllocatedSpaceAtLastGCKB = 
      TraceEvent.BlinkGC.AllocatedSpaceAtLastGCKB.C;
  
    type AllocatedSpaceKB = 
      TraceEvent.BlinkGC.AllocatedSpaceKB.C;
  
    type AtomicPhase = 
      TraceEvent.BlinkGC.AtomicPhase.B |
      TraceEvent.BlinkGC.AtomicPhase.E;
  
    type AtomicPhaseMarking = 
      TraceEvent.BlinkGC.AtomicPhaseMarking.B |
      TraceEvent.BlinkGC.AtomicPhaseMarking.E;
  
    type CollectedWrapperCount = 
      TraceEvent.BlinkGC.CollectedWrapperCount.C;
  
    type CollectionRate = 
      TraceEvent.BlinkGC.CollectionRate.C;
  
    type CompleteSweep = 
      TraceEvent.BlinkGC.CompleteSweep.B |
      TraceEvent.BlinkGC.CompleteSweep.E;
  
    type EagerSweep = 
      TraceEvent.BlinkGC.EagerSweep.B |
      TraceEvent.BlinkGC.EagerSweep.E;
  
    type InvokePreFinalizers = 
      TraceEvent.BlinkGC.InvokePreFinalizers.B |
      TraceEvent.BlinkGC.InvokePreFinalizers.E;
  
    type LazySweepOnAllocation = 
      TraceEvent.BlinkGC.LazySweepOnAllocation.B |
      TraceEvent.BlinkGC.LazySweepOnAllocation.E;
  
    type MarkedObjectSizeAtLastCompleteSweepKB = 
      TraceEvent.BlinkGC.MarkedObjectSizeAtLastCompleteSweepKB.C;
  
    type MarkInvokeEphemeronCallbacks = 
      TraceEvent.BlinkGC.MarkInvokeEphemeronCallbacks.B |
      TraceEvent.BlinkGC.MarkInvokeEphemeronCallbacks.E;
  
    type MarkNotFullyConstructedObjects = 
      TraceEvent.BlinkGC.MarkNotFullyConstructedObjects.B |
      TraceEvent.BlinkGC.MarkNotFullyConstructedObjects.E;
  
    type MarkProcessWorklist = 
      TraceEvent.BlinkGC.MarkProcessWorklist.B |
      TraceEvent.BlinkGC.MarkProcessWorklist.E;
  
    type MarkWeakProcessing = 
      TraceEvent.BlinkGC.MarkWeakProcessing.B |
      TraceEvent.BlinkGC.MarkWeakProcessing.E;
  
    type ObjectSizeAtLastGCKB = 
      TraceEvent.BlinkGC.ObjectSizeAtLastGCKB.C;
  
    type PartitionAllocSizeAtLastGCKB = 
      TraceEvent.BlinkGC.PartitionAllocSizeAtLastGCKB.C;
  
    type VisitCrossThreadPersistents = 
      TraceEvent.BlinkGC.VisitCrossThreadPersistents.B |
      TraceEvent.BlinkGC.VisitCrossThreadPersistents.E;
  
    type VisitDOMWrappers = 
      TraceEvent.BlinkGC.VisitDOMWrappers.B |
      TraceEvent.BlinkGC.VisitDOMWrappers.E;
  
    type VisitPersistentRoots = 
      TraceEvent.BlinkGC.VisitPersistentRoots.B |
      TraceEvent.BlinkGC.VisitPersistentRoots.E;
  
    type VisitPersistents = 
      TraceEvent.BlinkGC.VisitPersistents.B |
      TraceEvent.BlinkGC.VisitPersistents.E;
  
    type VisitStackRoots = 
      TraceEvent.BlinkGC.VisitStackRoots.B |
      TraceEvent.BlinkGC.VisitStackRoots.E;
  
    type WrapperCount = 
      TraceEvent.BlinkGC.WrapperCount.C;
  
    type WrapperCountAtLastGC = 
      TraceEvent.BlinkGC.WrapperCountAtLastGC.C;
  
    namespace AllocatedObjectSizeSincePreviousGCKB {
      interface C extends Base {
        args: {
          value: number;
        };
        name: 'BlinkGC.AllocatedObjectSizeSincePreviousGCKB';
        // Denotes a counter for the event AllocatedObjectSizeSincePreviousGCKB.
        ph: 'C';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace AllocatedSpaceAtLastGCKB {
      interface C extends Base {
        args: {
          value: number;
        };
        name: 'BlinkGC.AllocatedSpaceAtLastGCKB';
        // Denotes a counter for the event AllocatedSpaceAtLastGCKB.
        ph: 'C';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace AllocatedSpaceKB {
      interface C extends Base {
        args: {
          value: number;
        };
        name: 'BlinkGC.AllocatedSpaceKB';
        // Denotes a counter for the event AllocatedSpaceKB.
        ph: 'C';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace AtomicPhase {
      interface B extends Base {
        args: {
          forced: boolean;
        };
        name: 'BlinkGC.AtomicPhase';
        // Denotes the beginning of the event AtomicPhase.
        ph: 'B';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface E extends Base {
        args: {
        
        };
        name: 'BlinkGC.AtomicPhase';
        // Denotes the ending of the event AtomicPhase.
        ph: 'E';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace AtomicPhaseMarking {
      interface B extends Base {
        args: {
          gcReason: string;
          lazySweeping: string;
        };
        name: 'BlinkGC.AtomicPhaseMarking';
        // Denotes the beginning of the event AtomicPhaseMarking.
        ph: 'B';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface E extends Base {
        args: {
        
        };
        name: 'BlinkGC.AtomicPhaseMarking';
        // Denotes the ending of the event AtomicPhaseMarking.
        ph: 'E';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CollectedWrapperCount {
      interface C extends Base {
        args: {
          value: number;
        };
        name: 'BlinkGC.CollectedWrapperCount';
        // Denotes a counter for the event CollectedWrapperCount.
        ph: 'C';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CollectionRate {
      interface C extends Base {
        args: {
          value: number;
        };
        name: 'BlinkGC.CollectionRate';
        // Denotes a counter for the event CollectionRate.
        ph: 'C';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CompleteSweep {
      interface B extends Base {
        args: {
          forced: boolean;
        };
        name: 'BlinkGC.CompleteSweep';
        // Denotes the beginning of the event CompleteSweep.
        ph: 'B';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface E extends Base {
        args: {
        
        };
        name: 'BlinkGC.CompleteSweep';
        // Denotes the ending of the event CompleteSweep.
        ph: 'E';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace EagerSweep {
      interface B extends Base {
        args: {
        
        };
        name: 'BlinkGC.EagerSweep';
        // Denotes the beginning of the event EagerSweep.
        ph: 'B';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface E extends Base {
        args: {
        
        };
        name: 'BlinkGC.EagerSweep';
        // Denotes the ending of the event EagerSweep.
        ph: 'E';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace InvokePreFinalizers {
      interface B extends Base {
        args: {
        
        };
        name: 'BlinkGC.InvokePreFinalizers';
        // Denotes the beginning of the event InvokePreFinalizers.
        ph: 'B';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface E extends Base {
        args: {
        
        };
        name: 'BlinkGC.InvokePreFinalizers';
        // Denotes the ending of the event InvokePreFinalizers.
        ph: 'E';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace LazySweepOnAllocation {
      interface B extends Base {
        args: {
        
        };
        name: 'BlinkGC.LazySweepOnAllocation';
        // Denotes the beginning of the event LazySweepOnAllocation.
        ph: 'B';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface E extends Base {
        args: {
        
        };
        name: 'BlinkGC.LazySweepOnAllocation';
        // Denotes the ending of the event LazySweepOnAllocation.
        ph: 'E';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace MarkedObjectSizeAtLastCompleteSweepKB {
      interface C extends Base {
        args: {
          value: number;
        };
        name: 'BlinkGC.MarkedObjectSizeAtLastCompleteSweepKB';
        // Denotes a counter for the event MarkedObjectSizeAtLastCompleteSweepKB.
        ph: 'C';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace MarkInvokeEphemeronCallbacks {
      interface B extends Base {
        args: {
        
        };
        name: 'BlinkGC.MarkInvokeEphemeronCallbacks';
        // Denotes the beginning of the event MarkInvokeEphemeronCallbacks.
        ph: 'B';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface E extends Base {
        args: {
        
        };
        name: 'BlinkGC.MarkInvokeEphemeronCallbacks';
        // Denotes the ending of the event MarkInvokeEphemeronCallbacks.
        ph: 'E';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace MarkNotFullyConstructedObjects {
      interface B extends Base {
        args: {
        
        };
        name: 'BlinkGC.MarkNotFullyConstructedObjects';
        // Denotes the beginning of the event MarkNotFullyConstructedObjects.
        ph: 'B';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface E extends Base {
        args: {
        
        };
        name: 'BlinkGC.MarkNotFullyConstructedObjects';
        // Denotes the ending of the event MarkNotFullyConstructedObjects.
        ph: 'E';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace MarkProcessWorklist {
      interface B extends Base {
        args: {
        
        };
        name: 'BlinkGC.MarkProcessWorklist';
        // Denotes the beginning of the event MarkProcessWorklist.
        ph: 'B';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface E extends Base {
        args: {
        
        };
        name: 'BlinkGC.MarkProcessWorklist';
        // Denotes the ending of the event MarkProcessWorklist.
        ph: 'E';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace MarkWeakProcessing {
      interface B extends Base {
        args: {
        
        };
        name: 'BlinkGC.MarkWeakProcessing';
        // Denotes the beginning of the event MarkWeakProcessing.
        ph: 'B';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface E extends Base {
        args: {
        
        };
        name: 'BlinkGC.MarkWeakProcessing';
        // Denotes the ending of the event MarkWeakProcessing.
        ph: 'E';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ObjectSizeAtLastGCKB {
      interface C extends Base {
        args: {
          value: number;
        };
        name: 'BlinkGC.ObjectSizeAtLastGCKB';
        // Denotes a counter for the event ObjectSizeAtLastGCKB.
        ph: 'C';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PartitionAllocSizeAtLastGCKB {
      interface C extends Base {
        args: {
          value: number;
        };
        name: 'BlinkGC.PartitionAllocSizeAtLastGCKB';
        // Denotes a counter for the event PartitionAllocSizeAtLastGCKB.
        ph: 'C';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace VisitCrossThreadPersistents {
      interface B extends Base {
        args: {
        
        };
        name: 'BlinkGC.VisitCrossThreadPersistents';
        // Denotes the beginning of the event VisitCrossThreadPersistents.
        ph: 'B';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface E extends Base {
        args: {
        
        };
        name: 'BlinkGC.VisitCrossThreadPersistents';
        // Denotes the ending of the event VisitCrossThreadPersistents.
        ph: 'E';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace VisitDOMWrappers {
      interface B extends Base {
        args: {
        
        };
        name: 'BlinkGC.VisitDOMWrappers';
        // Denotes the beginning of the event VisitDOMWrappers.
        ph: 'B';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface E extends Base {
        args: {
        
        };
        name: 'BlinkGC.VisitDOMWrappers';
        // Denotes the ending of the event VisitDOMWrappers.
        ph: 'E';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace VisitPersistentRoots {
      interface B extends Base {
        args: {
        
        };
        name: 'BlinkGC.VisitPersistentRoots';
        // Denotes the beginning of the event VisitPersistentRoots.
        ph: 'B';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface E extends Base {
        args: {
        
        };
        name: 'BlinkGC.VisitPersistentRoots';
        // Denotes the ending of the event VisitPersistentRoots.
        ph: 'E';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace VisitPersistents {
      interface B extends Base {
        args: {
        
        };
        name: 'BlinkGC.VisitPersistents';
        // Denotes the beginning of the event VisitPersistents.
        ph: 'B';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface E extends Base {
        args: {
        
        };
        name: 'BlinkGC.VisitPersistents';
        // Denotes the ending of the event VisitPersistents.
        ph: 'E';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace VisitStackRoots {
      interface B extends Base {
        args: {
        
        };
        name: 'BlinkGC.VisitStackRoots';
        // Denotes the beginning of the event VisitStackRoots.
        ph: 'B';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface E extends Base {
        args: {
        
        };
        name: 'BlinkGC.VisitStackRoots';
        // Denotes the ending of the event VisitStackRoots.
        ph: 'E';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace WrapperCount {
      interface C extends Base {
        args: {
          value: number;
        };
        name: 'BlinkGC.WrapperCount';
        // Denotes a counter for the event WrapperCount.
        ph: 'C';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace WrapperCountAtLastGC {
      interface C extends Base {
        args: {
          value: number;
        };
        name: 'BlinkGC.WrapperCountAtLastGC';
        // Denotes a counter for the event WrapperCountAtLastGC.
        ph: 'C';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace BlinkGCMarking {
    interface X extends Base {
      args: {
        gcReason: string;
        lazySweeping: boolean;
      };
      // Duration.
      dur: number;
      name: 'BlinkGCMarking';
      // Denotes the end of the event BlinkGCMarking.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace BlobReader {
    type CountSize = 
      TraceEvent.BlobReader.CountSize.F |
      TraceEvent.BlobReader.CountSize.S;
  
    type ReadBytesItem = 
      TraceEvent.BlobReader.ReadBytesItem.X;
  
    type ReadMore = 
      TraceEvent.BlobReader.ReadMore.F |
      TraceEvent.BlobReader.ReadMore.S;
  
    namespace CountSize {
      interface F extends Base {
        args: {
          result: string;
          size: number;
        };
        id: string;
        name: 'BlobReader::CountSize';
        // Denotes the ending of the async event CountSize.
        ph: 'F';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface S extends Base {
        args: {
        
        };
        id: string;
        name: 'BlobReader::CountSize';
        // Denotes the beginning of the async event CountSize.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ReadBytesItem {
      interface X extends Base {
        args: {
          uuid: string;
        };
        // Duration.
        dur: number;
        name: 'BlobReader::ReadBytesItem';
        // Denotes the end of the event ReadBytesItem.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ReadMore {
      interface F extends Base {
        args: {
          num_bytes: number;
          result: string;
        };
        id: string;
        name: 'BlobReader::ReadMore';
        // Denotes the ending of the async event ReadMore.
        ph: 'F';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface S extends Base {
        args: {
        
        };
        id: string;
        name: 'BlobReader::ReadMore';
        // Denotes the beginning of the async event ReadMore.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    interface F extends Base {
      args: {
        bytes_written: number;
      };
      id: string;
      name: 'BlobReader';
      // Denotes the ending of the async event BlobReader.
      ph: 'F';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface S extends Base {
      args: {
        uuid: string;
      };
      id: string;
      name: 'BlobReader';
      // Denotes the beginning of the async event BlobReader.
      ph: 'S';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace BookmarkProvider {
    type Start = 
      TraceEvent.BookmarkProvider.Start.X;
  
    namespace Start {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'BookmarkProvider::Start';
        // Denotes the end of the event Start.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace BrowserCrApplication {
    type SendEvent = 
      TraceEvent.BrowserCrApplication.SendEvent.X;
  
    namespace SendEvent {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'BrowserCrApplication::sendEvent';
        // Denotes the end of the event SendEvent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace BrowserWorker0x7fd3431d1a00 {
    interface b extends Base {
      args: {
        channel: string;
        gl_category: string;
      };
      id: string;
      name: 'BrowserWorker-0x7fd3431d1a00';
      // Denotes the beginning of the nestable async flow event BrowserWorker0x7fd3431d1a00.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
      use_async_tts: number;
    }
  
    interface e extends Base {
      args: {
        channel: string;
        gl_category: string;
      };
      id: string;
      name: 'BrowserWorker-0x7fd3431d1a00';
      // Denotes a step into the nestable async flow event BrowserWorker0x7fd3431d1a00.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
      use_async_tts: number;
    }
  
    interface F extends Base {
      args: {
        channel: string;
        gl_category: string;
      };
      id: string;
      name: 'BrowserWorker-0x7fd3431d1a00';
      // Denotes the ending of the async event BrowserWorker0x7fd3431d1a00.
      ph: 'F';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface S extends Base {
      args: {
        channel: string;
        gl_category: string;
      };
      id: string;
      name: 'BrowserWorker-0x7fd3431d1a00';
      // Denotes the beginning of the async event BrowserWorker0x7fd3431d1a00.
      ph: 'S';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace BudgetPool_DisableThrottling {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'BudgetPool_DisableThrottling';
      // Denotes the end of the event BudgetPool_DisableThrottling.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace CalculateRenderSurfaceLayerList {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'CalculateRenderSurfaceLayerList';
      // Denotes the end of the event CalculateRenderSurfaceLayerList.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace CancelAnimationFrame {
    interface I extends Base {
      args: {
        data: {
          frame: string;
          id: number;
          stackTrace?: {
            columnNumber: number;
            functionName: string;
            lineNumber: number;
            scriptId: string;
            url: string;
          }[];
        };
      };
      name: 'CancelAnimationFrame';
      // Denotes an event CancelAnimationFrame. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace CANCELLED {
    interface n extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'CANCELLED';
      // Denotes the ending of the nestable async flow event CANCELLED.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace CanExceedIdleDeadlineIfRequired {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'CanExceedIdleDeadlineIfRequired';
      // Denotes the end of the event CanExceedIdleDeadlineIfRequired.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Canvas2DLayerBridge {
    type FinalizeFrame = 
      TraceEvent.Canvas2DLayerBridge.FinalizeFrame.X;
  
    type FlushRecording = 
      TraceEvent.Canvas2DLayerBridge.FlushRecording.X;
  
    namespace FinalizeFrame {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Canvas2DLayerBridge::FinalizeFrame';
        // Denotes the end of the event FinalizeFrame.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace FlushRecording {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Canvas2DLayerBridge::flushRecording';
        // Denotes the end of the event FlushRecording.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Canvas2DLayerBridgeCreation {
    interface I extends Base {
      args: {
      
      };
      name: 'Canvas2DLayerBridgeCreation';
      // Denotes an event Canvas2DLayerBridgeCreation. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace CanvasResourceProvider {
    type Canvas = 
      TraceEvent.CanvasResourceProvider.Canvas.X;
  
    namespace Canvas {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'CanvasResourceProvider::Canvas';
        // Denotes the end of the event Canvas.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace CanvasResourceProviderBitmap {
    type CreateSkSurface = 
      TraceEvent.CanvasResourceProviderBitmap.CreateSkSurface.X;
  
    namespace CreateSkSurface {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'CanvasResourceProviderBitmap::CreateSkSurface';
        // Denotes the end of the event CreateSkSurface.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace CARendererLayerTree {
    type CommitScheduledCALayers = 
      TraceEvent.CARendererLayerTree.CommitScheduledCALayers.X;
  
    namespace CommitScheduledCALayers {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'CARendererLayerTree::CommitScheduledCALayers';
        // Denotes the end of the event CommitScheduledCALayers.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace CategorizedWorkerPool {
    type CollectCompletedTasks = 
      TraceEvent.CategorizedWorkerPool.CollectCompletedTasks.X;
  
    type ScheduleTasks = 
      TraceEvent.CategorizedWorkerPool.ScheduleTasks.X;
  
    type WaitForTasksToFinishRunning = 
      TraceEvent.CategorizedWorkerPool.WaitForTasksToFinishRunning.X;
  
    namespace CollectCompletedTasks {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'CategorizedWorkerPool::CollectCompletedTasks';
        // Denotes the end of the event CollectCompletedTasks.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ScheduleTasks {
      interface X extends Base {
        args: {
          num_edges: number;
          num_nodes: number;
        };
        // Duration.
        dur: number;
        name: 'CategorizedWorkerPool::ScheduleTasks';
        // Denotes the end of the event ScheduleTasks.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace WaitForTasksToFinishRunning {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'CategorizedWorkerPool::WaitForTasksToFinishRunning';
        // Denotes the end of the event WaitForTasksToFinishRunning.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace CATransactionCoordinator {
    type Postcommithandler = 
      TraceEvent.CATransactionCoordinator.Postcommithandler.X;
  
    type Precommithandler = 
      TraceEvent.CATransactionCoordinator.Precommithandler.X;
  
    namespace Postcommithandler {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'CATransactionCoordinator: post-commit handler';
        // Denotes the end of the event Postcommithandler.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Precommithandler {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'CATransactionCoordinator: pre-commit handler';
        // Denotes the end of the event Precommithandler.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Cc {
    type DisplayItemList = 
      TraceEvent.Cc.DisplayItemList.O;
  
    type LayerImpl = 
      TraceEvent.Cc.LayerImpl.D;
  
    type LayerTreeHostImpl = 
      TraceEvent.Cc.LayerTreeHostImpl.D |
      TraceEvent.Cc.LayerTreeHostImpl.N |
      TraceEvent.Cc.LayerTreeHostImpl.O;
  
    type Tile = 
      TraceEvent.Cc.Tile.D;
  
    namespace DisplayItemList {
      interface O extends Base {
        args: {
          snapshot: {
            params: {
              items: {
                name: string;
                skp64?: string;
                visual_rect: {
                
                }[];
              }[];
              layer_rect: {
              
              }[];
            };
            skp64: string;
          };
        };
        id2: {
          local: string;
        };
        name: 'cc::DisplayItemList';
        // Denotes a snapshot object of the event DisplayItemList.
        ph: 'O';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace LayerImpl {
      interface D extends Base {
        args: {
        
        };
        id: string;
        name: 'cc::LayerImpl';
        // Denotes a delete object of the event LayerImpl.
        ph: 'D';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace LayerTreeHostImpl {
      interface D extends Base {
        args: {
        
        };
        id: string;
        name: 'cc::LayerTreeHostImpl';
        // Denotes a delete object of the event LayerTreeHostImpl.
        ph: 'D';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface N extends Base {
        args: {
        
        };
        id: string;
        name: 'cc::LayerTreeHostImpl';
        // Denotes a create object of the event LayerTreeHostImpl.
        ph: 'N';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface O extends Base {
        args: {
          snapshot: {
            active_tiles: {
              cat: string;
              combined_priority: {
                distance_to_visible: number;
                is_occluded: boolean;
                priority_bin: string;
                resolution: string;
              };
              content_rect: {
              
              }[];
              contents_scale: number;
              draw_info: {
                is_solid_color: boolean;
                is_transparent: boolean;
              };
              gpu_memory_usage: number;
              has_resource: boolean;
              id: string;
              is_using_gpu_memory: boolean;
              layer_id: number;
              picture_pile: {
                id_ref: string;
              };
              raster_transform: {
              
              }[];
              resolution: string;
              scheduled_priority: number;
              use_picture_analysis: boolean;
            }[];
            active_tree: {
              id: string;
              layers: {
                base_type: string;
                bounds: {
                  height: number;
                  width: number;
                };
                can_have_tilings_state?: {
                  can_have_tilings: boolean;
                  draws_content: boolean;
                  max_contents_scale: number;
                  min_contents_scale: number;
                  raster_source_has_recordings: boolean;
                  raster_source_solid_color: boolean;
                };
                can_use_lcd_text: boolean;
                cat: string;
                clip_tree_index: number;
                contents_opaque: boolean;
                coverage_tiles?: {
                  geometry_rect: {
                  
                  }[];
                  tile: {
                    id_ref: string;
                  };
                }[];
                debug_info?: {
                  annotated_invalidation_rects?: {
                    client: string;
                    geometry_rect: {
                    
                    }[];
                    reason: string;
                  }[];
                  compositing_reasons: {
                    '0': string;
                    '1': string;
                    '2': string;
                    '3': string;
                    '4': string;
                    '5': string;
                    '6': string;
                    '7': string;
                    '8': string;
                    '9': string;
                    '10': string;
                    '11': string;
                    '12': string;
                    '13': string;
                    '14': string;
                    '15': string;
                    '16': string;
                  }[];
                  layer_name: string;
                  owner_node?: number;
                };
                draws_content: number;
                effect_tree_index: number;
                element_id?: {
                  id_: number;
                };
                geometry_contents_scale?: number;
                gpu_memory_usage: number;
                has_will_change_transform_hint: boolean;
                id: string;
                ideal_contents_scale?: number;
                ideal_scales?: {
                  contents_scale: number;
                  device_scale: number;
                  page_scale: number;
                  source_scale: number;
                };
                invalidation?: {
                
                }[];
                layer_id: number;
                layer_quad: {
                
                }[];
                opacity: number;
                pictures?: {
                  id_ref: string;
                }[];
                position: {
                
                }[];
                raster_scales?: {
                  contents_scale: number;
                  device_scale: number;
                  low_res_contents_scale: number;
                  page_scale: number;
                  source_scale: number;
                };
                screen_space_transform: {
                
                }[];
                scroll_offset: {
                
                }[];
                scroll_tree_index: number;
                tile_priority_rect?: {
                
                }[];
                tilings?: {
                  content_scale: number;
                  eventually_rect: {
                  
                  }[];
                  num_tiles: number;
                  raster_transform: {
                  
                  }[];
                  skewport_rect: {
                  
                  }[];
                  soon_rect: {
                  
                  }[];
                  tiling_size: {
                    height: number;
                    width: number;
                  };
                  visible_rect: {
                  
                  }[];
                }[];
                transform_tree_index: number;
                visible_rect?: {
                
                }[];
              }[];
              render_surface_layer_list: {
                id_ref: string;
              }[];
              source_frame_number: number;
              swap_promise_trace_ids: {
              
              }[];
            };
            device_viewport_size: {
              height: number;
              width: number;
            };
            frame: {
              has_no_damage: boolean;
              render_passes: {
                backdrop_filter_bounds: {
                
                }[];
                cache_render_pass: boolean;
                cat: string;
                copy_requests: number;
                damage_rect: {
                
                }[];
                generate_mipmap: boolean;
                has_damage_from_contributing_content: boolean;
                has_transparent_background: boolean;
                id: string;
                output_rect: {
                
                }[];
                quad_list: {
                  color?: number;
                  content_space_rect: {
                  
                  }[];
                  content_space_visible_rect: {
                  
                  }[];
                  force_anti_aliasing_off?: boolean;
                  material: number;
                  nearest_neighbor?: boolean;
                  needs_blending: boolean;
                  rect_as_target_space_quad: {
                  
                  }[];
                  rect_is_clipped: boolean;
                  resource_id?: number;
                  shared_state: {
                    id_ref: string;
                  };
                  should_draw_with_blending: boolean;
                  surface_range?: string;
                  swizzle_contents?: boolean;
                  tex_coord_rect?: {
                  
                  }[];
                  texture_size?: {
                    height: number;
                    width: number;
                  };
                  visible_rect_as_target_space_quad: {
                  
                  }[];
                  visible_rect_is_clipped: boolean;
                }[];
                shared_quad_state_list: {
                  are_contents_opaque: boolean;
                  blend_mode: string;
                  cat: string;
                  clip_rect: {
                  
                  }[];
                  id: string;
                  is_clipped: boolean;
                  layer_content_rect: {
                  
                  }[];
                  layer_visible_content_rect: {
                  
                  }[];
                  opacity: number;
                  transform: {
                  
                  }[];
                }[];
              }[];
            };
            tile_manager_basic_state: {
              did_oom_on_last_assign: boolean;
              global_state: {
                hard_memory_limit_in_bytes: number;
                memory_limit_policy: string;
                num_resources_limit: number;
                soft_memory_limit_in_bytes: number;
                tree_priority: string;
              };
              tile_count: number;
            };
          };
        };
        id: string;
        name: 'cc::LayerTreeHostImpl';
        // Denotes a snapshot object of the event LayerTreeHostImpl.
        ph: 'O';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Tile {
      interface D extends Base {
        args: {
        
        };
        id: string;
        name: 'cc::Tile';
        // Denotes a delete object of the event Tile.
        ph: 'D';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Ccschedulerscheduler {
    type L38 = 
      TraceEvent.Ccschedulerscheduler.L38.F |
      TraceEvent.Ccschedulerscheduler.L38.S;
  
    namespace L38 {
      interface F extends Base {
        args: {
        
        };
        id: string;
        name: '@../../cc/scheduler/scheduler.cc:38';
        // Denotes the ending of the async event L38.
        ph: 'F';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface S extends Base {
        args: {
          'current args': {
            animate_only: boolean;
            deadline_us: number;
            frame_time_us: number;
            interval_us: number;
            on_critical_path: boolean;
            sequence_number: number;
            source_id: number;
            subtype: string;
            type: string;
          };
          'new args': {
            animate_only: boolean;
            deadline_us: number;
            frame_time_us: number;
            interval_us: number;
            on_critical_path: boolean;
            sequence_number: number;
            source_id: number;
            subtype: string;
            type: string;
          };
        };
        id: string;
        name: '@../../cc/scheduler/scheduler.cc:38';
        // Denotes the beginning of the async event L38.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Cctreeslayer_tree_host_impl {
    type L300 = 
      TraceEvent.Cctreeslayer_tree_host_impl.L300.F |
      TraceEvent.Cctreeslayer_tree_host_impl.L300.S;
  
    namespace L300 {
      interface F extends Base {
        args: {
        
        };
        id: string;
        name: '@../../cc/trees/layer_tree_host_impl.cc:300';
        // Denotes the ending of the async event L300.
        ph: 'F';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface S extends Base {
        args: {
          'current args': {
            animate_only: boolean;
            deadline_us: number;
            frame_time_us: number;
            interval_us: number;
            on_critical_path: boolean;
            sequence_number: number;
            source_id: number;
            subtype: string;
            type: string;
          };
          'new args': {
            animate_only: boolean;
            deadline_us: number;
            frame_time_us: number;
            interval_us: number;
            on_critical_path: boolean;
            sequence_number: number;
            source_id: number;
            subtype: string;
            type: string;
          };
        };
        id: string;
        name: '@../../cc/trees/layer_tree_host_impl.cc:300';
        // Denotes the beginning of the async event L300.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace CERT_VERIFIER_REQUEST_BOUND_TO_JOB {
    interface n extends Base {
      args: {
        params: {
          source_dependency: {
            id: number;
            type: number;
          };
        };
        source_type: string;
      };
      id: string;
      name: 'CERT_VERIFIER_REQUEST_BOUND_TO_JOB';
      // Denotes the ending of the nestable async flow event CERT_VERIFIER_REQUEST_BOUND_TO_JOB.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace CERT_VERIFIER_REQUEST {
    interface b extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'CERT_VERIFIER_REQUEST';
      // Denotes the beginning of the nestable async flow event CERT_VERIFIER_REQUEST.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'CERT_VERIFIER_REQUEST';
      // Denotes a step into the nestable async flow event CERT_VERIFIER_REQUEST.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace CertVerifierJob {
    type OnJobCompleted = 
      TraceEvent.CertVerifierJob.OnJobCompleted.X;
  
    namespace OnJobCompleted {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'CertVerifierJob::OnJobCompleted';
        // Denotes the end of the event OnJobCompleted.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ChannelMojo {
    type OnMessageReceived = 
      TraceEvent.ChannelMojo.OnMessageReceived.X;
  
    namespace OnMessageReceived {
      interface X extends Base {
        args: {
          class: number;
          line: number;
        };
        // Duration.
        dur: number;
        name: 'ChannelMojo::OnMessageReceived';
        // Denotes the end of the event OnMessageReceived.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace CheckerImageTracker {
    type DidActivateSyncTree = 
      TraceEvent.CheckerImageTracker.DidActivateSyncTree.X;
  
    type ScheduleImageDecodeQueue = 
      TraceEvent.CheckerImageTracker.ScheduleImageDecodeQueue.X;
  
    type ScheduleNextImageDecode = 
      TraceEvent.CheckerImageTracker.ScheduleNextImageDecode.X;
  
    type ShouldCheckerImage = 
      TraceEvent.CheckerImageTracker.ShouldCheckerImage.X;
  
    type TakeImagesToInvalidateOnSyncTree = 
      TraceEvent.CheckerImageTracker.TakeImagesToInvalidateOnSyncTree.X;
  
    namespace DidActivateSyncTree {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'CheckerImageTracker::DidActivateSyncTree';
        // Denotes the end of the event DidActivateSyncTree.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ScheduleImageDecodeQueue {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'CheckerImageTracker::ScheduleImageDecodeQueue';
        // Denotes the end of the event ScheduleImageDecodeQueue.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ScheduleNextImageDecode {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'CheckerImageTracker::ScheduleNextImageDecode';
        // Denotes the end of the event ScheduleNextImageDecode.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ShouldCheckerImage {
      interface X extends Base {
        args: {
          image_id: number;
        };
        // Duration.
        dur: number;
        name: 'CheckerImageTracker::ShouldCheckerImage';
        // Denotes the end of the event ShouldCheckerImage.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace TakeImagesToInvalidateOnSyncTree {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'CheckerImageTracker::TakeImagesToInvalidateOnSyncTree';
        // Denotes the end of the event TakeImagesToInvalidateOnSyncTree.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ChromeViewHostMsg_AllowDOMStorage {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ChromeViewHostMsg_AllowDOMStorage';
      // Denotes the end of the event ChromeViewHostMsg_AllowDOMStorage.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ChromiumRandomAccessFile {
    type Read = 
      TraceEvent.ChromiumRandomAccessFile.Read.X;
  
    namespace Read {
      interface X extends Base {
        args: {
          offset: number;
          size: number;
        };
        // Duration.
        dur: number;
        name: 'ChromiumRandomAccessFile::Read';
        // Denotes the end of the event Read.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace CircleOp {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'CircleOp';
      // Denotes the end of the event CircleOp.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace CircularRRectOp {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'CircularRRectOp';
      // Denotes the end of the event CircularRRectOp.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ClassicPendingScript {
    type GetSource = 
      TraceEvent.ClassicPendingScript.GetSource.X;
  
    namespace GetSource {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ClassicPendingScript::GetSource';
        // Denotes the end of the event GetSource.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Cleanup_tq {
    interface C extends Base {
      args: {
        value: number;
      };
      name: 'cleanup_tq';
      // Denotes a counter for the event Cleanup_tq.
      ph: 'C';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ClearusingTexSubImage2D {
    interface X extends Base {
      args: {
        size: number;
      };
      // Duration.
      dur: number;
      name: 'Clear using TexSubImage2D';
      // Denotes the end of the event ClearusingTexSubImage2D.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ClientSocketHandle {
    type OnIOComplete = 
      TraceEvent.ClientSocketHandle.OnIOComplete.X;
  
    namespace OnIOComplete {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ClientSocketHandle::OnIOComplete';
        // Denotes the end of the event OnIOComplete.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ColdModeSpellCheckRequester {
    type Invoke = 
      TraceEvent.ColdModeSpellCheckRequester.Invoke.X;
  
    namespace Invoke {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ColdModeSpellCheckRequester::invoke';
        // Denotes the end of the event Invoke.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace CommandBufferHelper {
    type Finish = 
      TraceEvent.CommandBufferHelper.Finish.X;
  
    type Flush = 
      TraceEvent.CommandBufferHelper.Flush.X;
  
    namespace Finish {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'CommandBufferHelper::Finish';
        // Denotes the end of the event Finish.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Flush {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'CommandBufferHelper::Flush';
        // Denotes the end of the event Flush.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace CommandBufferProxyImpl {
    type Flush = 
      TraceEvent.CommandBufferProxyImpl.Flush.X;
  
    type Initialize = 
      TraceEvent.CommandBufferProxyImpl.Initialize.X;
  
    type OrderingBarrier = 
      TraceEvent.CommandBufferProxyImpl.OrderingBarrier.X;
  
    type WaitForGetOffset = 
      TraceEvent.CommandBufferProxyImpl.WaitForGetOffset.X;
  
    namespace Flush {
      interface X extends Base {
        args: {
          put_offset: number;
        };
        // Duration.
        dur: number;
        name: 'CommandBufferProxyImpl::Flush';
        // Denotes the end of the event Flush.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Initialize {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'CommandBufferProxyImpl::Initialize';
        // Denotes the end of the event Initialize.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OrderingBarrier {
      interface X extends Base {
        args: {
          put_offset: number;
        };
        // Duration.
        dur: number;
        name: 'CommandBufferProxyImpl::OrderingBarrier';
        // Denotes the end of the event OrderingBarrier.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace WaitForGetOffset {
      interface X extends Base {
        args: {
          end: number;
          start: number;
        };
        // Duration.
        dur: number;
        name: 'CommandBufferProxyImpl::WaitForGetOffset';
        // Denotes the end of the event WaitForGetOffset.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace CommandBufferService {
    type Paused = 
      TraceEvent.CommandBufferService.Paused.C;
  
    type PutChanged = 
      TraceEvent.CommandBufferService.PutChanged.X;
  
    namespace Paused {
      interface C extends Base {
        args: {
          value: number;
        };
        id: string;
        name: 'CommandBufferService::Paused';
        // Denotes a counter for the event Paused.
        ph: 'C';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PutChanged {
      interface X extends Base {
        args: {
          handler: string;
        };
        // Duration.
        dur: number;
        name: 'CommandBufferService:PutChanged';
        // Denotes the end of the event PutChanged.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace CommandBufferStub {
    type OnAsyncFlush = 
      TraceEvent.CommandBufferStub.OnAsyncFlush.X;
  
    type OnDestroyTransferBuffer = 
      TraceEvent.CommandBufferStub.OnDestroyTransferBuffer.X;
  
    type OnRegisterTransferBuffer = 
      TraceEvent.CommandBufferStub.OnRegisterTransferBuffer.X;
  
    type OnSetGetBuffer = 
      TraceEvent.CommandBufferStub.OnSetGetBuffer.X;
  
    type OnWaitForGetOffsetInRange = 
      TraceEvent.CommandBufferStub.OnWaitForGetOffsetInRange.X;
  
    type PerformWork = 
      TraceEvent.CommandBufferStub.PerformWork.X;
  
    namespace OnAsyncFlush {
      interface X extends Base {
        args: {
          put_offset: number;
        };
        // Duration.
        dur: number;
        name: 'CommandBufferStub::OnAsyncFlush';
        // Denotes the end of the event OnAsyncFlush.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnDestroyTransferBuffer {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'CommandBufferStub::OnDestroyTransferBuffer';
        // Denotes the end of the event OnDestroyTransferBuffer.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnRegisterTransferBuffer {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'CommandBufferStub::OnRegisterTransferBuffer';
        // Denotes the end of the event OnRegisterTransferBuffer.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnSetGetBuffer {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'CommandBufferStub::OnSetGetBuffer';
        // Denotes the end of the event OnSetGetBuffer.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnWaitForGetOffsetInRange {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'CommandBufferStub::OnWaitForGetOffsetInRange';
        // Denotes the end of the event OnWaitForGetOffsetInRange.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PerformWork {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'CommandBufferStub::PerformWork';
        // Denotes the end of the event PerformWork.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace CommitLoad {
    interface X extends Base {
      args: {
        data: {
          frame: string;
          isMainFrame: boolean;
          name?: string;
          nodeId?: number;
          page: string;
          parent?: string;
          url?: string;
        };
      };
      // Duration.
      dur: number;
      name: 'CommitLoad';
      // Denotes the end of the event CommitLoad.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace CommitPendingTreesToCA {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'CommitPendingTreesToCA';
      // Denotes the end of the event CommitPendingTreesToCA.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace CompositeLayers {
    interface B extends Base {
      args: {
        layerTreeId: number;
      };
      name: 'CompositeLayers';
      // Denotes the beginning of the event CompositeLayers.
      ph: 'B';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface E extends Base {
      args: {
      
      };
      name: 'CompositeLayers';
      // Denotes the ending of the event CompositeLayers.
      ph: 'E';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace CompositingInputsUpdater {
    type Update = 
      TraceEvent.CompositingInputsUpdater.Update.X;
  
    namespace Update {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'CompositingInputsUpdater::update';
        // Denotes the end of the event Update.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace CompositingLayerAssigner {
    type Assign = 
      TraceEvent.CompositingLayerAssigner.Assign.X;
  
    namespace Assign {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'CompositingLayerAssigner::assign';
        // Denotes the end of the event Assign.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace CompositingRequirementsUpdater {
    type UpdateRecursive = 
      TraceEvent.CompositingRequirementsUpdater.UpdateRecursive.X;
  
    namespace UpdateRecursive {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'CompositingRequirementsUpdater::updateRecursive';
        // Denotes the end of the event UpdateRecursive.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Compositor_tq {
    interface C extends Base {
      args: {
        value: number;
      };
      name: 'compositor_tq';
      // Denotes a counter for the event Compositor_tq.
      ph: 'C';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace CompositorFrameSinkSupport {
    type DidNotProduceFrame = 
      TraceEvent.CompositorFrameSinkSupport.DidNotProduceFrame.X;
  
    type MaybeSubmitCompositorFrame = 
      TraceEvent.CompositorFrameSinkSupport.MaybeSubmitCompositorFrame.X;
  
    namespace DidNotProduceFrame {
      interface X extends Base {
        args: {
          'ack.sequence_number': number;
          'ack.source_id': number;
        };
        // Duration.
        dur: number;
        name: 'CompositorFrameSinkSupport::DidNotProduceFrame';
        // Denotes the end of the event DidNotProduceFrame.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace MaybeSubmitCompositorFrame {
      interface X extends Base {
        args: {
          FrameSinkId: string;
        };
        // Duration.
        dur: number;
        name: 'CompositorFrameSinkSupport::MaybeSubmitCompositorFrame';
        // Denotes the end of the event MaybeSubmitCompositorFrame.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace CompositorTimingHistory {
    type DidDraw = 
      TraceEvent.CompositorTimingHistory.DidDraw.X;
  
    namespace DidDraw {
      interface X extends Base {
        args: {
          active_tree_main_frame_time: number;
          impl_frame_time: number;
        };
        // Duration.
        dur: number;
        name: 'CompositorTimingHistory::DidDraw';
        // Denotes the end of the event DidDraw.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ConcurrentMarking {
    type RunPreempted = 
      TraceEvent.ConcurrentMarking.RunPreempted.X;
  
    namespace RunPreempted {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ConcurrentMarking::Run Preempted';
        // Denotes the end of the event RunPreempted.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace CONNECT_JOB_SET_SOCKET {
    interface n extends Base {
      args: {
        params: {
          source_dependency: {
            id: number;
            type: number;
          };
        };
        source_type: string;
      };
      id: string;
      name: 'CONNECT_JOB_SET_SOCKET';
      // Denotes the ending of the nestable async flow event CONNECT_JOB_SET_SOCKET.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ConnectJob {
    type NotifyDelegateOfCompletion = 
      TraceEvent.ConnectJob.NotifyDelegateOfCompletion.X;
  
    namespace NotifyDelegateOfCompletion {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ConnectJob::NotifyDelegateOfCompletion';
        // Denotes the end of the event NotifyDelegateOfCompletion.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ConsoleMessage {
    type Error = 
      TraceEvent.ConsoleMessage.Error.I;
  
    namespace Error {
      interface I extends Base {
        args: {
          source: string;
        };
        name: 'ConsoleMessage::Error';
        // Denotes an event Error. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Content {
    namespace Mojom {
      type ChildHistogramFetcherFactory = 
        TraceEvent.Content.Mojom.ChildHistogramFetcherFactory.X;
    
      type Frame = 
        TraceEvent.Content.Mojom.Frame.X;
    
      type FrameFactory = 
        TraceEvent.Content.Mojom.FrameFactory.X;
    
      type FrameInputHandler = 
        TraceEvent.Content.Mojom.FrameInputHandler.X;
    
      type FrameSinkProvider = 
        TraceEvent.Content.Mojom.FrameSinkProvider.X;
    
      type RenderFrameMetadataObserverClient = 
        TraceEvent.Content.Mojom.RenderFrameMetadataObserverClient.X;
    
      type SandboxSupportMac = 
        TraceEvent.Content.Mojom.SandboxSupportMac.X;
    
      type Widget = 
        TraceEvent.Content.Mojom.Widget.X;
    
      namespace ChildHistogramFetcherFactory {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'content.mojom.ChildHistogramFetcherFactory';
          // Denotes the end of the event ChildHistogramFetcherFactory.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace Frame {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'content.mojom.Frame';
          // Denotes the end of the event Frame.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace FrameFactory {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'content.mojom.FrameFactory';
          // Denotes the end of the event FrameFactory.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace FrameInputHandler {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'content.mojom.FrameInputHandler';
          // Denotes the end of the event FrameInputHandler.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace FrameSinkProvider {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'content.mojom.FrameSinkProvider';
          // Denotes the end of the event FrameSinkProvider.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace RenderFrameMetadataObserverClient {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'content.mojom.RenderFrameMetadataObserverClient';
          // Denotes the end of the event RenderFrameMetadataObserverClient.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace SandboxSupportMac {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'content.mojom.SandboxSupportMac';
          // Denotes the end of the event SandboxSupportMac.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace Widget {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'content.mojom.Widget';
          // Denotes the end of the event Widget.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace ContentLayerDelegate {
    type PaintContents = 
      TraceEvent.ContentLayerDelegate.PaintContents.X;
  
    namespace PaintContents {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ContentLayerDelegate::paintContents';
        // Denotes the end of the event PaintContents.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ContentSubresourceFilterThrottleManager {
    type ReadyToCommitNavigation = 
      TraceEvent.ContentSubresourceFilterThrottleManager.ReadyToCommitNavigation.X;
  
    namespace ReadyToCommitNavigation {
      interface X extends Base {
        args: {
          activation_state: number;
        };
        // Duration.
        dur: number;
        name: 'ContentSubresourceFilterThrottleManager::ReadyToCommitNavigation';
        // Denotes the end of the event ReadyToCommitNavigation.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ContextCreatedNotification {
    interface X extends Base {
      args: {
        IsMainFrame: boolean;
      };
      // Duration.
      dur: number;
      name: 'ContextCreatedNotification';
      // Denotes the end of the event ContextCreatedNotification.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Control_tq {
    interface C extends Base {
      args: {
        value: number;
      };
      name: 'control_tq';
      // Denotes a counter for the event Control_tq.
      ph: 'C';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace COOKIE_STORE_COOKIE_ADDED {
    interface n extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'COOKIE_STORE_COOKIE_ADDED';
      // Denotes the ending of the nestable async flow event COOKIE_STORE_COOKIE_ADDED.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace COOKIE_STORE_COOKIE_DELETED {
    interface n extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'COOKIE_STORE_COOKIE_DELETED';
      // Denotes the ending of the nestable async flow event COOKIE_STORE_COOKIE_DELETED.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace CpuProfiler {
    type StartProfiling = 
      TraceEvent.CpuProfiler.StartProfiling.X;
  
    namespace StartProfiling {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'CpuProfiler::StartProfiling';
        // Denotes the end of the event StartProfiling.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace CreateIOSurface {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'CreateIOSurface';
      // Denotes the end of the event CreateIOSurface.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace CSSFirstUsed {
    interface X extends Base {
      args: {
        feature: number;
      };
      // Duration.
      dur: number;
      name: 'CSSFirstUsed';
      // Denotes the end of the event CSSFirstUsed.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace CSSParserImpl {
    namespace ParseStyleSheet {
      type Parse = 
        TraceEvent.CSSParserImpl.ParseStyleSheet.Parse.B |
        TraceEvent.CSSParserImpl.ParseStyleSheet.Parse.E;
    
      namespace Parse {
        interface B extends Base {
          args: {
          
          };
          name: 'CSSParserImpl::parseStyleSheet.parse';
          // Denotes the beginning of the event Parse.
          ph: 'B';
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      
        interface E extends Base {
          args: {
          
          };
          name: 'CSSParserImpl::parseStyleSheet.parse';
          // Denotes the ending of the event Parse.
          ph: 'E';
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      interface B extends Base {
        args: {
          baseUrl: string;
          mode: number;
        };
        name: 'CSSParserImpl::parseStyleSheet';
        // Denotes the beginning of the event ParseStyleSheet.
        ph: 'B';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface E extends Base {
        args: {
          length: number;
          tokenCount: number;
        };
        name: 'CSSParserImpl::parseStyleSheet';
        // Denotes the ending of the event ParseStyleSheet.
        ph: 'E';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace CustomElementRegistry {
    type Define = 
      TraceEvent.CustomElementRegistry.Define.X;
  
    namespace Define {
      interface X extends Base {
        args: {
          name: string;
        };
        // Duration.
        dur: number;
        name: 'CustomElementRegistry::define';
        // Denotes the end of the event Define.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Damagenotvisible {
    interface I extends Base {
      args: {
      
      };
      name: 'Damage not visible.';
      // Denotes an event Damagenotvisible. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace DataReductionProxyCompressionStats {
    type RecordDataUseWithMimeType = 
      TraceEvent.DataReductionProxyCompressionStats.RecordDataUseWithMimeType.X;
  
    namespace RecordDataUseWithMimeType {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'DataReductionProxyCompressionStats::RecordDataUseWithMimeType';
        // Denotes the end of the event RecordDataUseWithMimeType.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace DecodeFont {
    interface B extends Base {
      args: {
      
      };
      name: 'DecodeFont';
      // Denotes the beginning of the event DecodeFont.
      ph: 'B';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface E extends Base {
      args: {
      
      };
      name: 'DecodeFont';
      // Denotes the ending of the event DecodeFont.
      ph: 'E';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace DecodeImage {
    interface X extends Base {
      args: {
        imageType: string;
      };
      // Duration.
      dur: number;
      name: 'Decode Image';
      // Denotes the end of the event DecodeImage.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace DecodeLazyPixelRef {
    interface X extends Base {
      args: {
        LazyPixelRef: number;
      };
      // Duration.
      dur: number;
      name: 'Decode LazyPixelRef';
      // Denotes the end of the event DecodeLazyPixelRef.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Default_tq {
    interface C extends Base {
      args: {
        value: number;
      };
      name: 'default_tq';
      // Denotes a counter for the event Default_tq.
      ph: 'C';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace DefaultPathOp {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'DefaultPathOp';
      // Denotes the end of the event DefaultPathOp.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace DelayBasedTimeSource {
    type SetActive = 
      TraceEvent.DelayBasedTimeSource.SetActive.X;
  
    namespace SetActive {
      interface X extends Base {
        args: {
          active: boolean;
        };
        // Duration.
        dur: number;
        name: 'DelayBasedTimeSource::SetActive';
        // Denotes the end of the event SetActive.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Device {
    namespace Mojom {
      type PowerMonitor = 
        TraceEvent.Device.Mojom.PowerMonitor.X;
    
      type PowerMonitorClient = 
        TraceEvent.Device.Mojom.PowerMonitorClient.X;
    
      type TimeZoneMonitor = 
        TraceEvent.Device.Mojom.TimeZoneMonitor.X;
    
      type WakeLock = 
        TraceEvent.Device.Mojom.WakeLock.X;
    
      type WakeLockContext = 
        TraceEvent.Device.Mojom.WakeLockContext.X;
    
      type WakeLockProvider = 
        TraceEvent.Device.Mojom.WakeLockProvider.X;
    
      namespace PowerMonitor {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'device.mojom.PowerMonitor';
          // Denotes the end of the event PowerMonitor.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace PowerMonitorClient {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'device.mojom.PowerMonitorClient';
          // Denotes the end of the event PowerMonitorClient.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace TimeZoneMonitor {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'device.mojom.TimeZoneMonitor';
          // Denotes the end of the event TimeZoneMonitor.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace WakeLock {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'device.mojom.WakeLock';
          // Denotes the end of the event WakeLock.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace WakeLockContext {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'device.mojom.WakeLockContext';
          // Denotes the end of the event WakeLockContext.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace WakeLockProvider {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'device.mojom.WakeLockProvider';
          // Denotes the end of the event WakeLockProvider.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace DidPrepareTiles {
    interface I extends Base {
      args: {
        state: {
          did_oom_on_last_assign: boolean;
          global_state: {
            hard_memory_limit_in_bytes: number;
            memory_limit_policy: string;
            num_resources_limit: number;
            soft_memory_limit_in_bytes: number;
            tree_priority: string;
          };
          tile_count: number;
        };
      };
      name: 'DidPrepareTiles';
      // Denotes an event DidPrepareTiles. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace DidProcessTask {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'DidProcessTask';
      // Denotes the end of the event DidProcessTask.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace DirectRenderer {
    type DrawFrame = 
      TraceEvent.DirectRenderer.DrawFrame.X;
  
    type DrawRenderPass = 
      TraceEvent.DirectRenderer.DrawRenderPass.X;
  
    namespace DrawFrame {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'DirectRenderer::DrawFrame';
        // Denotes the end of the event DrawFrame.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DrawRenderPass {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'DirectRenderer::DrawRenderPass';
        // Denotes the end of the event DrawRenderPass.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Discardable_memory {
    namespace Mojom {
      type DiscardableSharedMemoryManager = 
        TraceEvent.Discardable_memory.Mojom.DiscardableSharedMemoryManager.X;
    
      namespace DiscardableSharedMemoryManager {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'discardable_memory.mojom.DiscardableSharedMemoryManager';
          // Denotes the end of the event DiscardableSharedMemoryManager.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace DiscardableImageMap {
    type Generate = 
      TraceEvent.DiscardableImageMap.Generate.X;
  
    namespace Generate {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'DiscardableImageMap::Generate';
        // Denotes the end of the event Generate.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace DiskUsage {
    interface C extends Base {
      args: {
        value: number;
      };
      name: 'DiskUsage';
      // Denotes a counter for the event DiskUsage.
      ph: 'C';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Display {
    type DrawAndSwap = 
      TraceEvent.Display.DrawAndSwap.X;
  
    type Resize = 
      TraceEvent.Display.Resize.X;
  
    type SetSurfaceId = 
      TraceEvent.Display.SetSurfaceId.X;
  
    type SetVisible = 
      TraceEvent.Display.SetVisible.X;
  
    type SurfaceDiscarded = 
      TraceEvent.Display.SurfaceDiscarded.X;
  
    namespace DrawAndSwap {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Display::DrawAndSwap';
        // Denotes the end of the event DrawAndSwap.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Resize {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Display::Resize';
        // Denotes the end of the event Resize.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetSurfaceId {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Display::SetSurfaceId';
        // Denotes the end of the event SetSurfaceId.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetVisible {
      interface X extends Base {
        args: {
          visible: boolean;
        };
        // Duration.
        dur: number;
        name: 'Display::SetVisible';
        // Denotes the end of the event SetVisible.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SurfaceDiscarded {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Display::SurfaceDiscarded';
        // Denotes the end of the event SurfaceDiscarded.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace DisplayCALayerTree {
    type GotCAContextFrame = 
      TraceEvent.DisplayCALayerTree.GotCAContextFrame.X;
  
    namespace GotCAContextFrame {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'DisplayCALayerTree::GotCAContextFrame';
        // Denotes the end of the event GotCAContextFrame.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace DisplayCompositor {
    interface b extends Base {
      args: {
        channel: string;
        gl_category: string;
      };
      id: string;
      name: 'DisplayCompositor';
      // Denotes the beginning of the nestable async flow event DisplayCompositor.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
      use_async_tts: number;
    }
  
    interface e extends Base {
      args: {
        channel: string;
        gl_category: string;
      };
      id: string;
      name: 'DisplayCompositor';
      // Denotes a step into the nestable async flow event DisplayCompositor.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
      use_async_tts: number;
    }
  
    interface F extends Base {
      args: {
        channel: string;
        gl_category: string;
      };
      id: string;
      name: 'DisplayCompositor';
      // Denotes the ending of the async event DisplayCompositor.
      ph: 'F';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface S extends Base {
      args: {
        channel: string;
        gl_category: string;
      };
      id: string;
      name: 'DisplayCompositor';
      // Denotes the beginning of the async event DisplayCompositor.
      ph: 'S';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace DisplayItemList {
    type Finalize = 
      TraceEvent.DisplayItemList.Finalize.X;
  
    namespace Finalize {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'DisplayItemList::Finalize';
        // Denotes the end of the event Finalize.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace DisplayLinkMac {
    type DisplayLinkCallback = 
      TraceEvent.DisplayLinkMac.DisplayLinkCallback.X;
  
    type UpdateVSyncParameters = 
      TraceEvent.DisplayLinkMac.UpdateVSyncParameters.X;
  
    namespace DisplayLinkCallback {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'DisplayLinkMac::DisplayLinkCallback';
        // Denotes the end of the event DisplayLinkCallback.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UpdateVSyncParameters {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'DisplayLinkMac::UpdateVSyncParameters';
        // Denotes the end of the event UpdateVSyncParameters.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace DisplayScheduler {
    type BeginFrame = 
      TraceEvent.DisplayScheduler.BeginFrame.X;
  
    type DrawAndSwap = 
      TraceEvent.DisplayScheduler.DrawAndSwap.X;
  
    type OnBeginFrameDeadline = 
      TraceEvent.DisplayScheduler.OnBeginFrameDeadline.X;
  
    type Pending_swaps = 
      TraceEvent.DisplayScheduler.Pending_swaps.F |
      TraceEvent.DisplayScheduler.Pending_swaps.S;
  
    type ScheduleBeginFrameDeadline = 
      TraceEvent.DisplayScheduler.ScheduleBeginFrameDeadline.X;
  
    type SetNewRootSurface = 
      TraceEvent.DisplayScheduler.SetNewRootSurface.X;
  
    type SetRootFrameMissing = 
      TraceEvent.DisplayScheduler.SetRootFrameMissing.X;
  
    type SurfaceDamaged = 
      TraceEvent.DisplayScheduler.SurfaceDamaged.X;
  
    type SurfaceDamageExpected = 
      TraceEvent.DisplayScheduler.SurfaceDamageExpected.X;
  
    type UpdateHasPendingSurfaces = 
      TraceEvent.DisplayScheduler.UpdateHasPendingSurfaces.I;
  
    namespace BeginFrame {
      interface X extends Base {
        args: {
          args: {
            animate_only: boolean;
            deadline_us: number;
            frame_time_us: number;
            interval_us: number;
            on_critical_path: boolean;
            sequence_number: number;
            source_id: number;
            subtype: string;
            type: string;
          };
          now: number;
        };
        // Duration.
        dur: number;
        name: 'DisplayScheduler::BeginFrame';
        // Denotes the end of the event BeginFrame.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DrawAndSwap {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'DisplayScheduler::DrawAndSwap';
        // Denotes the end of the event DrawAndSwap.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnBeginFrameDeadline {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'DisplayScheduler::OnBeginFrameDeadline';
        // Denotes the end of the event OnBeginFrameDeadline.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Pending_swaps {
      interface F extends Base {
        args: {
        
        };
        id: string;
        name: 'DisplayScheduler:pending_swaps';
        // Denotes the ending of the async event Pending_swaps.
        ph: 'F';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface S extends Base {
        args: {
        
        };
        id: string;
        name: 'DisplayScheduler:pending_swaps';
        // Denotes the beginning of the async event Pending_swaps.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ScheduleBeginFrameDeadline {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'DisplayScheduler::ScheduleBeginFrameDeadline';
        // Denotes the end of the event ScheduleBeginFrameDeadline.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetNewRootSurface {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'DisplayScheduler::SetNewRootSurface';
        // Denotes the end of the event SetNewRootSurface.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetRootFrameMissing {
      interface X extends Base {
        args: {
          missing: boolean;
        };
        // Duration.
        dur: number;
        name: 'DisplayScheduler::SetRootFrameMissing';
        // Denotes the end of the event SetRootFrameMissing.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SurfaceDamaged {
      interface X extends Base {
        args: {
          surface_id: string;
        };
        // Duration.
        dur: number;
        name: 'DisplayScheduler::SurfaceDamaged';
        // Denotes the end of the event SurfaceDamaged.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SurfaceDamageExpected {
      interface X extends Base {
        args: {
          surface_id: string;
        };
        // Duration.
        dur: number;
        name: 'DisplayScheduler::SurfaceDamageExpected';
        // Denotes the end of the event SurfaceDamageExpected.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UpdateHasPendingSurfaces {
      interface I extends Base {
        args: {
          has_pending_surfaces: boolean;
          pending_surface_id?: string;
        };
        name: 'DisplayScheduler::UpdateHasPendingSurfaces';
        // Denotes an event UpdateHasPendingSurfaces. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace DNS_TRANSACTION_ATTEMPT {
    interface n extends Base {
      args: {
        params: {
          source_dependency: {
            id: number;
            type: number;
          };
        };
        source_type: string;
      };
      id: string;
      name: 'DNS_TRANSACTION_ATTEMPT';
      // Denotes the ending of the nestable async flow event DNS_TRANSACTION_ATTEMPT.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace DNS_TRANSACTION_QUERY {
    interface b extends Base {
      args: {
        params: {
          qname: string;
        };
        source_type: string;
      };
      id: string;
      name: 'DNS_TRANSACTION_QUERY';
      // Denotes the beginning of the nestable async flow event DNS_TRANSACTION_QUERY.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
        params: {
          net_error: number;
        };
        source_type: string;
      };
      id: string;
      name: 'DNS_TRANSACTION_QUERY';
      // Denotes a step into the nestable async flow event DNS_TRANSACTION_QUERY.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace DNS_TRANSACTION_RESPONSE {
    interface n extends Base {
      args: {
        params: {
          answer_count: number;
          rcode: number;
          source_dependency: {
            id: number;
            type: number;
          };
        };
        source_type: string;
      };
      id: string;
      name: 'DNS_TRANSACTION_RESPONSE';
      // Denotes the ending of the nestable async flow event DNS_TRANSACTION_RESPONSE.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace DNS_TRANSACTION {
    interface b extends Base {
      args: {
        params: {
          hostname: string;
          query_type: number;
        };
        source_type: string;
      };
      id: string;
      name: 'DNS_TRANSACTION';
      // Denotes the beginning of the nestable async flow event DNS_TRANSACTION.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
        params: {
          net_error: number;
        };
        source_type: string;
      };
      id: string;
      name: 'DNS_TRANSACTION';
      // Denotes a step into the nestable async flow event DNS_TRANSACTION.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Document {
    type RebuildLayoutTree = 
      TraceEvent.Document.RebuildLayoutTree.X;
  
    type RecalcStyle = 
      TraceEvent.Document.RecalcStyle.X;
  
    type Shutdown = 
      TraceEvent.Document.Shutdown.X;
  
    type UpdateActiveStyle = 
      TraceEvent.Document.UpdateActiveStyle.X;
  
    type UpdateStyle = 
      TraceEvent.Document.UpdateStyle.B |
      TraceEvent.Document.UpdateStyle.E;
  
    type UpdateStyleInvalidationIfNeeded = 
      TraceEvent.Document.UpdateStyleInvalidationIfNeeded.X;
  
    namespace RebuildLayoutTree {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Document::rebuildLayoutTree';
        // Denotes the end of the event RebuildLayoutTree.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RecalcStyle {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Document::recalcStyle';
        // Denotes the end of the event RecalcStyle.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Shutdown {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Document::shutdown';
        // Denotes the end of the event Shutdown.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UpdateActiveStyle {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Document::updateActiveStyle';
        // Denotes the end of the event UpdateActiveStyle.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UpdateStyle {
      interface B extends Base {
        args: {
        
        };
        name: 'Document::updateStyle';
        // Denotes the beginning of the event UpdateStyle.
        ph: 'B';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface E extends Base {
        args: {
          counters: {
            baseStylesUsed: number;
            customPropertiesApplied: number;
            elementsStyled: number;
            independentInheritedStylesPropagated: number;
            matchedPropertyApply: number;
            matchedPropertyCacheAdded: number;
            matchedPropertyCacheHit: number;
            matchedPropertyCacheInheritedHit: number;
            pseudoElementsStyled: number;
            rulesFastRejected: number;
            rulesMatched: number;
            rulesRejected: number;
            stylesAnimated: number;
            stylesChanged: number;
            stylesUnchanged: number;
          };
          resolverAccessCount: number;
        };
        name: 'Document::updateStyle';
        // Denotes the ending of the event UpdateStyle.
        ph: 'E';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UpdateStyleInvalidationIfNeeded {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Document::updateStyleInvalidationIfNeeded';
        // Denotes the end of the event UpdateStyleInvalidationIfNeeded.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace DocumentSubresourceFilter {
    type GetLoadPolicy = 
      TraceEvent.DocumentSubresourceFilter.GetLoadPolicy.X;
  
    namespace GetLoadPolicy {
      interface X extends Base {
        args: {
          url: string;
        };
        // Duration.
        dur: number;
        name: 'DocumentSubresourceFilter::GetLoadPolicy';
        // Denotes the end of the event GetLoadPolicy.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace DocumentTimeline {
    type ServiceAnimations = 
      TraceEvent.DocumentTimeline.ServiceAnimations.X;
  
    namespace ServiceAnimations {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'DocumentTimeline::serviceAnimations';
        // Denotes the end of the event ServiceAnimations.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace DomComplete {
    interface R extends Base {
      args: {
        frame: string;
      };
      name: 'domComplete';
      // Denotes a mark of the event DomComplete.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace DOMContentLoaded {
    interface b extends Base {
      args: {
      
      };
      id: string;
      name: 'DOM Content Loaded';
      // Denotes the beginning of the nestable async flow event DOMContentLoaded.
      ph: 'b';
    }
  
    interface e extends Base {
      args: {
      
      };
      id: string;
      name: 'DOM Content Loaded';
      // Denotes a step into the nestable async flow event DOMContentLoaded.
      ph: 'e';
    }
  }

  namespace DomContentLoadedEventEnd {
    interface R extends Base {
      args: {
        frame: string;
      };
      name: 'domContentLoadedEventEnd';
      // Denotes a mark of the event DomContentLoadedEventEnd.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace DomContentLoadedEventStart {
    interface R extends Base {
      args: {
        frame: string;
      };
      name: 'domContentLoadedEventStart';
      // Denotes a mark of the event DomContentLoadedEventStart.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace DomInteractive {
    interface R extends Base {
      args: {
        frame: string;
      };
      name: 'domInteractive';
      // Denotes a mark of the event DomInteractive.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace DomLoading {
    interface R extends Base {
      args: {
        frame: string;
      };
      name: 'domLoading';
      // Denotes a mark of the event DomLoading.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace DomReady {
    interface R extends Base {
      args: {
        data: {
          navigationId: string;
        };
      };
      name: 'domReady';
      // Denotes a mark of the event DomReady.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace DOMStorageHostMsg_LoadStorageArea {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'DOMStorageHostMsg_LoadStorageArea';
      // Denotes the end of the event DOMStorageHostMsg_LoadStorageArea.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace DOMStorageHostMsg_OpenStorageArea {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'DOMStorageHostMsg_OpenStorageArea';
      // Denotes the end of the event DOMStorageHostMsg_OpenStorageArea.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace DOMStorageHostMsg_RemoveItem {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'DOMStorageHostMsg_RemoveItem';
      // Denotes the end of the event DOMStorageHostMsg_RemoveItem.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace DOMStorageHostMsg_SetItem {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'DOMStorageHostMsg_SetItem';
      // Denotes the end of the event DOMStorageHostMsg_SetItem.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace DOMStorageMsg_AsyncOperationComplete {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'DOMStorageMsg_AsyncOperationComplete';
      // Denotes the end of the event DOMStorageMsg_AsyncOperationComplete.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace DOMStorageMsg_Event {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'DOMStorageMsg_Event';
      // Denotes the end of the event DOMStorageMsg_Event.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace DomTime {
    interface b extends Base {
      args: {
      
      };
      id: string;
      name: 'domTime';
      // Denotes the beginning of the nestable async flow event DomTime.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
      
      };
      id: string;
      name: 'domTime';
      // Denotes a step into the nestable async flow event DomTime.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace DosplayResourceProvider {
    type DeleteResourceInternal = 
      TraceEvent.DosplayResourceProvider.DeleteResourceInternal.X;
  
    namespace DeleteResourceInternal {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'DosplayResourceProvider::DeleteResourceInternal';
        // Denotes the end of the event DeleteResourceInternal.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace DoVerifyOnWorkerThread {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'DoVerifyOnWorkerThread';
      // Denotes the end of the event DoVerifyOnWorkerThread.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Draw_property_utils {
    type ComputeDrawPropertiesOfVisibleLayers = 
      TraceEvent.Draw_property_utils.ComputeDrawPropertiesOfVisibleLayers.X;
  
    type FindLayersThatNeedUpdates = 
      TraceEvent.Draw_property_utils.FindLayersThatNeedUpdates.X;
  
    namespace ComputeDrawPropertiesOfVisibleLayers {
      interface X extends Base {
        args: {
          visible_layers: number;
        };
        // Duration.
        dur: number;
        name: 'draw_property_utils::ComputeDrawPropertiesOfVisibleLayers';
        // Denotes the end of the event ComputeDrawPropertiesOfVisibleLayers.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace FindLayersThatNeedUpdates {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'draw_property_utils::FindLayersThatNeedUpdates';
        // Denotes the end of the event FindLayersThatNeedUpdates.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace DrawFrame {
    interface I extends Base {
      args: {
        layerTreeId: number;
      };
      name: 'DrawFrame';
      // Denotes an event DrawFrame. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace DrawLayers {
    type FrameViewerTracing = 
      TraceEvent.DrawLayers.FrameViewerTracing.X;
  
    namespace FrameViewerTracing {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'DrawLayers.FrameViewerTracing';
        // Denotes the end of the event FrameViewerTracing.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace DrawLazyPixelRef {
    interface I extends Base {
      args: {
        LazyPixelRef: number;
      };
      name: 'Draw LazyPixelRef';
      // Denotes an event DrawLazyPixelRef. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Drawskipped {
    interface I extends Base {
      args: {
      
      };
      name: 'Draw skipped.';
      // Denotes an event Drawskipped. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace DrawVerticesOp {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'DrawVerticesOp';
      // Denotes the end of the event DrawVerticesOp.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace EarlyOut_DeferCommit_InsideBeginMainFrame {
    interface I extends Base {
      args: {
      
      };
      name: 'EarlyOut_DeferCommit_InsideBeginMainFrame';
      // Denotes an event EarlyOut_DeferCommit_InsideBeginMainFrame. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace EarlyOut_NoUpdates {
    interface I extends Base {
      args: {
      
      };
      name: 'EarlyOut_NoUpdates';
      // Denotes an event EarlyOut_NoUpdates. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace EditingUtility {
    type NextCandidateAlgorithm = 
      TraceEvent.EditingUtility.NextCandidateAlgorithm.X;
  
    type PreviousCandidateAlgorithm = 
      TraceEvent.EditingUtility.PreviousCandidateAlgorithm.X;
  
    namespace NextCandidateAlgorithm {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'EditingUtility::nextCandidateAlgorithm';
        // Denotes the end of the event NextCandidateAlgorithm.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PreviousCandidateAlgorithm {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'EditingUtility::previousCandidateAlgorithm';
        // Denotes the end of the event PreviousCandidateAlgorithm.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ElementAnimations {
    type SetRunState = 
      TraceEvent.ElementAnimations.SetRunState.I;
  
    namespace SetRunState {
      interface I extends Base {
        args: {
          Name: string;
          State: string;
        };
        name: 'ElementAnimations::SetRunState';
        // Denotes an event SetRunState. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace EnableLongIdlePeriod {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'EnableLongIdlePeriod';
      // Denotes the end of the event EnableLongIdlePeriod.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace EndIdlePeriod {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'EndIdlePeriod';
      // Denotes the end of the event EndIdlePeriod.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace EndofTrace {
    interface b extends Base {
      args: {
      
      };
      id: string;
      name: 'End of Trace';
      // Denotes the beginning of the nestable async flow event EndofTrace.
      ph: 'b';
    }
  
    interface e extends Base {
      args: {
      
      };
      id: string;
      name: 'End of Trace';
      // Denotes a step into the nestable async flow event EndofTrace.
      ph: 'e';
    }
  }

  namespace Estimated_queueing_time_for_window {
    interface C extends Base {
      args: {
        value: number;
      };
      name: 'estimated_queueing_time_for_window';
      // Denotes a counter for the event Estimated_queueing_time_for_window.
      ph: 'C';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Evacuator {
    type EvacuatePage = 
      TraceEvent.Evacuator.EvacuatePage.X;
  
    namespace EvacuatePage {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Evacuator::EvacuatePage';
        // Denotes the end of the event EvacuatePage.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace EvaluateScript {
    interface X extends Base {
      args: {
        data?: {
          columnNumber: number;
          frame: string;
          lineNumber: number;
          stackTrace?: {
            columnNumber: number;
            functionName: string;
            lineNumber: number;
            scriptId: string;
            url: string;
          }[];
          url: string;
        };
      };
      // Duration.
      dur: number;
      name: 'EvaluateScript';
      // Denotes the end of the event EvaluateScript.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Event {
    type Pipeline = 
      TraceEvent.Event.Pipeline.X;
  
    namespace Pipeline {
      interface X extends Base {
        args: {
          step: string;
        };
        bind_id?: string;
        // Duration.
        dur: number;
        flow_in?: boolean;
        flow_out?: boolean;
        id2?: {
          global: string;
        };
        name: 'Event.Pipeline';
        // Denotes the end of the event Pipeline.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace EventDispatch {
    interface X extends Base {
      args: {
        data: {
          stackTrace?: {
            columnNumber: number;
            functionName: string;
            lineNumber: number;
            scriptId: string;
            url: string;
          }[];
          type: string;
        };
      };
      // Duration.
      dur?: number;
      name: 'EventDispatch';
      // Denotes the end of the event EventDispatch.
      ph: 'X';
      tdur?: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace EventDispatcher {
    type Dispatch = 
      TraceEvent.EventDispatcher.Dispatch.X;
  
    type DispatchEvent = 
      TraceEvent.EventDispatcher.DispatchEvent.X;
  
    namespace Dispatch {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'EventDispatcher::dispatch';
        // Denotes the end of the event Dispatch.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DispatchEvent {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'EventDispatcher::dispatchEvent';
        // Denotes the end of the event DispatchEvent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace EventHandler {
    type HandleMouseLeaveEvent = 
      TraceEvent.EventHandler.HandleMouseLeaveEvent.X;
  
    type HandleMouseMoveEvent = 
      TraceEvent.EventHandler.HandleMouseMoveEvent.X;
  
    type HandleMousePressEvent = 
      TraceEvent.EventHandler.HandleMousePressEvent.X;
  
    type HandleMouseReleaseEvent = 
      TraceEvent.EventHandler.HandleMouseReleaseEvent.X;
  
    type HitTestResultAtLocation = 
      TraceEvent.EventHandler.HitTestResultAtLocation.X;
  
    namespace HandleMouseLeaveEvent {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'EventHandler::handleMouseLeaveEvent';
        // Denotes the end of the event HandleMouseLeaveEvent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace HandleMouseMoveEvent {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'EventHandler::handleMouseMoveEvent';
        // Denotes the end of the event HandleMouseMoveEvent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace HandleMousePressEvent {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'EventHandler::handleMousePressEvent';
        // Denotes the end of the event HandleMousePressEvent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace HandleMouseReleaseEvent {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'EventHandler::handleMouseReleaseEvent';
        // Denotes the end of the event HandleMouseReleaseEvent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace HitTestResultAtLocation {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'EventHandler::HitTestResultAtLocation';
        // Denotes the end of the event HitTestResultAtLocation.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ExtensionHostMsg_AddLazyListener {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionHostMsg_AddLazyListener';
      // Denotes the end of the event ExtensionHostMsg_AddLazyListener.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionHostMsg_AddListener {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionHostMsg_AddListener';
      // Denotes the end of the event ExtensionHostMsg_AddListener.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionHostMsg_CloseMessagePort {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionHostMsg_CloseMessagePort';
      // Denotes the end of the event ExtensionHostMsg_CloseMessagePort.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionHostMsg_EventAck {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionHostMsg_EventAck';
      // Denotes the end of the event ExtensionHostMsg_EventAck.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionHostMsg_ExecuteCodeFinished {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionHostMsg_ExecuteCodeFinished';
      // Denotes the end of the event ExtensionHostMsg_ExecuteCodeFinished.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionHostMsg_GenerateUniqueID {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionHostMsg_GenerateUniqueID';
      // Denotes the end of the event ExtensionHostMsg_GenerateUniqueID.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionHostMsg_GetMessageBundle {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionHostMsg_GetMessageBundle';
      // Denotes the end of the event ExtensionHostMsg_GetMessageBundle.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionHostMsg_OpenChannelToExtension {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionHostMsg_OpenChannelToExtension';
      // Denotes the end of the event ExtensionHostMsg_OpenChannelToExtension.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionHostMsg_OpenChannelToTab {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionHostMsg_OpenChannelToTab';
      // Denotes the end of the event ExtensionHostMsg_OpenChannelToTab.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionHostMsg_OpenMessagePort {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionHostMsg_OpenMessagePort';
      // Denotes the end of the event ExtensionHostMsg_OpenMessagePort.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionHostMsg_PostMessage {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionHostMsg_PostMessage';
      // Denotes the end of the event ExtensionHostMsg_PostMessage.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionHostMsg_Request {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionHostMsg_Request';
      // Denotes the end of the event ExtensionHostMsg_Request.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionHostMsg_RequestForIOThread {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionHostMsg_RequestForIOThread';
      // Denotes the end of the event ExtensionHostMsg_RequestForIOThread.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionMsg_ActivateExtension {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionMsg_ActivateExtension';
      // Denotes the end of the event ExtensionMsg_ActivateExtension.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionMsg_DeliverMessage {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionMsg_DeliverMessage';
      // Denotes the end of the event ExtensionMsg_DeliverMessage.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionMsg_DispatchEvent {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionMsg_DispatchEvent';
      // Denotes the end of the event ExtensionMsg_DispatchEvent.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionMsg_DispatchOnConnect {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionMsg_DispatchOnConnect';
      // Denotes the end of the event ExtensionMsg_DispatchOnConnect.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionMsg_DispatchOnDisconnect {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur?: number;
      name: 'ExtensionMsg_DispatchOnDisconnect';
      // Denotes the end of the event ExtensionMsg_DispatchOnDisconnect.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionMsg_ExecuteCode {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionMsg_ExecuteCode';
      // Denotes the end of the event ExtensionMsg_ExecuteCode.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionMsg_Loaded {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionMsg_Loaded';
      // Denotes the end of the event ExtensionMsg_Loaded.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionMsg_NotifyRenderViewType {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionMsg_NotifyRenderViewType';
      // Denotes the end of the event ExtensionMsg_NotifyRenderViewType.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionMsg_Response {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionMsg_Response';
      // Denotes the end of the event ExtensionMsg_Response.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionMsg_SetScriptingWhitelist {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionMsg_SetScriptingWhitelist';
      // Denotes the end of the event ExtensionMsg_SetScriptingWhitelist.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionMsg_SetSessionInfo {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionMsg_SetSessionInfo';
      // Denotes the end of the event ExtensionMsg_SetSessionInfo.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionMsg_SetSystemFont {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionMsg_SetSystemFont';
      // Denotes the end of the event ExtensionMsg_SetSystemFont.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionMsg_SetTabId {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionMsg_SetTabId';
      // Denotes the end of the event ExtensionMsg_SetTabId.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionMsg_UpdateBrowserWindowId {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionMsg_UpdateBrowserWindowId';
      // Denotes the end of the event ExtensionMsg_UpdateBrowserWindowId.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionMsg_UpdateDefaultPolicyHostRestrictions {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionMsg_UpdateDefaultPolicyHostRestrictions';
      // Denotes the end of the event ExtensionMsg_UpdateDefaultPolicyHostRestrictions.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionMsg_UpdateUserScripts {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionMsg_UpdateUserScripts';
      // Denotes the end of the event ExtensionMsg_UpdateUserScripts.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionMsg_ValidateMessagePort {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionMsg_ValidateMessagePort';
      // Denotes the end of the event ExtensionMsg_ValidateMessagePort.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ExtensionMsg_WatchPages {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ExtensionMsg_WatchPages';
      // Denotes the end of the event ExtensionMsg_WatchPages.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Extensions {
    namespace FeatureProvider {
      type FeatureProviderStatic = 
        TraceEvent.Extensions.FeatureProvider.FeatureProviderStatic.X;
    
      namespace FeatureProviderStatic {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'extensions::FeatureProvider::FeatureProviderStatic';
          // Denotes the end of the event FeatureProviderStatic.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace FaveReady_mark {
    interface R extends Base {
      args: {
        data: {
          navigationId: string;
        };
      };
      name: 'faveReady_mark';
      // Denotes a mark of the event FaveReady_mark.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FaveReady {
    interface b extends Base {
      args: {
      
      };
      id: string;
      name: 'faveReady';
      // Denotes the beginning of the nestable async flow event FaveReady.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
      
      };
      id: string;
      name: 'faveReady';
      // Denotes a step into the nestable async flow event FaveReady.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FaviconServiceImpl {
    type GetFaviconForPageURL = 
      TraceEvent.FaviconServiceImpl.GetFaviconForPageURL.X;
  
    type GetFaviconImageForPageURL = 
      TraceEvent.FaviconServiceImpl.GetFaviconImageForPageURL.X;
  
    type RunFaviconImageCallbackWithBitmapResults = 
      TraceEvent.FaviconServiceImpl.RunFaviconImageCallbackWithBitmapResults.X;
  
    namespace GetFaviconForPageURL {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'FaviconServiceImpl::GetFaviconForPageURL';
        // Denotes the end of the event GetFaviconForPageURL.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GetFaviconImageForPageURL {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'FaviconServiceImpl::GetFaviconImageForPageURL';
        // Denotes the end of the event GetFaviconImageForPageURL.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RunFaviconImageCallbackWithBitmapResults {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'FaviconServiceImpl::RunFaviconImageCallbackWithBitmapResults';
        // Denotes the end of the event RunFaviconImageCallbackWithBitmapResults.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace FaviconUtil {
    type SelectFaviconFramesFromPNGs = 
      TraceEvent.FaviconUtil.SelectFaviconFramesFromPNGs.X;
  
    type SelectFaviconFramesFromPNGsWithoutResizing = 
      TraceEvent.FaviconUtil.SelectFaviconFramesFromPNGsWithoutResizing.X;
  
    namespace SelectFaviconFramesFromPNGs {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'FaviconUtil::SelectFaviconFramesFromPNGs';
        // Denotes the end of the event SelectFaviconFramesFromPNGs.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SelectFaviconFramesFromPNGsWithoutResizing {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'FaviconUtil::SelectFaviconFramesFromPNGsWithoutResizing';
        // Denotes the end of the event SelectFaviconFramesFromPNGsWithoutResizing.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace FeatureFirstUsed {
    interface X extends Base {
      args: {
        feature: number;
      };
      // Duration.
      dur: number;
      name: 'FeatureFirstUsed';
      // Denotes the end of the event FeatureFirstUsed.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FetchStart {
    interface R extends Base {
      args: {
        frame: string;
      };
      name: 'fetchStart';
      // Denotes a mark of the event FetchStart.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace File {
    type Close = 
      TraceEvent.File.Close.b |
      TraceEvent.File.Close.e;
  
    type Duplicate = 
      TraceEvent.File.Duplicate.b |
      TraceEvent.File.Duplicate.e;
  
    type Flush = 
      TraceEvent.File.Flush.b |
      TraceEvent.File.Flush.e;
  
    type GetInfo = 
      TraceEvent.File.GetInfo.b |
      TraceEvent.File.GetInfo.e;
  
    type Initialize = 
      TraceEvent.File.Initialize.b |
      TraceEvent.File.Initialize.e;
  
    type Read = 
      TraceEvent.File.Read.b |
      TraceEvent.File.Read.e;
  
    type ReadAtCurrentPos = 
      TraceEvent.File.ReadAtCurrentPos.b |
      TraceEvent.File.ReadAtCurrentPos.e;
  
    type Seek = 
      TraceEvent.File.Seek.b |
      TraceEvent.File.Seek.e;
  
    type SetLength = 
      TraceEvent.File.SetLength.b |
      TraceEvent.File.SetLength.e;
  
    type Write = 
      TraceEvent.File.Write.b |
      TraceEvent.File.Write.e;
  
    type WriteAtCurrentPos = 
      TraceEvent.File.WriteAtCurrentPos.b |
      TraceEvent.File.WriteAtCurrentPos.e;
  
    namespace Close {
      interface b extends Base {
        args: {
          path: string;
          size: number;
        };
        id: string;
        name: 'File::Close';
        // Denotes the beginning of the nestable async flow event Close.
        ph: 'b';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface e extends Base {
        args: {
        
        };
        id: string;
        name: 'File::Close';
        // Denotes a step into the nestable async flow event Close.
        ph: 'e';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Duplicate {
      interface b extends Base {
        args: {
          path: string;
          size: number;
        };
        id: string;
        name: 'File::Duplicate';
        // Denotes the beginning of the nestable async flow event Duplicate.
        ph: 'b';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface e extends Base {
        args: {
        
        };
        id: string;
        name: 'File::Duplicate';
        // Denotes a step into the nestable async flow event Duplicate.
        ph: 'e';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Flush {
      interface b extends Base {
        args: {
          path: string;
          size: number;
        };
        id: string;
        name: 'File::Flush';
        // Denotes the beginning of the nestable async flow event Flush.
        ph: 'b';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface e extends Base {
        args: {
        
        };
        id: string;
        name: 'File::Flush';
        // Denotes a step into the nestable async flow event Flush.
        ph: 'e';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GetInfo {
      interface b extends Base {
        args: {
          path: string;
          size: number;
        };
        id: string;
        name: 'File::GetInfo';
        // Denotes the beginning of the nestable async flow event GetInfo.
        ph: 'b';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface e extends Base {
        args: {
        
        };
        id: string;
        name: 'File::GetInfo';
        // Denotes a step into the nestable async flow event GetInfo.
        ph: 'e';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Initialize {
      interface b extends Base {
        args: {
          path: string;
          size: number;
        };
        id: string;
        name: 'File::Initialize';
        // Denotes the beginning of the nestable async flow event Initialize.
        ph: 'b';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface e extends Base {
        args: {
        
        };
        id: string;
        name: 'File::Initialize';
        // Denotes a step into the nestable async flow event Initialize.
        ph: 'e';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Read {
      interface b extends Base {
        args: {
          path: string;
          size: number;
        };
        id: string;
        name: 'File::Read';
        // Denotes the beginning of the nestable async flow event Read.
        ph: 'b';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface e extends Base {
        args: {
        
        };
        id: string;
        name: 'File::Read';
        // Denotes a step into the nestable async flow event Read.
        ph: 'e';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ReadAtCurrentPos {
      interface b extends Base {
        args: {
          path: string;
          size: number;
        };
        id: string;
        name: 'File::ReadAtCurrentPos';
        // Denotes the beginning of the nestable async flow event ReadAtCurrentPos.
        ph: 'b';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface e extends Base {
        args: {
        
        };
        id: string;
        name: 'File::ReadAtCurrentPos';
        // Denotes a step into the nestable async flow event ReadAtCurrentPos.
        ph: 'e';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Seek {
      interface b extends Base {
        args: {
          path: string;
          size: number;
        };
        id: string;
        name: 'File::Seek';
        // Denotes the beginning of the nestable async flow event Seek.
        ph: 'b';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface e extends Base {
        args: {
        
        };
        id: string;
        name: 'File::Seek';
        // Denotes a step into the nestable async flow event Seek.
        ph: 'e';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetLength {
      interface b extends Base {
        args: {
          path: string;
          size: number;
        };
        id: string;
        name: 'File::SetLength';
        // Denotes the beginning of the nestable async flow event SetLength.
        ph: 'b';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface e extends Base {
        args: {
        
        };
        id: string;
        name: 'File::SetLength';
        // Denotes a step into the nestable async flow event SetLength.
        ph: 'e';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Write {
      interface b extends Base {
        args: {
          path: string;
          size: number;
        };
        id: string;
        name: 'File::Write';
        // Denotes the beginning of the nestable async flow event Write.
        ph: 'b';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface e extends Base {
        args: {
        
        };
        id: string;
        name: 'File::Write';
        // Denotes a step into the nestable async flow event Write.
        ph: 'e';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace WriteAtCurrentPos {
      interface b extends Base {
        args: {
          path: string;
          size: number;
        };
        id: string;
        name: 'File::WriteAtCurrentPos';
        // Denotes the beginning of the nestable async flow event WriteAtCurrentPos.
        ph: 'b';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface e extends Base {
        args: {
        
        };
        id: string;
        name: 'File::WriteAtCurrentPos';
        // Denotes a step into the nestable async flow event WriteAtCurrentPos.
        ph: 'e';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    interface b extends Base {
      args: {
      
      };
      id: string;
      name: 'File';
      // Denotes the beginning of the nestable async flow event File.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
      
      };
      id: string;
      name: 'File';
      // Denotes a step into the nestable async flow event File.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FillRectOp {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'FillRectOp';
      // Denotes the end of the event FillRectOp.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FireAnimationFrame {
    interface X extends Base {
      args: {
        data: {
          frame: string;
          id: number;
        };
      };
      // Duration.
      dur: number;
      name: 'FireAnimationFrame';
      // Denotes the end of the event FireAnimationFrame.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FireIdleCallback {
    interface X extends Base {
      args: {
        data: {
          allottedMilliseconds: number;
          frame: string;
          id: number;
          timedOut: boolean;
        };
      };
      // Duration.
      dur: number;
      name: 'FireIdleCallback';
      // Denotes the end of the event FireIdleCallback.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FirstContentfulPaint {
    interface b extends Base {
      args: {
      
      };
      id: string;
      name: 'First Contentful Paint';
      // Denotes the beginning of the nestable async flow event FirstContentfulPaint.
      ph: 'b';
    }
  
    interface e extends Base {
      args: {
      
      };
      id: string;
      name: 'First Contentful Paint';
      // Denotes a step into the nestable async flow event FirstContentfulPaint.
      ph: 'e';
    }
  
    interface I extends Base {
      args: {
        frame: string;
      };
      name: 'firstContentfulPaint';
      // Denotes an event FirstContentfulPaint. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface R extends Base {
      args: {
        data?: {
          navigationId: string;
        };
        frame: string;
      };
      name: 'firstContentfulPaint';
      // Denotes a mark of the event FirstContentfulPaint.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FirstImagePaint {
    interface R extends Base {
      args: {
        data?: {
          navigationId: string;
        };
        frame: string;
      };
      name: 'firstImagePaint';
      // Denotes a mark of the event FirstImagePaint.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FirstLayout {
    interface R extends Base {
      args: {
        frame: string;
      };
      name: 'firstLayout';
      // Denotes a mark of the event FirstLayout.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FirstMeaningfulPaint {
    interface b extends Base {
      args: {
      
      };
      id: string;
      name: 'First Meaningful Paint';
      // Denotes the beginning of the nestable async flow event FirstMeaningfulPaint.
      ph: 'b';
    }
  
    interface e extends Base {
      args: {
      
      };
      id: string;
      name: 'First Meaningful Paint';
      // Denotes a step into the nestable async flow event FirstMeaningfulPaint.
      ph: 'e';
    }
  
    interface R extends Base {
      args: {
        afterUserInput?: number;
        data?: {
          navigationId: string;
        };
        frame: string;
      };
      name: 'firstMeaningfulPaint';
      // Denotes a mark of the event FirstMeaningfulPaint.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FirstMeaningfulPaintCandidate {
    interface R extends Base {
      args: {
        data: {
          navigationId: string;
        };
        frame: string;
      };
      name: 'firstMeaningfulPaintCandidate';
      // Denotes a mark of the event FirstMeaningfulPaintCandidate.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FirstPaint {
    interface I extends Base {
      args: {
        frame: string;
      };
      name: 'firstPaint';
      // Denotes an event FirstPaint. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface R extends Base {
      args: {
        data?: {
          navigationId: string;
        };
        frame: string;
      };
      name: 'firstPaint';
      // Denotes a mark of the event FirstPaint.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FirstTextPaint {
    interface R extends Base {
      args: {
        frame: string;
      };
      name: 'firstTextPaint';
      // Denotes a mark of the event FirstTextPaint.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FirstVisualChange {
    interface b extends Base {
      args: {
      
      };
      id: string;
      name: 'First Visual Change';
      // Denotes the beginning of the nestable async flow event FirstVisualChange.
      ph: 'b';
    }
  
    interface e extends Base {
      args: {
      
      };
      id: string;
      name: 'First Visual Change';
      // Denotes a step into the nestable async flow event FirstVisualChange.
      ph: 'e';
    }
  }

  namespace FooterEnd {
    interface R extends Base {
      args: {
        data: {
          navigationId: string;
        };
      };
      name: 'footerEnd';
      // Denotes a mark of the event FooterEnd.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FooterStart {
    interface R extends Base {
      args: {
        data: {
          navigationId: string;
        };
      };
      name: 'footerStart';
      // Denotes a mark of the event FooterStart.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FooterTime {
    interface b extends Base {
      args: {
      
      };
      id: string;
      name: 'footerTime';
      // Denotes the beginning of the nestable async flow event FooterTime.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
      
      };
      id: string;
      name: 'footerTime';
      // Denotes a step into the nestable async flow event FooterTime.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Frame_deferrable_tq {
    interface C extends Base {
      args: {
        value: number;
      };
      name: 'frame_deferrable_tq';
      // Denotes a counter for the event Frame_deferrable_tq.
      ph: 'C';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Frame_loading_control_tq {
    interface C extends Base {
      args: {
        value: number;
      };
      name: 'frame_loading_control_tq';
      // Denotes a counter for the event Frame_loading_control_tq.
      ph: 'C';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Frame_loading_tq {
    interface C extends Base {
      args: {
        value: number;
      };
      name: 'frame_loading_tq';
      // Denotes a counter for the event Frame_loading_tq.
      ph: 'C';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Frame_pausable_tq {
    interface C extends Base {
      args: {
        value: number;
      };
      name: 'frame_pausable_tq';
      // Denotes a counter for the event Frame_pausable_tq.
      ph: 'C';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Frame_throttleable_tq {
    interface C extends Base {
      args: {
        value: number;
      };
      name: 'frame_throttleable_tq';
      // Denotes a counter for the event Frame_throttleable_tq.
      ph: 'C';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Frame_unpausable_tq {
    interface C extends Base {
      args: {
        value: number;
      };
      name: 'frame_unpausable_tq';
      // Denotes a counter for the event Frame_unpausable_tq.
      ph: 'C';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameBlameContext {
    interface LP extends Base {
      args: {
      
      };
      id: string;
      name: 'FrameBlameContext';
      // Denotes entering a context of the event FrameBlameContext.
      ph: '(';
      scope: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface RP extends Base {
      args: {
      
      };
      id: string;
      name: 'FrameBlameContext';
      // Denotes leaving a context of the event FrameBlameContext.
      ph: ')';
      scope: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameCommittedInBrowser {
    interface I extends Base {
      args: {
        data: {
          frame: string;
          name: string;
          parent?: string;
          processId: number;
          url: string;
        };
      };
      name: 'FrameCommittedInBrowser';
      // Denotes an event FrameCommittedInBrowser. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameDeletedInBrowser {
    interface I extends Base {
      args: {
        data: {
          frame: string;
        };
      };
      name: 'FrameDeletedInBrowser';
      // Denotes an event FrameDeletedInBrowser. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameHostMsg_BeforeUnload_ACK {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'FrameHostMsg_BeforeUnload_ACK';
      // Denotes the end of the event FrameHostMsg_BeforeUnload_ACK.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameHostMsg_CheckCompleted {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'FrameHostMsg_CheckCompleted';
      // Denotes the end of the event FrameHostMsg_CheckCompleted.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameHostMsg_CookiesEnabled {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'FrameHostMsg_CookiesEnabled';
      // Denotes the end of the event FrameHostMsg_CookiesEnabled.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameHostMsg_CreateChildFrame {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'FrameHostMsg_CreateChildFrame';
      // Denotes the end of the event FrameHostMsg_CreateChildFrame.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameHostMsg_DidAddContentSecurityPolicies {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'FrameHostMsg_DidAddContentSecurityPolicies';
      // Denotes the end of the event FrameHostMsg_DidAddContentSecurityPolicies.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameHostMsg_DidAddMessageToConsole {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'FrameHostMsg_DidAddMessageToConsole';
      // Denotes the end of the event FrameHostMsg_DidAddMessageToConsole.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameHostMsg_DidChangeFrameOwnerProperties {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'FrameHostMsg_DidChangeFrameOwnerProperties';
      // Denotes the end of the event FrameHostMsg_DidChangeFrameOwnerProperties.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameHostMsg_DidChangeLoadProgress {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'FrameHostMsg_DidChangeLoadProgress';
      // Denotes the end of the event FrameHostMsg_DidChangeLoadProgress.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameHostMsg_DidFailLoadWithError {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'FrameHostMsg_DidFailLoadWithError';
      // Denotes the end of the event FrameHostMsg_DidFailLoadWithError.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameHostMsg_DidFinishDocumentLoad {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'FrameHostMsg_DidFinishDocumentLoad';
      // Denotes the end of the event FrameHostMsg_DidFinishDocumentLoad.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameHostMsg_DidFinishLoad {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'FrameHostMsg_DidFinishLoad';
      // Denotes the end of the event FrameHostMsg_DidFinishLoad.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameHostMsg_DidStopLoading {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'FrameHostMsg_DidStopLoading';
      // Denotes the end of the event FrameHostMsg_DidStopLoading.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameHostMsg_DispatchLoad {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'FrameHostMsg_DispatchLoad';
      // Denotes the end of the event FrameHostMsg_DispatchLoad.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameHostMsg_DocumentOnLoadCompleted {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'FrameHostMsg_DocumentOnLoadCompleted';
      // Denotes the end of the event FrameHostMsg_DocumentOnLoadCompleted.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameHostMsg_FocusedNodeChanged {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'FrameHostMsg_FocusedNodeChanged';
      // Denotes the end of the event FrameHostMsg_FocusedNodeChanged.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameHostMsg_ForwardResourceTimingToParent {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'FrameHostMsg_ForwardResourceTimingToParent';
      // Denotes the end of the event FrameHostMsg_ForwardResourceTimingToParent.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameHostMsg_FrameFocused {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'FrameHostMsg_FrameFocused';
      // Denotes the end of the event FrameHostMsg_FrameFocused.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameHostMsg_HittestData {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'FrameHostMsg_HittestData';
      // Denotes the end of the event FrameHostMsg_HittestData.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameHostMsg_RouteMessageEvent {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'FrameHostMsg_RouteMessageEvent';
      // Denotes the end of the event FrameHostMsg_RouteMessageEvent.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameHostMsg_SuddenTerminationDisablerChanged {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'FrameHostMsg_SuddenTerminationDisablerChanged';
      // Denotes the end of the event FrameHostMsg_SuddenTerminationDisablerChanged.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameHostMsg_SwapOut_ACK {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'FrameHostMsg_SwapOut_ACK';
      // Denotes the end of the event FrameHostMsg_SwapOut_ACK.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameHostMsg_SynchronizeVisualProperties {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'FrameHostMsg_SynchronizeVisualProperties';
      // Denotes the end of the event FrameHostMsg_SynchronizeVisualProperties.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameHostMsg_UpdatePageImportanceSignals {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'FrameHostMsg_UpdatePageImportanceSignals';
      // Denotes the end of the event FrameHostMsg_UpdatePageImportanceSignals.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameHostMsg_UpdateRenderThrottlingStatus {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'FrameHostMsg_UpdateRenderThrottlingStatus';
      // Denotes the end of the event FrameHostMsg_UpdateRenderThrottlingStatus.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameHostMsg_UpdateState {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'FrameHostMsg_UpdateState';
      // Denotes the end of the event FrameHostMsg_UpdateState.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameHostMsg_UpdateTitle {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'FrameHostMsg_UpdateTitle';
      // Denotes the end of the event FrameHostMsg_UpdateTitle.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameHostMsg_UpdateUserActivationState {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'FrameHostMsg_UpdateUserActivationState';
      // Denotes the end of the event FrameHostMsg_UpdateUserActivationState.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameHostMsg_UpdateViewportIntersection {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'FrameHostMsg_UpdateViewportIntersection';
      // Denotes the end of the event FrameHostMsg_UpdateViewportIntersection.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameHostMsg_VisibilityChanged {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'FrameHostMsg_VisibilityChanged';
      // Denotes the end of the event FrameHostMsg_VisibilityChanged.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameLoader {
    interface D extends Base {
      args: {
      
      };
      id: string;
      name: 'FrameLoader';
      // Denotes a delete object of the event FrameLoader.
      ph: 'D';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface N extends Base {
      args: {
      
      };
      id: string;
      name: 'FrameLoader';
      // Denotes a create object of the event FrameLoader.
      ph: 'N';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface O extends Base {
      args: {
        snapshot: {
          documentLoaderURL: string;
          frame: {
            id_ref: string;
          };
          isLoadingMainFrame: boolean;
          provisionalDocumentLoaderURL: string;
          stateMachine: string;
        };
      };
      id: string;
      name: 'FrameLoader';
      // Denotes a snapshot object of the event FrameLoader.
      ph: 'O';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameMsg_AddContentSecurityPolicies {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'FrameMsg_AddContentSecurityPolicies';
      // Denotes the end of the event FrameMsg_AddContentSecurityPolicies.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameMsg_Delete {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'FrameMsg_Delete';
      // Denotes the end of the event FrameMsg_Delete.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameMsg_DeleteProxy {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'FrameMsg_DeleteProxy';
      // Denotes the end of the event FrameMsg_DeleteProxy.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameMsg_DidStartLoading {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'FrameMsg_DidStartLoading';
      // Denotes the end of the event FrameMsg_DidStartLoading.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameMsg_DidStopLoading {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'FrameMsg_DidStopLoading';
      // Denotes the end of the event FrameMsg_DidStopLoading.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameMsg_DidUpdateFramePolicy {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'FrameMsg_DidUpdateFramePolicy';
      // Denotes the end of the event FrameMsg_DidUpdateFramePolicy.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameMsg_DidUpdateOrigin {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'FrameMsg_DidUpdateOrigin';
      // Denotes the end of the event FrameMsg_DidUpdateOrigin.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameMsg_PostMessageEvent {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'FrameMsg_PostMessageEvent';
      // Denotes the end of the event FrameMsg_PostMessageEvent.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameMsg_ResetContentSecurityPolicy {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'FrameMsg_ResetContentSecurityPolicy';
      // Denotes the end of the event FrameMsg_ResetContentSecurityPolicy.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameMsg_SetAccessibilityMode {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'FrameMsg_SetAccessibilityMode';
      // Denotes the end of the event FrameMsg_SetAccessibilityMode.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameMsg_SetFrameOwnerProperties {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'FrameMsg_SetFrameOwnerProperties';
      // Denotes the end of the event FrameMsg_SetFrameOwnerProperties.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameMsg_UpdateUserActivationState {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'FrameMsg_UpdateUserActivationState';
      // Denotes the end of the event FrameMsg_UpdateUserActivationState.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FramePresented {
    interface R extends Base {
      args: {
        environment: string;
      };
      name: 'FramePresented';
      // Denotes a mark of the event FramePresented.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameScheduler {
    type FramePaused = 
      TraceEvent.FrameScheduler.FramePaused.F |
      TraceEvent.FrameScheduler.FramePaused.S |
      TraceEvent.FrameScheduler.FramePaused.T;
  
    type FrameVisible = 
      TraceEvent.FrameScheduler.FrameVisible.F |
      TraceEvent.FrameScheduler.FrameVisible.S |
      TraceEvent.FrameScheduler.FrameVisible.T;
  
    type HasActiveConnection = 
      TraceEvent.FrameScheduler.HasActiveConnection.F |
      TraceEvent.FrameScheduler.HasActiveConnection.S |
      TraceEvent.FrameScheduler.HasActiveConnection.T;
  
    type KeepActive = 
      TraceEvent.FrameScheduler.KeepActive.F |
      TraceEvent.FrameScheduler.KeepActive.S |
      TraceEvent.FrameScheduler.KeepActive.T;
  
    type Origin = 
      TraceEvent.FrameScheduler.Origin.F |
      TraceEvent.FrameScheduler.Origin.S |
      TraceEvent.FrameScheduler.Origin.T;
  
    type PageFrozen = 
      TraceEvent.FrameScheduler.PageFrozen.F |
      TraceEvent.FrameScheduler.PageFrozen.S |
      TraceEvent.FrameScheduler.PageFrozen.T;
  
    type PageVisibility = 
      TraceEvent.FrameScheduler.PageVisibility.F |
      TraceEvent.FrameScheduler.PageVisibility.S |
      TraceEvent.FrameScheduler.PageVisibility.T;
  
    type SubResourceLoadingPaused = 
      TraceEvent.FrameScheduler.SubResourceLoadingPaused.F |
      TraceEvent.FrameScheduler.SubResourceLoadingPaused.S |
      TraceEvent.FrameScheduler.SubResourceLoadingPaused.T;
  
    type TaskQueuesThrottled = 
      TraceEvent.FrameScheduler.TaskQueuesThrottled.F |
      TraceEvent.FrameScheduler.TaskQueuesThrottled.S |
      TraceEvent.FrameScheduler.TaskQueuesThrottled.T;
  
    type URL = 
      TraceEvent.FrameScheduler.URL.F |
      TraceEvent.FrameScheduler.URL.S |
      TraceEvent.FrameScheduler.URL.T;
  
    namespace FramePaused {
      interface F extends Base {
        args: {
        
        };
        id: string;
        name: 'FrameScheduler.FramePaused';
        // Denotes the ending of the async event FramePaused.
        ph: 'F';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface S extends Base {
        args: {
        
        };
        id: string;
        name: 'FrameScheduler.FramePaused';
        // Denotes the beginning of the async event FramePaused.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface T extends Base {
        args: {
          step: string;
        };
        id: string;
        name: 'FrameScheduler.FramePaused';
        // Denotes a step into the async event FramePaused.
        ph: 'T';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace FrameVisible {
      interface F extends Base {
        args: {
        
        };
        id: string;
        name: 'FrameScheduler.FrameVisible';
        // Denotes the ending of the async event FrameVisible.
        ph: 'F';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface S extends Base {
        args: {
        
        };
        id: string;
        name: 'FrameScheduler.FrameVisible';
        // Denotes the beginning of the async event FrameVisible.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface T extends Base {
        args: {
          step: string;
        };
        id: string;
        name: 'FrameScheduler.FrameVisible';
        // Denotes a step into the async event FrameVisible.
        ph: 'T';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace HasActiveConnection {
      interface F extends Base {
        args: {
        
        };
        id: string;
        name: 'FrameScheduler.HasActiveConnection';
        // Denotes the ending of the async event HasActiveConnection.
        ph: 'F';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface S extends Base {
        args: {
        
        };
        id: string;
        name: 'FrameScheduler.HasActiveConnection';
        // Denotes the beginning of the async event HasActiveConnection.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface T extends Base {
        args: {
          step: string;
        };
        id: string;
        name: 'FrameScheduler.HasActiveConnection';
        // Denotes a step into the async event HasActiveConnection.
        ph: 'T';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace KeepActive {
      interface F extends Base {
        args: {
        
        };
        id: string;
        name: 'FrameScheduler.KeepActive';
        // Denotes the ending of the async event KeepActive.
        ph: 'F';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface S extends Base {
        args: {
        
        };
        id: string;
        name: 'FrameScheduler.KeepActive';
        // Denotes the beginning of the async event KeepActive.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface T extends Base {
        args: {
          step: string;
        };
        id: string;
        name: 'FrameScheduler.KeepActive';
        // Denotes a step into the async event KeepActive.
        ph: 'T';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Origin {
      interface F extends Base {
        args: {
        
        };
        id: string;
        name: 'FrameScheduler.Origin';
        // Denotes the ending of the async event Origin.
        ph: 'F';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface S extends Base {
        args: {
        
        };
        id: string;
        name: 'FrameScheduler.Origin';
        // Denotes the beginning of the async event Origin.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface T extends Base {
        args: {
          step: string;
        };
        id: string;
        name: 'FrameScheduler.Origin';
        // Denotes a step into the async event Origin.
        ph: 'T';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PageFrozen {
      interface F extends Base {
        args: {
        
        };
        id: string;
        name: 'FrameScheduler.PageFrozen';
        // Denotes the ending of the async event PageFrozen.
        ph: 'F';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface S extends Base {
        args: {
        
        };
        id: string;
        name: 'FrameScheduler.PageFrozen';
        // Denotes the beginning of the async event PageFrozen.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface T extends Base {
        args: {
          step: string;
        };
        id: string;
        name: 'FrameScheduler.PageFrozen';
        // Denotes a step into the async event PageFrozen.
        ph: 'T';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PageVisibility {
      interface F extends Base {
        args: {
        
        };
        id: string;
        name: 'FrameScheduler.PageVisibility';
        // Denotes the ending of the async event PageVisibility.
        ph: 'F';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface S extends Base {
        args: {
        
        };
        id: string;
        name: 'FrameScheduler.PageVisibility';
        // Denotes the beginning of the async event PageVisibility.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface T extends Base {
        args: {
          step: string;
        };
        id: string;
        name: 'FrameScheduler.PageVisibility';
        // Denotes a step into the async event PageVisibility.
        ph: 'T';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SubResourceLoadingPaused {
      interface F extends Base {
        args: {
        
        };
        id: string;
        name: 'FrameScheduler.SubResourceLoadingPaused';
        // Denotes the ending of the async event SubResourceLoadingPaused.
        ph: 'F';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface S extends Base {
        args: {
        
        };
        id: string;
        name: 'FrameScheduler.SubResourceLoadingPaused';
        // Denotes the beginning of the async event SubResourceLoadingPaused.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface T extends Base {
        args: {
          step: string;
        };
        id: string;
        name: 'FrameScheduler.SubResourceLoadingPaused';
        // Denotes a step into the async event SubResourceLoadingPaused.
        ph: 'T';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace TaskQueuesThrottled {
      interface F extends Base {
        args: {
        
        };
        id: string;
        name: 'FrameScheduler.TaskQueuesThrottled';
        // Denotes the ending of the async event TaskQueuesThrottled.
        ph: 'F';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface S extends Base {
        args: {
        
        };
        id: string;
        name: 'FrameScheduler.TaskQueuesThrottled';
        // Denotes the beginning of the async event TaskQueuesThrottled.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface T extends Base {
        args: {
          step: string;
        };
        id: string;
        name: 'FrameScheduler.TaskQueuesThrottled';
        // Denotes a step into the async event TaskQueuesThrottled.
        ph: 'T';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace URL {
      interface F extends Base {
        args: {
        
        };
        id: string;
        name: 'FrameScheduler.URL';
        // Denotes the ending of the async event URL.
        ph: 'F';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface S extends Base {
        args: {
        
        };
        id: string;
        name: 'FrameScheduler.URL';
        // Denotes the beginning of the async event URL.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface T extends Base {
        args: {
          step: string;
        };
        id: string;
        name: 'FrameScheduler.URL';
        // Denotes a step into the async event URL.
        ph: 'T';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace FrameStartedLoading {
    interface I extends Base {
      args: {
        frame: string;
      };
      name: 'FrameStartedLoading';
      // Denotes an event FrameStartedLoading. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameTreeNode {
    type DidStartLoading = 
      TraceEvent.FrameTreeNode.DidStartLoading.X;
  
    type DidStopLoading = 
      TraceEvent.FrameTreeNode.DidStopLoading.X;
  
    namespace DidStartLoading {
      interface X extends Base {
        args: {
          frame_tree_node: number;
          'to different document': boolean;
        };
        // Duration.
        dur: number;
        name: 'FrameTreeNode::DidStartLoading';
        // Denotes the end of the event DidStartLoading.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidStopLoading {
      interface X extends Base {
        args: {
          frame_tree_node: number;
        };
        // Duration.
        dur: number;
        name: 'FrameTreeNode::DidStopLoading';
        // Denotes the end of the event DidStopLoading.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    interface N extends Base {
      args: {
      
      };
      id: string;
      name: 'FrameTreeNode';
      // Denotes a create object of the event FrameTreeNode.
      ph: 'N';
      scope: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface O extends Base {
      args: {
        snapshot: {
          parent?: {
            id_ref: string;
            scope: string;
          };
          renderFrame?: {
            id_ref: string;
            pid_ref: number;
            scope: string;
          };
          url?: string;
        };
      };
      id: string;
      name: 'FrameTreeNode';
      // Denotes a snapshot object of the event FrameTreeNode.
      ph: 'O';
      scope: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FrameView {
    type Layout = 
      TraceEvent.FrameView.Layout.X;
  
    type PerformLayout = 
      TraceEvent.FrameView.PerformLayout.B |
      TraceEvent.FrameView.PerformLayout.E;
  
    type PerformPostLayoutTasks = 
      TraceEvent.FrameView.PerformPostLayoutTasks.X;
  
    type PerformPreLayoutTasks = 
      TraceEvent.FrameView.PerformPreLayoutTasks.X;
  
    namespace Layout {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'FrameView::layout';
        // Denotes the end of the event Layout.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PerformLayout {
      interface B extends Base {
        args: {
          contentsHeightBeforeLayout: number;
        };
        name: 'FrameView::performLayout';
        // Denotes the beginning of the event PerformLayout.
        ph: 'B';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface E extends Base {
        args: {
          counters: {
            LayoutAnalyzerStackMaximumDepth?: number;
            LayoutBlockHeightChanged?: number;
            LayoutBlockSizeChanged?: number;
            LayoutBlockSizeDidNotChange?: number;
            LayoutBlockWidthChanged?: number;
            LayoutObjectsThatAreFloating?: number;
            LayoutObjectsThatAreOutOfFlowPositioned?: number;
            LayoutObjectsThatAreTableCells?: number;
            LayoutObjectsThatHadNeverHadLayout?: number;
            LayoutObjectsThatHaveALayer?: number;
            LayoutObjectsThatNeedLayoutForThemselves?: number;
            TotalLayoutObjectsThatWereLaidOut?: number;
            approximateBlankCharacterCount: number;
            contentsHeightAfterLayout: number;
            frame: string;
            host: string;
            visibleHeight: number;
          };
        };
        name: 'FrameView::performLayout';
        // Denotes the ending of the event PerformLayout.
        ph: 'E';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PerformPostLayoutTasks {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'FrameView::performPostLayoutTasks';
        // Denotes the end of the event PerformPostLayoutTasks.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PerformPreLayoutTasks {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'FrameView::performPreLayoutTasks';
        // Denotes the end of the event PerformPreLayoutTasks.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace FullEvacuator {
    type RawEvacuatePage = 
      TraceEvent.FullEvacuator.RawEvacuatePage.X;
  
    namespace RawEvacuatePage {
      interface X extends Base {
        args: {
          evacuation_mode: number;
        };
        // Duration.
        dur: number;
        name: 'FullEvacuator::RawEvacuatePage';
        // Denotes the end of the event RawEvacuatePage.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace FullImage {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'FullImage';
      // Denotes the end of the event FullImage.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace FunctionCall {
    interface B extends Base {
      args: {
        data: {
          columnNumber?: number;
          frame: string;
          functionName: string;
          lineNumber: number;
          scriptId: string;
          url: string;
        };
      };
      name: 'FunctionCall';
      // Denotes the beginning of the event FunctionCall.
      ph: 'B';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface E extends Base {
      args: {
      
      };
      name: 'FunctionCall';
      // Denotes the ending of the event FunctionCall.
      ph: 'E';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace GestureProvider {
    type InitGestureDetectors = 
      TraceEvent.GestureProvider.InitGestureDetectors.X;
  
    type OnTouchEvent = 
      TraceEvent.GestureProvider.OnTouchEvent.X;
  
    namespace InitGestureDetectors {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GestureProvider::InitGestureDetectors';
        // Denotes the end of the event InitGestureDetectors.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnTouchEvent {
      interface X extends Base {
        args: {
          action: string;
        };
        // Duration.
        dur: number;
        name: 'GestureProvider::OnTouchEvent';
        // Denotes the end of the event OnTouchEvent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace GLContextCGL {
    type BackpressureFenceCreate = 
      TraceEvent.GLContextCGL.BackpressureFenceCreate.X;
  
    type BackpressureFenceWait = 
      TraceEvent.GLContextCGL.BackpressureFenceWait.X;
  
    type MakeCurrent = 
      TraceEvent.GLContextCGL.MakeCurrent.X;
  
    namespace BackpressureFenceCreate {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GLContextCGL::BackpressureFenceCreate';
        // Denotes the end of the event BackpressureFenceCreate.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BackpressureFenceWait {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GLContextCGL::BackpressureFenceWait';
        // Denotes the end of the event BackpressureFenceWait.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace MakeCurrent {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GLContextCGL::MakeCurrent';
        // Denotes the end of the event MakeCurrent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace GLES2 {
    type Finish = 
      TraceEvent.GLES2.Finish.X;
  
    type GetGLError = 
      TraceEvent.GLES2.GetGLError.X;
  
    type GetShaderPrecisionFormat = 
      TraceEvent.GLES2.GetShaderPrecisionFormat.X;
  
    type GetString = 
      TraceEvent.GLES2.GetString.X;
  
    type PostSubBufferCHROMIUM = 
      TraceEvent.GLES2.PostSubBufferCHROMIUM.X;
  
    namespace Finish {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GLES2::Finish';
        // Denotes the end of the event Finish.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GetGLError {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GLES2::GetGLError';
        // Denotes the end of the event GetGLError.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GetShaderPrecisionFormat {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GLES2::GetShaderPrecisionFormat';
        // Denotes the end of the event GetShaderPrecisionFormat.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GetString {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GLES2::GetString';
        // Denotes the end of the event GetString.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PostSubBufferCHROMIUM {
      interface X extends Base {
        args: {
          height: number;
          width: number;
        };
        // Duration.
        dur: number;
        name: 'GLES2::PostSubBufferCHROMIUM';
        // Denotes the end of the event PostSubBufferCHROMIUM.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace GLES2CommandBufferStub {
    type Initialize = 
      TraceEvent.GLES2CommandBufferStub.Initialize.X;
  
    namespace Initialize {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GLES2CommandBufferStub::Initialize';
        // Denotes the end of the event Initialize.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace GLES2DecoderImpl {
    type ClearLevel = 
      TraceEvent.GLES2DecoderImpl.ClearLevel.X;
  
    type ClearLevelUsingGL = 
      TraceEvent.GLES2DecoderImpl.ClearLevelUsingGL.X;
  
    type DoCompileShader = 
      TraceEvent.GLES2DecoderImpl.DoCompileShader.X;
  
    type DoCreateAndConsumeTextureINTERNAL = 
      TraceEvent.GLES2DecoderImpl.DoCreateAndConsumeTextureINTERNAL.X;
  
    type DoLinkProgram = 
      TraceEvent.GLES2DecoderImpl.DoLinkProgram.X;
  
    type DoTexStorage2D = 
      TraceEvent.GLES2DecoderImpl.DoTexStorage2D.X;
  
    type DoTexStorage2DImageCHROMIUM = 
      TraceEvent.GLES2DecoderImpl.DoTexStorage2DImageCHROMIUM.X;
  
    type HandlePostSubBufferCHROMIUM = 
      TraceEvent.GLES2DecoderImpl.HandlePostSubBufferCHROMIUM.X;
  
    type HandleTexImage2D = 
      TraceEvent.GLES2DecoderImpl.HandleTexImage2D.X;
  
    type HandleTexSubImage2D = 
      TraceEvent.GLES2DecoderImpl.HandleTexSubImage2D.X;
  
    type Initialize = 
      TraceEvent.GLES2DecoderImpl.Initialize.X;
  
    type InitializeShaderTranslator = 
      TraceEvent.GLES2DecoderImpl.InitializeShaderTranslator.X;
  
    type RestoreState = 
      TraceEvent.GLES2DecoderImpl.RestoreState.X;
  
    namespace ClearLevel {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GLES2DecoderImpl::ClearLevel';
        // Denotes the end of the event ClearLevel.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ClearLevelUsingGL {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GLES2DecoderImpl::ClearLevelUsingGL';
        // Denotes the end of the event ClearLevelUsingGL.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoCompileShader {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GLES2DecoderImpl::DoCompileShader';
        // Denotes the end of the event DoCompileShader.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoCreateAndConsumeTextureINTERNAL {
      interface X extends Base {
        args: {
          context: string;
          'mailbox[0]': number;
        };
        // Duration.
        dur: number;
        name: 'GLES2DecoderImpl::DoCreateAndConsumeTextureINTERNAL';
        // Denotes the end of the event DoCreateAndConsumeTextureINTERNAL.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoLinkProgram {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GLES2DecoderImpl::DoLinkProgram';
        // Denotes the end of the event DoLinkProgram.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoTexStorage2D {
      interface X extends Base {
        args: {
          height: number;
          width: number;
        };
        // Duration.
        dur: number;
        name: 'GLES2DecoderImpl::DoTexStorage2D';
        // Denotes the end of the event DoTexStorage2D.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoTexStorage2DImageCHROMIUM {
      interface X extends Base {
        args: {
          height: number;
          width: number;
        };
        // Duration.
        dur: number;
        name: 'GLES2DecoderImpl::DoTexStorage2DImageCHROMIUM';
        // Denotes the end of the event DoTexStorage2DImageCHROMIUM.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace HandlePostSubBufferCHROMIUM {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GLES2DecoderImpl::HandlePostSubBufferCHROMIUM';
        // Denotes the end of the event HandlePostSubBufferCHROMIUM.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace HandleTexImage2D {
      interface X extends Base {
        args: {
          height: number;
          width: number;
        };
        // Duration.
        dur: number;
        name: 'GLES2DecoderImpl::HandleTexImage2D';
        // Denotes the end of the event HandleTexImage2D.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace HandleTexSubImage2D {
      interface X extends Base {
        args: {
          height: number;
          width: number;
        };
        // Duration.
        dur: number;
        name: 'GLES2DecoderImpl::HandleTexSubImage2D';
        // Denotes the end of the event HandleTexSubImage2D.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Initialize {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GLES2DecoderImpl::Initialize';
        // Denotes the end of the event Initialize.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace InitializeShaderTranslator {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GLES2DecoderImpl::InitializeShaderTranslator';
        // Denotes the end of the event InitializeShaderTranslator.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RestoreState {
      interface X extends Base {
        args: {
          context: string;
        };
        // Duration.
        dur: number;
        name: 'GLES2DecoderImpl::RestoreState';
        // Denotes the end of the event RestoreState.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace GLES2Implementation {
    type CheckFramebufferStatus = 
      TraceEvent.GLES2Implementation.CheckFramebufferStatus.X;
  
    type GetIntegerv = 
      TraceEvent.GLES2Implementation.GetIntegerv.X;
  
    type Initialize = 
      TraceEvent.GLES2Implementation.Initialize.X;
  
    type SetAggressivelyFreeResources = 
      TraceEvent.GLES2Implementation.SetAggressivelyFreeResources.X;
  
    namespace CheckFramebufferStatus {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GLES2Implementation::CheckFramebufferStatus';
        // Denotes the end of the event CheckFramebufferStatus.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GetIntegerv {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GLES2Implementation::GetIntegerv';
        // Denotes the end of the event GetIntegerv.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Initialize {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GLES2Implementation::Initialize';
        // Denotes the end of the event Initialize.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetAggressivelyFreeResources {
      interface X extends Base {
        args: {
          aggressively_free_resources: boolean;
        };
        // Duration.
        dur: number;
        name: 'GLES2Implementation::SetAggressivelyFreeResources';
        // Denotes the end of the event SetAggressivelyFreeResources.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace GLFence {
    type HasCompleted = 
      TraceEvent.GLFence.HasCompleted.X;
  
    namespace HasCompleted {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GLFence::HasCompleted';
        // Denotes the end of the event HasCompleted.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace GLImageIOSurface {
    type BindTexImage = 
      TraceEvent.GLImageIOSurface.BindTexImage.X;
  
    namespace BindTexImage {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GLImageIOSurface::BindTexImage';
        // Denotes the end of the event BindTexImage.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace GlobalMemoryDump {
    type Computation = 
      TraceEvent.GlobalMemoryDump.Computation.X;
  
    namespace Computation {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GlobalMemoryDump.Computation';
        // Denotes the end of the event Computation.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    interface b extends Base {
      args: {
        dump_type: string;
        level_of_detail: string;
      };
      id2: {
        local: string;
      };
      name: 'GlobalMemoryDump';
      // Denotes the beginning of the nestable async flow event GlobalMemoryDump.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
        dump_guid: string;
        success: boolean;
      };
      id2: {
        local: string;
      };
      name: 'GlobalMemoryDump';
      // Denotes a step into the nestable async flow event GlobalMemoryDump.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace GLRenderer {
    type BeginDrawingFrame = 
      TraceEvent.GLRenderer.BeginDrawingFrame.X;
  
    type InitializeSharedObjects = 
      TraceEvent.GLRenderer.InitializeSharedObjects.X;
  
    type SwapBuffers = 
      TraceEvent.GLRenderer.SwapBuffers.X;
  
    namespace BeginDrawingFrame {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GLRenderer::BeginDrawingFrame';
        // Denotes the end of the event BeginDrawingFrame.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace InitializeSharedObjects {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GLRenderer::InitializeSharedObjects';
        // Denotes the end of the event InitializeSharedObjects.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SwapBuffers {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GLRenderer::SwapBuffers';
        // Denotes the end of the event SwapBuffers.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace GlResizeChromium {
    interface X extends Base {
      args: {
        height: number;
        width: number;
      };
      // Duration.
      dur: number;
      name: 'glResizeChromium';
      // Denotes the end of the event GlResizeChromium.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Goog_123_3_1_end {
    interface R extends Base {
      args: {
      
      };
      name: 'goog_123_3_1_end';
      // Denotes a mark of the event Goog_123_3_1_end.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Goog_123_3_1_start {
    interface R extends Base {
      args: {
      
      };
      name: 'goog_123_3_1_start';
      // Denotes a mark of the event Goog_123_3_1_start.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Goog_123_3_1 {
    interface b extends Base {
      args: {
      
      };
      id: string;
      name: 'goog_123_3_1';
      // Denotes the beginning of the nestable async flow event Goog_123_3_1.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
      
      };
      id: string;
      name: 'goog_123_3_1';
      // Denotes a step into the nestable async flow event Goog_123_3_1.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Gpu {
    type EstablishGpuChannelSync = 
      TraceEvent.Gpu.EstablishGpuChannelSync.X;
  
    type State = 
      TraceEvent.Gpu.State.D |
      TraceEvent.Gpu.State.N |
      TraceEvent.Gpu.State.O;
  
    namespace EstablishGpuChannelSync {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Gpu::EstablishGpuChannelSync';
        // Denotes the end of the event EstablishGpuChannelSync.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace State {
      interface D extends Base {
        args: {
        
        };
        id: string;
        name: 'gpu::State';
        // Denotes a delete object of the event State.
        ph: 'D';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface N extends Base {
        args: {
        
        };
        id: string;
        name: 'gpu::State';
        // Denotes a create object of the event State.
        ph: 'N';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface O extends Base {
        args: {
          snapshot: {
          
          };
        };
        id: string;
        name: 'gpu::State';
        // Denotes a snapshot object of the event State.
        ph: 'O';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace GpuChannel {
    type OnCreateCommandBuffer = 
      TraceEvent.GpuChannel.OnCreateCommandBuffer.X;
  
    type OnDestroyCommandBuffer = 
      TraceEvent.GpuChannel.OnDestroyCommandBuffer.X;
  
    namespace OnCreateCommandBuffer {
      interface X extends Base {
        args: {
          offscreen: boolean;
          route_id: number;
        };
        // Duration.
        dur: number;
        name: 'GpuChannel::OnCreateCommandBuffer';
        // Denotes the end of the event OnCreateCommandBuffer.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnDestroyCommandBuffer {
      interface X extends Base {
        args: {
          route_id: number;
        };
        // Duration.
        dur: number;
        name: 'GpuChannel::OnDestroyCommandBuffer';
        // Denotes the end of the event OnDestroyCommandBuffer.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace GpuChannelHost {
    type CreateViewCommandBuffer = 
      TraceEvent.GpuChannelHost.CreateViewCommandBuffer.X;
  
    type Send = 
      TraceEvent.GpuChannelHost.Send.X;
  
    namespace CreateViewCommandBuffer {
      interface X extends Base {
        args: {
          surface_handle: number;
        };
        // Duration.
        dur: number;
        name: 'GpuChannelHost::CreateViewCommandBuffer';
        // Denotes the end of the event CreateViewCommandBuffer.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Send {
      interface X extends Base {
        args: {
          class: number;
          line: number;
        };
        // Duration.
        dur: number;
        name: 'GpuChannelHost::Send';
        // Denotes the end of the event Send.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace GpuChannelMsg_CreateCommandBuffer {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'GpuChannelMsg_CreateCommandBuffer';
      // Denotes the end of the event GpuChannelMsg_CreateCommandBuffer.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace GpuChannelMsg_CreateSharedImage {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'GpuChannelMsg_CreateSharedImage';
      // Denotes the end of the event GpuChannelMsg_CreateSharedImage.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace GpuChannelMsg_CreateSharedImageWithData {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'GpuChannelMsg_CreateSharedImageWithData';
      // Denotes the end of the event GpuChannelMsg_CreateSharedImageWithData.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace GpuChannelMsg_DestroyCommandBuffer {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'GpuChannelMsg_DestroyCommandBuffer';
      // Denotes the end of the event GpuChannelMsg_DestroyCommandBuffer.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace GpuChannelMsg_DestroySharedImage {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'GpuChannelMsg_DestroySharedImage';
      // Denotes the end of the event GpuChannelMsg_DestroySharedImage.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace GpuChannelMsg_RegisterSharedImageUploadBuffer {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'GpuChannelMsg_RegisterSharedImageUploadBuffer';
      // Denotes the end of the event GpuChannelMsg_RegisterSharedImageUploadBuffer.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace GpuCommandBufferMsg_AsyncFlush {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'GpuCommandBufferMsg_AsyncFlush';
      // Denotes the end of the event GpuCommandBufferMsg_AsyncFlush.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace GpuCommandBufferMsg_DestroyTransferBuffer {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'GpuCommandBufferMsg_DestroyTransferBuffer';
      // Denotes the end of the event GpuCommandBufferMsg_DestroyTransferBuffer.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace GpuCommandBufferMsg_GetChannelToken {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'GpuCommandBufferMsg_GetChannelToken';
      // Denotes the end of the event GpuCommandBufferMsg_GetChannelToken.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace GpuCommandBufferMsg_RegisterTransferBuffer {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'GpuCommandBufferMsg_RegisterTransferBuffer';
      // Denotes the end of the event GpuCommandBufferMsg_RegisterTransferBuffer.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace GpuCommandBufferMsg_SetGetBuffer {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'GpuCommandBufferMsg_SetGetBuffer';
      // Denotes the end of the event GpuCommandBufferMsg_SetGetBuffer.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace GpuCommandBufferMsg_WaitForGetOffsetInRange {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'GpuCommandBufferMsg_WaitForGetOffsetInRange';
      // Denotes the end of the event GpuCommandBufferMsg_WaitForGetOffsetInRange.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace GpuHostImpl {
    type CreateChannelCache = 
      TraceEvent.GpuHostImpl.CreateChannelCache.X;
  
    type DidDestroyChannel = 
      TraceEvent.GpuHostImpl.DidDestroyChannel.X;
  
    type EstablishGpuChannel = 
      TraceEvent.GpuHostImpl.EstablishGpuChannel.X;
  
    type OnChannelEstablished = 
      TraceEvent.GpuHostImpl.OnChannelEstablished.X;
  
    namespace CreateChannelCache {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GpuHostImpl::CreateChannelCache';
        // Denotes the end of the event CreateChannelCache.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidDestroyChannel {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GpuHostImpl::DidDestroyChannel';
        // Denotes the end of the event DidDestroyChannel.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace EstablishGpuChannel {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GpuHostImpl::EstablishGpuChannel';
        // Denotes the end of the event EstablishGpuChannel.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnChannelEstablished {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GpuHostImpl::OnChannelEstablished';
        // Denotes the end of the event OnChannelEstablished.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace GpuImageDecodeCache {
    type CreateImageData = 
      TraceEvent.GpuImageDecodeCache.CreateImageData.X;
  
    type DrawWithImageFinished = 
      TraceEvent.GpuImageDecodeCache.DrawWithImageFinished.X;
  
    type EnsureCapacity = 
      TraceEvent.GpuImageDecodeCache.EnsureCapacity.X;
  
    type GetDecodedImageForDraw = 
      TraceEvent.GpuImageDecodeCache.GetDecodedImageForDraw.X;
  
    type GetImageDataForDrawImage = 
      TraceEvent.GpuImageDecodeCache.GetImageDataForDrawImage.X;
  
    type GetImageDecodeTaskAndRef = 
      TraceEvent.GpuImageDecodeCache.GetImageDecodeTaskAndRef.X;
  
    type GetTaskForImageAndRef = 
      TraceEvent.GpuImageDecodeCache.GetTaskForImageAndRef.X;
  
    type OnImageUploadTaskCompleted = 
      TraceEvent.GpuImageDecodeCache.OnImageUploadTaskCompleted.X;
  
    type OnMemoryDump = 
      TraceEvent.GpuImageDecodeCache.OnMemoryDump.X;
  
    type ReduceCacheUsage = 
      TraceEvent.GpuImageDecodeCache.ReduceCacheUsage.X;
  
    type RefImage = 
      TraceEvent.GpuImageDecodeCache.RefImage.X;
  
    type RefImageDecode = 
      TraceEvent.GpuImageDecodeCache.RefImageDecode.X;
  
    type SetShouldAggressivelyFreeResources = 
      TraceEvent.GpuImageDecodeCache.SetShouldAggressivelyFreeResources.X;
  
    type UnrefImage = 
      TraceEvent.GpuImageDecodeCache.UnrefImage.X;
  
    type UnrefImageDecode = 
      TraceEvent.GpuImageDecodeCache.UnrefImageDecode.X;
  
    type UploadImage = 
      TraceEvent.GpuImageDecodeCache.UploadImage.X;
  
    namespace CreateImageData {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GpuImageDecodeCache::CreateImageData';
        // Denotes the end of the event CreateImageData.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DrawWithImageFinished {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GpuImageDecodeCache::DrawWithImageFinished';
        // Denotes the end of the event DrawWithImageFinished.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace EnsureCapacity {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GpuImageDecodeCache::EnsureCapacity';
        // Denotes the end of the event EnsureCapacity.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GetDecodedImageForDraw {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GpuImageDecodeCache::GetDecodedImageForDraw';
        // Denotes the end of the event GetDecodedImageForDraw.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GetImageDataForDrawImage {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GpuImageDecodeCache::GetImageDataForDrawImage';
        // Denotes the end of the event GetImageDataForDrawImage.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GetImageDecodeTaskAndRef {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GpuImageDecodeCache::GetImageDecodeTaskAndRef';
        // Denotes the end of the event GetImageDecodeTaskAndRef.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GetTaskForImageAndRef {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GpuImageDecodeCache::GetTaskForImageAndRef';
        // Denotes the end of the event GetTaskForImageAndRef.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnImageUploadTaskCompleted {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GpuImageDecodeCache::OnImageUploadTaskCompleted';
        // Denotes the end of the event OnImageUploadTaskCompleted.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnMemoryDump {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GpuImageDecodeCache::OnMemoryDump';
        // Denotes the end of the event OnMemoryDump.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ReduceCacheUsage {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GpuImageDecodeCache::ReduceCacheUsage';
        // Denotes the end of the event ReduceCacheUsage.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RefImage {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GpuImageDecodeCache::RefImage';
        // Denotes the end of the event RefImage.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RefImageDecode {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GpuImageDecodeCache::RefImageDecode';
        // Denotes the end of the event RefImageDecode.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetShouldAggressivelyFreeResources {
      interface X extends Base {
        args: {
          agressive_free_resources: boolean;
        };
        // Duration.
        dur: number;
        name: 'GpuImageDecodeCache::SetShouldAggressivelyFreeResources';
        // Denotes the end of the event SetShouldAggressivelyFreeResources.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UnrefImage {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GpuImageDecodeCache::UnrefImage';
        // Denotes the end of the event UnrefImage.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UnrefImageDecode {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GpuImageDecodeCache::UnrefImageDecode';
        // Denotes the end of the event UnrefImageDecode.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UploadImage {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GpuImageDecodeCache::UploadImage';
        // Denotes the end of the event UploadImage.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace GpuRasterBuffer {
    type Playback = 
      TraceEvent.GpuRasterBuffer.Playback.X;
  
    namespace Playback {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GpuRasterBuffer::Playback';
        // Denotes the end of the event Playback.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace GpuRasterization {
    interface b extends Base {
      args: {
        channel: string;
        gl_category: string;
      };
      id: string;
      name: 'GpuRasterization';
      // Denotes the beginning of the nestable async flow event GpuRasterization.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
      use_async_tts: number;
    }
  
    interface e extends Base {
      args: {
        channel: string;
        gl_category: string;
      };
      id: string;
      name: 'GpuRasterization';
      // Denotes a step into the nestable async flow event GpuRasterization.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
      use_async_tts: number;
    }
  
    interface F extends Base {
      args: {
        channel: string;
        gl_category: string;
      };
      id: string;
      name: 'GpuRasterization';
      // Denotes the ending of the async event GpuRasterization.
      ph: 'F';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface S extends Base {
      args: {
        channel: string;
        gl_category: string;
      };
      id: string;
      name: 'GpuRasterization';
      // Denotes the beginning of the async event GpuRasterization.
      ph: 'S';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace GPUStateTracer {
    type TakeSnapshotWithCurrentFramebuffer = 
      TraceEvent.GPUStateTracer.TakeSnapshotWithCurrentFramebuffer.X;
  
    namespace TakeSnapshotWithCurrentFramebuffer {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GPUStateTracer::TakeSnapshotWithCurrentFramebuffer';
        // Denotes the end of the event TakeSnapshotWithCurrentFramebuffer.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace GPUTask {
    interface X extends Base {
      args: {
        data: {
          renderer_pid: number;
          used_bytes: number;
        };
      };
      // Duration.
      dur: number;
      name: 'GPUTask';
      // Denotes the end of the event GPUTask.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace GPUTracer {
    type ProcessTraces = 
      TraceEvent.GPUTracer.ProcessTraces.X;
  
    namespace ProcessTraces {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GPUTracer::ProcessTraces';
        // Denotes the end of the event ProcessTraces.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Graphics {
    namespace Pipeline {
      type DrawAndSwap = 
        TraceEvent.Graphics.Pipeline.DrawAndSwap.F |
        TraceEvent.Graphics.Pipeline.DrawAndSwap.S |
        TraceEvent.Graphics.Pipeline.DrawAndSwap.T;
    
      namespace DrawAndSwap {
        interface F extends Base {
          args: {
            status?: string;
          };
          id: string;
          name: 'Graphics.Pipeline.DrawAndSwap';
          // Denotes the ending of the async event DrawAndSwap.
          ph: 'F';
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      
        interface S extends Base {
          args: {
          
          };
          id: string;
          name: 'Graphics.Pipeline.DrawAndSwap';
          // Denotes the beginning of the async event DrawAndSwap.
          ph: 'S';
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      
        interface T extends Base {
          args: {
            step: string;
          };
          id: string;
          name: 'Graphics.Pipeline.DrawAndSwap';
          // Denotes a step into the async event DrawAndSwap.
          ph: 'T';
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      interface X extends Base {
        args: {
          display_trace?: number;
          step: string;
        };
        bind_id: string;
        // Duration.
        dur?: number;
        flow_in?: boolean;
        flow_out: boolean;
        id2: {
          global: string;
        };
        name: 'Graphics.Pipeline';
        // Denotes the end of the event Pipeline.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace GraphicsLayer {
    type PaintContents = 
      TraceEvent.GraphicsLayer.PaintContents.X;
  
    namespace PaintContents {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GraphicsLayer::PaintContents';
        // Denotes the end of the event PaintContents.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace GraphicsLayerTreeBuilder {
    type Rebuild = 
      TraceEvent.GraphicsLayerTreeBuilder.Rebuild.X;
  
    namespace Rebuild {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GraphicsLayerTreeBuilder::rebuild';
        // Denotes the end of the event Rebuild.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace GraphicsLayerUpdater {
    type Update = 
      TraceEvent.GraphicsLayerUpdater.Update.X;
  
    namespace Update {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GraphicsLayerUpdater::update';
        // Denotes the end of the event Update.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace GrContextPriv {
    type WriteSurfacePixels = 
      TraceEvent.GrContextPriv.WriteSurfacePixels.X;
  
    namespace WriteSurfacePixels {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GrContextPriv::writeSurfacePixels';
        // Denotes the end of the event WriteSurfacePixels.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace GrDrawingManager {
    type Flush = 
      TraceEvent.GrDrawingManager.Flush.X;
  
    namespace Flush {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GrDrawingManager::flush';
        // Denotes the end of the event Flush.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace GrDrawOpAtlas {
    namespace Plot {
      type UploadToTextureGrDeferredTextureUploadWritePixelsFnGrTextureProxy = 
        TraceEvent.GrDrawOpAtlas.Plot.UploadToTextureGrDeferredTextureUploadWritePixelsFnGrTextureProxy.X;
    
      namespace UploadToTextureGrDeferredTextureUploadWritePixelsFnGrTextureProxy {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'void GrDrawOpAtlas::Plot::uploadToTexture(GrDeferredTextureUploadWritePixelsFn &, GrTextureProxy *)';
          // Denotes the end of the event UploadToTextureGrDeferredTextureUploadWritePixelsFnGrTextureProxy.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace GrGLProgramGrGLProgramBuilder {
    type Finalize = 
      TraceEvent.GrGLProgramGrGLProgramBuilder.Finalize.X;
  
    namespace Finalize {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GrGLProgram *GrGLProgramBuilder::finalize()';
        // Denotes the end of the event Finalize.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace GrGpu {
    type CreateTexture = 
      TraceEvent.GrGpu.CreateTexture.X;
  
    namespace CreateTexture {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GrGpu::createTexture';
        // Denotes the end of the event CreateTexture.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace GrRenderTargetContext {
    type AddDrawOp = 
      TraceEvent.GrRenderTargetContext.AddDrawOp.X;
  
    type Clear = 
      TraceEvent.GrRenderTargetContext.Clear.X;
  
    type Discard = 
      TraceEvent.GrRenderTargetContext.Discard.X;
  
    type DrawGlyphRunList = 
      TraceEvent.GrRenderTargetContext.DrawGlyphRunList.X;
  
    type DrawOval = 
      TraceEvent.GrRenderTargetContext.DrawOval.X;
  
    type DrawPaint = 
      TraceEvent.GrRenderTargetContext.DrawPaint.X;
  
    type DrawPath = 
      TraceEvent.GrRenderTargetContext.DrawPath.X;
  
    type DrawRect = 
      TraceEvent.GrRenderTargetContext.DrawRect.X;
  
    type DrawRRect = 
      TraceEvent.GrRenderTargetContext.DrawRRect.X;
  
    type DrawShape = 
      TraceEvent.GrRenderTargetContext.DrawShape.X;
  
    type DrawTexture = 
      TraceEvent.GrRenderTargetContext.DrawTexture.X;
  
    type DrawVertices = 
      TraceEvent.GrRenderTargetContext.DrawVertices.X;
  
    type FillRectToRect = 
      TraceEvent.GrRenderTargetContext.FillRectToRect.X;
  
    type FillRectWithLocalMatrix = 
      TraceEvent.GrRenderTargetContext.FillRectWithLocalMatrix.X;
  
    type InternalDrawPath = 
      TraceEvent.GrRenderTargetContext.InternalDrawPath.X;
  
    type PrepareForExternalIO = 
      TraceEvent.GrRenderTargetContext.PrepareForExternalIO.X;
  
    namespace AddDrawOp {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GrRenderTargetContext::addDrawOp';
        // Denotes the end of the event AddDrawOp.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Clear {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GrRenderTargetContext::clear';
        // Denotes the end of the event Clear.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Discard {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GrRenderTargetContext::discard';
        // Denotes the end of the event Discard.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DrawGlyphRunList {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GrRenderTargetContext::drawGlyphRunList';
        // Denotes the end of the event DrawGlyphRunList.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DrawOval {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GrRenderTargetContext::drawOval';
        // Denotes the end of the event DrawOval.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DrawPaint {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GrRenderTargetContext::drawPaint';
        // Denotes the end of the event DrawPaint.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DrawPath {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GrRenderTargetContext::drawPath';
        // Denotes the end of the event DrawPath.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DrawRect {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GrRenderTargetContext::drawRect';
        // Denotes the end of the event DrawRect.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DrawRRect {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GrRenderTargetContext::drawRRect';
        // Denotes the end of the event DrawRRect.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DrawShape {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GrRenderTargetContext::drawShape';
        // Denotes the end of the event DrawShape.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DrawTexture {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GrRenderTargetContext::drawTexture';
        // Denotes the end of the event DrawTexture.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DrawVertices {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GrRenderTargetContext::drawVertices';
        // Denotes the end of the event DrawVertices.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace FillRectToRect {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GrRenderTargetContext::fillRectToRect';
        // Denotes the end of the event FillRectToRect.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace FillRectWithLocalMatrix {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GrRenderTargetContext::fillRectWithLocalMatrix';
        // Denotes the end of the event FillRectWithLocalMatrix.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace InternalDrawPath {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GrRenderTargetContext::internalDrawPath';
        // Denotes the end of the event InternalDrawPath.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PrepareForExternalIO {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GrRenderTargetContext::prepareForExternalIO';
        // Denotes the end of the event PrepareForExternalIO.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace GrRenderTargetContextPriv {
    type AbsClear = 
      TraceEvent.GrRenderTargetContextPriv.AbsClear.X;
  
    namespace AbsClear {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'GrRenderTargetContextPriv::absClear';
        // Denotes the end of the event AbsClear.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace HandleMouseMove {
    interface X extends Base {
      args: {
        x: number;
        y: number;
      };
      // Duration.
      dur: number;
      name: 'HandleMouseMove';
      // Denotes the end of the event HandleMouseMove.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HeadEnd {
    interface R extends Base {
      args: {
        data: {
          navigationId: string;
        };
      };
      name: 'headEnd';
      // Denotes a mark of the event HeadEnd.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HeadTime {
    interface b extends Base {
      args: {
      
      };
      id: string;
      name: 'headTime';
      // Denotes the beginning of the nestable async flow event HeadTime.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
      
      };
      id: string;
      name: 'headTime';
      // Denotes a step into the nestable async flow event HeadTime.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Heap {
    type CollectCodeStatistics = 
      TraceEvent.Heap.CollectCodeStatistics.X;
  
    namespace CollectCodeStatistics {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Heap::CollectCodeStatistics';
        // Denotes the end of the event CollectCodeStatistics.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace HistoryBackend {
    type GetFaviconsForURL = 
      TraceEvent.HistoryBackend.GetFaviconsForURL.X;
  
    namespace GetFaviconsForURL {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HistoryBackend::GetFaviconsForURL';
        // Denotes the end of the event GetFaviconsForURL.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace HistoryQuickProvider {
    type Start = 
      TraceEvent.HistoryQuickProvider.Start.X;
  
    namespace Start {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HistoryQuickProvider::Start';
        // Denotes the end of the event Start.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace HistoryService {
    type GetFaviconsForURL = 
      TraceEvent.HistoryService.GetFaviconsForURL.X;
  
    namespace GetFaviconsForURL {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HistoryService::GetFaviconsForURL';
        // Denotes the end of the event GetFaviconsForURL.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace HistoryURLProvider {
    type QueryComplete = 
      TraceEvent.HistoryURLProvider.QueryComplete.X;
  
    type Start = 
      TraceEvent.HistoryURLProvider.Start.X;
  
    namespace QueryComplete {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HistoryURLProvider::QueryComplete';
        // Denotes the end of the event QueryComplete.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Start {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HistoryURLProvider::Start';
        // Denotes the end of the event Start.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace HitTest {
    interface B extends Base {
      args: {
      
      };
      name: 'HitTest';
      // Denotes the beginning of the event HitTest.
      ph: 'B';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface E extends Base {
      args: {
        endData: {
          move?: boolean;
          nodeId: number;
          nodeName: string;
          rectilinear: boolean;
          x: number;
          y: number;
        };
      };
      name: 'HitTest';
      // Denotes the ending of the event HitTest.
      ph: 'E';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HOST_RESOLVER_IMPL_ATTEMPT_FINISHED {
    interface n extends Base {
      args: {
        params: {
          attempt_number: number;
          net_error: number;
          os_error: number;
          os_error_string: string;
        };
        source_type: string;
      };
      id: string;
      name: 'HOST_RESOLVER_IMPL_ATTEMPT_FINISHED';
      // Denotes the ending of the nestable async flow event HOST_RESOLVER_IMPL_ATTEMPT_FINISHED.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HOST_RESOLVER_IMPL_ATTEMPT_STARTED {
    interface n extends Base {
      args: {
        params: {
          attempt_number: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HOST_RESOLVER_IMPL_ATTEMPT_STARTED';
      // Denotes the ending of the nestable async flow event HOST_RESOLVER_IMPL_ATTEMPT_STARTED.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HOST_RESOLVER_IMPL_CACHE_HIT {
    interface n extends Base {
      args: {
        params: {
          addresses: {
            '0': string;
            '1': string;
            '2': string;
            '3': string;
            '4': string;
            '5': string;
            '6': string;
            '7': string;
            '8': string;
            '9': string;
            '10': string;
            '11': string;
            '12'?: {
            
            };
            '13'?: {
            
            };
          }[];
          expiration: string;
        };
        source_type: string;
      };
      id: string;
      name: 'HOST_RESOLVER_IMPL_CACHE_HIT';
      // Denotes the ending of the nestable async flow event HOST_RESOLVER_IMPL_CACHE_HIT.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HOST_RESOLVER_IMPL_CREATE_JOB {
    interface n extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'HOST_RESOLVER_IMPL_CREATE_JOB';
      // Denotes the ending of the nestable async flow event HOST_RESOLVER_IMPL_CREATE_JOB.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HOST_RESOLVER_IMPL_DNS_TASK {
    interface b extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'HOST_RESOLVER_IMPL_DNS_TASK';
      // Denotes the beginning of the nestable async flow event HOST_RESOLVER_IMPL_DNS_TASK.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
        params: {
          addresses?: {
            '0': string;
            '1': string;
            '2': string;
            '3': string;
            '4': string;
            '5': string;
            '6': string;
            '7': string;
            '8': string;
            '9': string;
            '10': string;
            '11'?: string;
            '12'?: string;
            '13'?: string;
            '14'?: {
            
            };
          }[];
          error?: number;
          expiration: string;
        };
        source_type: string;
      };
      id: string;
      name: 'HOST_RESOLVER_IMPL_DNS_TASK';
      // Denotes a step into the nestable async flow event HOST_RESOLVER_IMPL_DNS_TASK.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HOST_RESOLVER_IMPL_IPV6_REACHABILITY_CHECK {
    interface n extends Base {
      args: {
        params: {
          cached: boolean;
          ipv6_available: boolean;
        };
        source_type: string;
      };
      id: string;
      name: 'HOST_RESOLVER_IMPL_IPV6_REACHABILITY_CHECK';
      // Denotes the ending of the nestable async flow event HOST_RESOLVER_IMPL_IPV6_REACHABILITY_CHECK.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HOST_RESOLVER_IMPL_JOB_ATTACH {
    interface n extends Base {
      args: {
        params: {
          source_dependency: {
            id: number;
            type: number;
          };
        };
        source_type: string;
      };
      id: string;
      name: 'HOST_RESOLVER_IMPL_JOB_ATTACH';
      // Denotes the ending of the nestable async flow event HOST_RESOLVER_IMPL_JOB_ATTACH.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HOST_RESOLVER_IMPL_JOB_REQUEST_ATTACH {
    interface n extends Base {
      args: {
        params: {
          priority: string;
          source_dependency: {
            id: number;
            type: number;
          };
        };
        source_type: string;
      };
      id: string;
      name: 'HOST_RESOLVER_IMPL_JOB_REQUEST_ATTACH';
      // Denotes the ending of the nestable async flow event HOST_RESOLVER_IMPL_JOB_REQUEST_ATTACH.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HOST_RESOLVER_IMPL_JOB_STARTED {
    interface n extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'HOST_RESOLVER_IMPL_JOB_STARTED';
      // Denotes the ending of the nestable async flow event HOST_RESOLVER_IMPL_JOB_STARTED.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HOST_RESOLVER_IMPL_JOB {
    interface b extends Base {
      args: {
        params: {
          host: string;
          source_dependency: {
            id: number;
            type: number;
          };
        };
        source_type: string;
      };
      id: string;
      name: 'HOST_RESOLVER_IMPL_JOB';
      // Denotes the beginning of the nestable async flow event HOST_RESOLVER_IMPL_JOB.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
        params: {
          net_error: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HOST_RESOLVER_IMPL_JOB';
      // Denotes a step into the nestable async flow event HOST_RESOLVER_IMPL_JOB.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HOST_RESOLVER_IMPL_PROC_TASK {
    interface b extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'HOST_RESOLVER_IMPL_PROC_TASK';
      // Denotes the beginning of the nestable async flow event HOST_RESOLVER_IMPL_PROC_TASK.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
        params: {
          net_error: number;
          os_error: number;
          os_error_string: string;
        };
        source_type: string;
      };
      id: string;
      name: 'HOST_RESOLVER_IMPL_PROC_TASK';
      // Denotes a step into the nestable async flow event HOST_RESOLVER_IMPL_PROC_TASK.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HOST_RESOLVER_IMPL_REQUEST {
    interface b extends Base {
      args: {
        params: {
          address_family: number;
          allow_cached_response: boolean;
          host: string;
          is_speculative: boolean;
        };
        source_type: string;
      };
      id: string;
      name: 'HOST_RESOLVER_IMPL_REQUEST';
      // Denotes the beginning of the nestable async flow event HOST_RESOLVER_IMPL_REQUEST.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
        params: {
          net_error: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HOST_RESOLVER_IMPL_REQUEST';
      // Denotes a step into the nestable async flow event HOST_RESOLVER_IMPL_REQUEST.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HostCache {
    type Set = 
      TraceEvent.HostCache.Set.X;
  
    namespace Set {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HostCache::Set';
        // Denotes the end of the event Set.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace HTMLCanvasElement {
    type FinalizeFrame = 
      TraceEvent.HTMLCanvasElement.FinalizeFrame.X;
  
    namespace FinalizeFrame {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HTMLCanvasElement::FinalizeFrame';
        // Denotes the end of the event FinalizeFrame.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace HTMLDocumentParser {
    type Append = 
      TraceEvent.HTMLDocumentParser.Append.X;
  
    type AppendBytes = 
      TraceEvent.HTMLDocumentParser.AppendBytes.X;
  
    type DocumentElementAvailable = 
      TraceEvent.HTMLDocumentParser.DocumentElementAvailable.X;
  
    type EnqueueTokenizedChunk = 
      TraceEvent.HTMLDocumentParser.EnqueueTokenizedChunk.X;
  
    type Insert = 
      TraceEvent.HTMLDocumentParser.Insert.X;
  
    type ProcessTokenizedChunkFromBackgroundParser = 
      TraceEvent.HTMLDocumentParser.ProcessTokenizedChunkFromBackgroundParser.X;
  
    namespace Append {
      interface X extends Base {
        args: {
          size: number;
        };
        // Duration.
        dur: number;
        name: 'HTMLDocumentParser::append';
        // Denotes the end of the event Append.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace AppendBytes {
      interface X extends Base {
        args: {
          size: number;
        };
        // Duration.
        dur: number;
        name: 'HTMLDocumentParser::appendBytes';
        // Denotes the end of the event AppendBytes.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DocumentElementAvailable {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HTMLDocumentParser::documentElementAvailable';
        // Denotes the end of the event DocumentElementAvailable.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace EnqueueTokenizedChunk {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HTMLDocumentParser::EnqueueTokenizedChunk';
        // Denotes the end of the event EnqueueTokenizedChunk.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Insert {
      interface X extends Base {
        args: {
          source_length: number;
        };
        // Duration.
        dur: number;
        name: 'HTMLDocumentParser::insert';
        // Denotes the end of the event Insert.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ProcessTokenizedChunkFromBackgroundParser {
      interface X extends Base {
        args: {
        
        };
        bind_id: string;
        // Duration.
        dur: number;
        flow_in: boolean;
        id: string;
        name: 'HTMLDocumentParser::processTokenizedChunkFromBackgroundParser';
        // Denotes the end of the event ProcessTokenizedChunkFromBackgroundParser.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace HTMLParserScriptRunner {
    type Execute = 
      TraceEvent.HTMLParserScriptRunner.Execute.X;
  
    type ExecuteScriptsWaitingForLoad = 
      TraceEvent.HTMLParserScriptRunner.ExecuteScriptsWaitingForLoad.X;
  
    type ExecuteScriptsWaitingForParsing = 
      TraceEvent.HTMLParserScriptRunner.ExecuteScriptsWaitingForParsing.X;
  
    type ExecuteScriptsWaitingForResources = 
      TraceEvent.HTMLParserScriptRunner.ExecuteScriptsWaitingForResources.X;
  
    namespace Execute {
      interface X extends Base {
        args: {
          data: {
            columnNumber: number;
            frame: string;
            lineNumber: number;
          };
        };
        // Duration.
        dur: number;
        name: 'HTMLParserScriptRunner::execute';
        // Denotes the end of the event Execute.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ExecuteScriptsWaitingForLoad {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HTMLParserScriptRunner::executeScriptsWaitingForLoad';
        // Denotes the end of the event ExecuteScriptsWaitingForLoad.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ExecuteScriptsWaitingForParsing {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HTMLParserScriptRunner::executeScriptsWaitingForParsing';
        // Denotes the end of the event ExecuteScriptsWaitingForParsing.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ExecuteScriptsWaitingForResources {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HTMLParserScriptRunner::executeScriptsWaitingForResources';
        // Denotes the end of the event ExecuteScriptsWaitingForResources.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace HTMLParserScriptRunnerExecuteScript {
    interface X extends Base {
      args: {
        data: {
          columnNumber?: number;
          frame: string;
          lineNumber?: number;
          url?: string;
        };
      };
      bind_id: string;
      // Duration.
      dur: number;
      flow_in: boolean;
      id: string;
      name: 'HTMLParserScriptRunner ExecuteScript';
      // Denotes the end of the event HTMLParserScriptRunnerExecuteScript.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HTMLSelectElement {
    type SelectOption = 
      TraceEvent.HTMLSelectElement.SelectOption.X;
  
    namespace SelectOption {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HTMLSelectElement::selectOption';
        // Denotes the end of the event SelectOption.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace HTTP_CACHE_ADD_TO_ENTRY {
    interface b extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'HTTP_CACHE_ADD_TO_ENTRY';
      // Denotes the beginning of the nestable async flow event HTTP_CACHE_ADD_TO_ENTRY.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'HTTP_CACHE_ADD_TO_ENTRY';
      // Denotes a step into the nestable async flow event HTTP_CACHE_ADD_TO_ENTRY.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HTTP_CACHE_CALLER_REQUEST_HEADERS {
    interface n extends Base {
      args: {
        params: {
          headers: {
            '0': string;
            '1': string;
            '2': string;
            '3': string;
            '4': string;
            '5': string;
            '6': string;
            '7': string;
            '8': string;
            '9': string;
            '10': string;
            '11': string;
            '12': string;
            '13': string;
            '14': string;
            '15': string;
            '16': string;
            '17': string;
            '18': string;
            '19': string;
            '20': string;
            '21': string;
            '22': string;
            '23': string;
            '24': string;
            '25': string;
            '26': string;
            '27': string;
            '28': string;
            '29': string;
            '30': string;
            '31': string;
            '32': string;
            '33': string;
            '34': string;
            '35': string;
          }[];
          line: string;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP_CACHE_CALLER_REQUEST_HEADERS';
      // Denotes the ending of the nestable async flow event HTTP_CACHE_CALLER_REQUEST_HEADERS.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HTTP_CACHE_CREATE_ENTRY {
    interface b extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'HTTP_CACHE_CREATE_ENTRY';
      // Denotes the beginning of the nestable async flow event HTTP_CACHE_CREATE_ENTRY.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'HTTP_CACHE_CREATE_ENTRY';
      // Denotes a step into the nestable async flow event HTTP_CACHE_CREATE_ENTRY.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HTTP_CACHE_GET_BACKEND {
    interface b extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'HTTP_CACHE_GET_BACKEND';
      // Denotes the beginning of the nestable async flow event HTTP_CACHE_GET_BACKEND.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'HTTP_CACHE_GET_BACKEND';
      // Denotes a step into the nestable async flow event HTTP_CACHE_GET_BACKEND.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HTTP_CACHE_OPEN_ENTRY {
    interface b extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'HTTP_CACHE_OPEN_ENTRY';
      // Denotes the beginning of the nestable async flow event HTTP_CACHE_OPEN_ENTRY.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
        params: {
          net_error: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP_CACHE_OPEN_ENTRY';
      // Denotes a step into the nestable async flow event HTTP_CACHE_OPEN_ENTRY.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HTTP_CACHE_READ_DATA {
    interface b extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'HTTP_CACHE_READ_DATA';
      // Denotes the beginning of the nestable async flow event HTTP_CACHE_READ_DATA.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'HTTP_CACHE_READ_DATA';
      // Denotes a step into the nestable async flow event HTTP_CACHE_READ_DATA.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HTTP_CACHE_READ_INFO {
    interface b extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'HTTP_CACHE_READ_INFO';
      // Denotes the beginning of the nestable async flow event HTTP_CACHE_READ_INFO.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'HTTP_CACHE_READ_INFO';
      // Denotes a step into the nestable async flow event HTTP_CACHE_READ_INFO.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HTTP_CACHE_WRITE_DATA {
    interface b extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'HTTP_CACHE_WRITE_DATA';
      // Denotes the beginning of the nestable async flow event HTTP_CACHE_WRITE_DATA.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'HTTP_CACHE_WRITE_DATA';
      // Denotes a step into the nestable async flow event HTTP_CACHE_WRITE_DATA.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HTTP_CACHE_WRITE_INFO {
    interface b extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'HTTP_CACHE_WRITE_INFO';
      // Denotes the beginning of the nestable async flow event HTTP_CACHE_WRITE_INFO.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'HTTP_CACHE_WRITE_INFO';
      // Denotes a step into the nestable async flow event HTTP_CACHE_WRITE_INFO.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HTTP_STREAM_JOB_BOUND_TO_QUIC_STREAM_FACTORY_JOB {
    interface n extends Base {
      args: {
        params: {
          source_dependency: {
            id: number;
            type: number;
          };
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP_STREAM_JOB_BOUND_TO_QUIC_STREAM_FACTORY_JOB';
      // Denotes the ending of the nestable async flow event HTTP_STREAM_JOB_BOUND_TO_QUIC_STREAM_FACTORY_JOB.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HTTP_STREAM_JOB_BOUND_TO_REQUEST {
    interface n extends Base {
      args: {
        params: {
          source_dependency: {
            id: number;
            type: number;
          };
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP_STREAM_JOB_BOUND_TO_REQUEST';
      // Denotes the ending of the nestable async flow event HTTP_STREAM_JOB_BOUND_TO_REQUEST.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HTTP_STREAM_JOB_CONTROLLER_ALT_SVC_FOUND {
    interface n extends Base {
      args: {
        params: {
          alt_svc: string;
          is_broken: boolean;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP_STREAM_JOB_CONTROLLER_ALT_SVC_FOUND';
      // Denotes the ending of the nestable async flow event HTTP_STREAM_JOB_CONTROLLER_ALT_SVC_FOUND.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HTTP_STREAM_JOB_CONTROLLER_BOUND {
    interface n extends Base {
      args: {
        params: {
          source_dependency: {
            id: number;
            type: number;
          };
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP_STREAM_JOB_CONTROLLER_BOUND';
      // Denotes the ending of the nestable async flow event HTTP_STREAM_JOB_CONTROLLER_BOUND.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HTTP_STREAM_JOB_CONTROLLER_PROXY_SERVER_RESOLVED {
    interface n extends Base {
      args: {
        params: {
          proxy_server: string;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP_STREAM_JOB_CONTROLLER_PROXY_SERVER_RESOLVED';
      // Denotes the ending of the nestable async flow event HTTP_STREAM_JOB_CONTROLLER_PROXY_SERVER_RESOLVED.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HTTP_STREAM_JOB_CONTROLLER {
    interface b extends Base {
      args: {
        params: {
          is_preconnect: boolean;
          url: string;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP_STREAM_JOB_CONTROLLER';
      // Denotes the beginning of the nestable async flow event HTTP_STREAM_JOB_CONTROLLER.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'HTTP_STREAM_JOB_CONTROLLER';
      // Denotes a step into the nestable async flow event HTTP_STREAM_JOB_CONTROLLER.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HTTP_STREAM_JOB_DELAYED {
    interface n extends Base {
      args: {
        params: {
          delay: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP_STREAM_JOB_DELAYED';
      // Denotes the ending of the nestable async flow event HTTP_STREAM_JOB_DELAYED.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HTTP_STREAM_JOB_INIT_CONNECTION {
    interface b extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'HTTP_STREAM_JOB_INIT_CONNECTION';
      // Denotes the beginning of the nestable async flow event HTTP_STREAM_JOB_INIT_CONNECTION.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'HTTP_STREAM_JOB_INIT_CONNECTION';
      // Denotes a step into the nestable async flow event HTTP_STREAM_JOB_INIT_CONNECTION.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HTTP_STREAM_JOB_WAITING {
    interface b extends Base {
      args: {
        params: {
          should_wait: boolean;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP_STREAM_JOB_WAITING';
      // Denotes the beginning of the nestable async flow event HTTP_STREAM_JOB_WAITING.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'HTTP_STREAM_JOB_WAITING';
      // Denotes a step into the nestable async flow event HTTP_STREAM_JOB_WAITING.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HTTP_STREAM_JOB {
    interface b extends Base {
      args: {
        params: {
          expect_spdy: boolean;
          original_url: string;
          priority: string;
          source_dependency: {
            id: number;
            type: number;
          };
          url: string;
          using_quic: boolean;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP_STREAM_JOB';
      // Denotes the beginning of the nestable async flow event HTTP_STREAM_JOB.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'HTTP_STREAM_JOB';
      // Denotes a step into the nestable async flow event HTTP_STREAM_JOB.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HTTP_STREAM_PARSER_READ_HEADERS {
    interface b extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'HTTP_STREAM_PARSER_READ_HEADERS';
      // Denotes the beginning of the nestable async flow event HTTP_STREAM_PARSER_READ_HEADERS.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'HTTP_STREAM_PARSER_READ_HEADERS';
      // Denotes a step into the nestable async flow event HTTP_STREAM_PARSER_READ_HEADERS.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HTTP_STREAM_REQUEST_BOUND_TO_JOB {
    interface n extends Base {
      args: {
        params: {
          source_dependency: {
            id: number;
            type: number;
          };
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP_STREAM_REQUEST_BOUND_TO_JOB';
      // Denotes the ending of the nestable async flow event HTTP_STREAM_REQUEST_BOUND_TO_JOB.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HTTP_STREAM_REQUEST_BOUND_TO_QUIC_SESSION {
    interface n extends Base {
      args: {
        params: {
          source_dependency: {
            id: number;
            type: number;
          };
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP_STREAM_REQUEST_BOUND_TO_QUIC_SESSION';
      // Denotes the ending of the nestable async flow event HTTP_STREAM_REQUEST_BOUND_TO_QUIC_SESSION.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HTTP_STREAM_REQUEST_PROTO {
    interface n extends Base {
      args: {
        params: {
          proto: string;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP_STREAM_REQUEST_PROTO';
      // Denotes the ending of the nestable async flow event HTTP_STREAM_REQUEST_PROTO.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HTTP_STREAM_REQUEST_STARTED_JOB {
    interface n extends Base {
      args: {
        params: {
          source_dependency: {
            id: number;
            type: number;
          };
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP_STREAM_REQUEST_STARTED_JOB';
      // Denotes the ending of the nestable async flow event HTTP_STREAM_REQUEST_STARTED_JOB.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HTTP_STREAM_REQUEST {
    interface b extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'HTTP_STREAM_REQUEST';
      // Denotes the beginning of the nestable async flow event HTTP_STREAM_REQUEST.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'HTTP_STREAM_REQUEST';
      // Denotes a step into the nestable async flow event HTTP_STREAM_REQUEST.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HTTP_TRANSACTION_HTTP2_SEND_REQUEST_HEADERS {
    interface n extends Base {
      args: {
        params: {
          headers: {
            '0': string;
            '1': string;
            '2': string;
            '3': string;
            '4': string;
            '5': string;
            '6': string;
            '7': string;
            '8': string;
            '9': string;
            '10': string;
            '11': string;
          }[];
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP_TRANSACTION_HTTP2_SEND_REQUEST_HEADERS';
      // Denotes the ending of the nestable async flow event HTTP_TRANSACTION_HTTP2_SEND_REQUEST_HEADERS.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HTTP_TRANSACTION_QUIC_SEND_REQUEST_HEADERS {
    interface n extends Base {
      args: {
        params: {
          headers: {
            '0': string;
            '1': string;
            '2': string;
            '3': string;
            '4': string;
            '5': string;
            '6': string;
            '7': string;
            '8': string;
            '9': string;
            '10': string;
            '11': string;
            '12'?: {
            
            };
          }[];
          quic_priority: number;
          quic_stream_id: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP_TRANSACTION_QUIC_SEND_REQUEST_HEADERS';
      // Denotes the ending of the nestable async flow event HTTP_TRANSACTION_QUIC_SEND_REQUEST_HEADERS.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HTTP_TRANSACTION_READ_BODY {
    interface b extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'HTTP_TRANSACTION_READ_BODY';
      // Denotes the beginning of the nestable async flow event HTTP_TRANSACTION_READ_BODY.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'HTTP_TRANSACTION_READ_BODY';
      // Denotes a step into the nestable async flow event HTTP_TRANSACTION_READ_BODY.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HTTP_TRANSACTION_READ_HEADERS {
    interface b extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'HTTP_TRANSACTION_READ_HEADERS';
      // Denotes the beginning of the nestable async flow event HTTP_TRANSACTION_READ_HEADERS.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'HTTP_TRANSACTION_READ_HEADERS';
      // Denotes a step into the nestable async flow event HTTP_TRANSACTION_READ_HEADERS.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HTTP_TRANSACTION_READ_RESPONSE_HEADERS {
    interface n extends Base {
      args: {
        params: {
          headers: {
            '0': string;
            '1': string;
            '2': string;
            '3': string;
            '4': string;
            '5': string;
            '6': string;
            '7': string;
            '8': string;
            '9': string;
            '10': string;
            '11': string;
            '12'?: {
            
            };
            '13'?: {
            
            };
            '14'?: {
            
            };
          }[];
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP_TRANSACTION_READ_RESPONSE_HEADERS';
      // Denotes the ending of the nestable async flow event HTTP_TRANSACTION_READ_RESPONSE_HEADERS.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HTTP_TRANSACTION_SEND_REQUEST_HEADERS {
    interface n extends Base {
      args: {
        params: {
          headers: {
            '0': string;
            '1': string;
            '2': string;
            '3': string;
            '4': string;
            '5': string;
            '6': string;
            '7': string;
            '8': string;
            '9': string;
            '10': string;
            '11': string;
            '12': string;
            '13': string;
            '14': string;
            '15': string;
            '16': string;
            '17': string;
            '18': string;
            '19': string;
            '20'?: string;
            '21'?: {
            
            };
            '22'?: {
            
            };
            '23'?: {
            
            };
            '24'?: {
            
            };
            '25'?: {
            
            };
            '26'?: {
            
            };
            '27'?: {
            
            };
            '28'?: {
            
            };
            '29'?: {
            
            };
          }[];
          line: string;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP_TRANSACTION_SEND_REQUEST_HEADERS';
      // Denotes the ending of the nestable async flow event HTTP_TRANSACTION_SEND_REQUEST_HEADERS.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HTTP_TRANSACTION_SEND_REQUEST {
    interface b extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'HTTP_TRANSACTION_SEND_REQUEST';
      // Denotes the beginning of the nestable async flow event HTTP_TRANSACTION_SEND_REQUEST.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'HTTP_TRANSACTION_SEND_REQUEST';
      // Denotes a step into the nestable async flow event HTTP_TRANSACTION_SEND_REQUEST.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HTTP2_SESSION_INITIALIZED {
    interface n extends Base {
      args: {
        params: {
          protocol: string;
          source_dependency: {
            id: number;
            type: number;
          };
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP2_SESSION_INITIALIZED';
      // Denotes the ending of the nestable async flow event HTTP2_SESSION_INITIALIZED.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HTTP2_SESSION_PING {
    interface n extends Base {
      args: {
        params: {
          is_ack: boolean;
          type: string;
          unique_id: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP2_SESSION_PING';
      // Denotes the ending of the nestable async flow event HTTP2_SESSION_PING.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HTTP2_SESSION_POOL_FOUND_EXISTING_SESSION_FROM_IP_POOL {
    interface n extends Base {
      args: {
        params: {
          source_dependency: {
            id: number;
            type: number;
          };
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP2_SESSION_POOL_FOUND_EXISTING_SESSION_FROM_IP_POOL';
      // Denotes the ending of the nestable async flow event HTTP2_SESSION_POOL_FOUND_EXISTING_SESSION_FROM_IP_POOL.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HTTP2_SESSION_POOL_FOUND_EXISTING_SESSION {
    interface n extends Base {
      args: {
        params: {
          source_dependency: {
            id: number;
            type: number;
          };
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP2_SESSION_POOL_FOUND_EXISTING_SESSION';
      // Denotes the ending of the nestable async flow event HTTP2_SESSION_POOL_FOUND_EXISTING_SESSION.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HTTP2_SESSION_POOL_IMPORTED_SESSION_FROM_SOCKET {
    interface n extends Base {
      args: {
        params: {
          source_dependency: {
            id: number;
            type: number;
          };
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP2_SESSION_POOL_IMPORTED_SESSION_FROM_SOCKET';
      // Denotes the ending of the nestable async flow event HTTP2_SESSION_POOL_IMPORTED_SESSION_FROM_SOCKET.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HTTP2_SESSION_RECV_DATA {
    interface n extends Base {
      args: {
        params: {
          fin: boolean;
          size: number;
          stream_id: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP2_SESSION_RECV_DATA';
      // Denotes the ending of the nestable async flow event HTTP2_SESSION_RECV_DATA.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HTTP2_SESSION_RECV_HEADERS {
    interface n extends Base {
      args: {
        params: {
          fin: boolean;
          headers: {
            '0': string;
            '1': string;
            '2': string;
            '3': string;
            '4': string;
            '5': string;
            '6': string;
            '7': string;
            '8': string;
            '9': string;
            '10': string;
            '11': string;
          }[];
          stream_id: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP2_SESSION_RECV_HEADERS';
      // Denotes the ending of the nestable async flow event HTTP2_SESSION_RECV_HEADERS.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HTTP2_SESSION_RECV_SETTING {
    interface n extends Base {
      args: {
        params: {
          id: string;
          value: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP2_SESSION_RECV_SETTING';
      // Denotes the ending of the nestable async flow event HTTP2_SESSION_RECV_SETTING.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HTTP2_SESSION_RECV_SETTINGS_ACK {
    interface n extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'HTTP2_SESSION_RECV_SETTINGS_ACK';
      // Denotes the ending of the nestable async flow event HTTP2_SESSION_RECV_SETTINGS_ACK.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HTTP2_SESSION_RECV_SETTINGS {
    interface n extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'HTTP2_SESSION_RECV_SETTINGS';
      // Denotes the ending of the nestable async flow event HTTP2_SESSION_RECV_SETTINGS.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HTTP2_SESSION_RECV_WINDOW_UPDATE {
    interface n extends Base {
      args: {
        params: {
          delta: number;
          stream_id: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP2_SESSION_RECV_WINDOW_UPDATE';
      // Denotes the ending of the nestable async flow event HTTP2_SESSION_RECV_WINDOW_UPDATE.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HTTP2_SESSION_SEND_HEADERS {
    interface n extends Base {
      args: {
        params: {
          exclusive: boolean;
          fin: boolean;
          has_priority: boolean;
          headers: {
            '0': string;
            '1': string;
            '2': string;
            '3': string;
            '4': string;
            '5': string;
            '6': string;
            '7': string;
            '8': string;
            '9': string;
            '10': string;
            '11': string;
          }[];
          parent_stream_id: number;
          source_dependency: {
            id: number;
            type: number;
          };
          stream_id: number;
          weight: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP2_SESSION_SEND_HEADERS';
      // Denotes the ending of the nestable async flow event HTTP2_SESSION_SEND_HEADERS.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HTTP2_SESSION_SEND_SETTINGS_ACK {
    interface n extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'HTTP2_SESSION_SEND_SETTINGS_ACK';
      // Denotes the ending of the nestable async flow event HTTP2_SESSION_SEND_SETTINGS_ACK.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HTTP2_SESSION_SEND_SETTINGS {
    interface n extends Base {
      args: {
        params: {
          settings: {
            '0': string;
            '1': string;
            '2': string;
            '3': string;
            '4': string;
            '5': string;
            '6': string;
            '7': string;
            '8': string;
            '9': string;
            '10': string;
            '11': string;
            '12': string;
            '13': string;
            '14': string;
            '15': string;
            '16': string;
            '17': string;
            '18': string;
            '19': string;
            '20': string;
            '21': string;
            '22': string;
            '23': string;
            '24': string;
            '25': string;
            '26': string;
            '27': string;
            '28': string;
            '29': string;
            '30': string;
            '31': string;
            '32': string;
            '33': string;
            '34': string;
            '35': string;
            '36': string;
            '37': string;
            '38': string;
            '39': string;
            '40': string;
            '41': string;
            '42': string;
            '43': string;
            '44': string;
            '45': string;
            '46': string;
          }[];
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP2_SESSION_SEND_SETTINGS';
      // Denotes the ending of the nestable async flow event HTTP2_SESSION_SEND_SETTINGS.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HTTP2_SESSION_SEND_WINDOW_UPDATE {
    interface n extends Base {
      args: {
        params: {
          delta: number;
          stream_id: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP2_SESSION_SEND_WINDOW_UPDATE';
      // Denotes the ending of the nestable async flow event HTTP2_SESSION_SEND_WINDOW_UPDATE.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HTTP2_SESSION_UPDATE_RECV_WINDOW {
    interface n extends Base {
      args: {
        params: {
          delta: number;
          window_size: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP2_SESSION_UPDATE_RECV_WINDOW';
      // Denotes the ending of the nestable async flow event HTTP2_SESSION_UPDATE_RECV_WINDOW.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HTTP2_SESSION_UPDATE_SEND_WINDOW {
    interface n extends Base {
      args: {
        params: {
          delta: number;
          window_size: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP2_SESSION_UPDATE_SEND_WINDOW';
      // Denotes the ending of the nestable async flow event HTTP2_SESSION_UPDATE_SEND_WINDOW.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HTTP2_SESSION_UPDATE_STREAMS_SEND_WINDOW_SIZE {
    interface n extends Base {
      args: {
        params: {
          delta_window_size: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP2_SESSION_UPDATE_STREAMS_SEND_WINDOW_SIZE';
      // Denotes the ending of the nestable async flow event HTTP2_SESSION_UPDATE_STREAMS_SEND_WINDOW_SIZE.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HTTP2_SESSION {
    interface b extends Base {
      args: {
        params: {
          host: string;
          proxy: string;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP2_SESSION';
      // Denotes the beginning of the nestable async flow event HTTP2_SESSION.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HTTP2_STREAM_UPDATE_RECV_WINDOW {
    interface n extends Base {
      args: {
        params: {
          delta: number;
          stream_id: number;
          window_size: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP2_STREAM_UPDATE_RECV_WINDOW';
      // Denotes the ending of the nestable async flow event HTTP2_STREAM_UPDATE_RECV_WINDOW.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HTTP2_STREAM_UPDATE_SEND_WINDOW {
    interface n extends Base {
      args: {
        params: {
          delta: number;
          stream_id: number;
          window_size: number;
        };
        source_type: string;
      };
      id: string;
      name: 'HTTP2_STREAM_UPDATE_SEND_WINDOW';
      // Denotes the ending of the nestable async flow event HTTP2_STREAM_UPDATE_SEND_WINDOW.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace HttpCacheTransaction {
    type DoAddToEntry = 
      TraceEvent.HttpCacheTransaction.DoAddToEntry.X;
  
    type DoAddToEntryComplete = 
      TraceEvent.HttpCacheTransaction.DoAddToEntryComplete.X;
  
    type DoCacheDispatchValidation = 
      TraceEvent.HttpCacheTransaction.DoCacheDispatchValidation.X;
  
    type DoCacheReadData = 
      TraceEvent.HttpCacheTransaction.DoCacheReadData.X;
  
    type DoCacheReadDataComplete = 
      TraceEvent.HttpCacheTransaction.DoCacheReadDataComplete.X;
  
    type DoCacheReadResponse = 
      TraceEvent.HttpCacheTransaction.DoCacheReadResponse.X;
  
    type DoCacheReadResponseComplete = 
      TraceEvent.HttpCacheTransaction.DoCacheReadResponseComplete.X;
  
    type DoCacheWriteResponse = 
      TraceEvent.HttpCacheTransaction.DoCacheWriteResponse.X;
  
    type DoCacheWriteResponseComplete = 
      TraceEvent.HttpCacheTransaction.DoCacheWriteResponseComplete.X;
  
    type DoCreateEntry = 
      TraceEvent.HttpCacheTransaction.DoCreateEntry.X;
  
    type DoCreateEntryComplete = 
      TraceEvent.HttpCacheTransaction.DoCreateEntryComplete.X;
  
    type DoInitEntry = 
      TraceEvent.HttpCacheTransaction.DoInitEntry.X;
  
    type DoNetworkRead = 
      TraceEvent.HttpCacheTransaction.DoNetworkRead.X;
  
    type DoNetworkReadCacheWrite = 
      TraceEvent.HttpCacheTransaction.DoNetworkReadCacheWrite.X;
  
    type DoNetworkReadCacheWriteComplete = 
      TraceEvent.HttpCacheTransaction.DoNetworkReadCacheWriteComplete.X;
  
    type DoNetworkReadComplete = 
      TraceEvent.HttpCacheTransaction.DoNetworkReadComplete.X;
  
    type DoOpenEntry = 
      TraceEvent.HttpCacheTransaction.DoOpenEntry.X;
  
    type DoOpenEntryComplete = 
      TraceEvent.HttpCacheTransaction.DoOpenEntryComplete.X;
  
    type DoOverwriteCachedResponse = 
      TraceEvent.HttpCacheTransaction.DoOverwriteCachedResponse.X;
  
    type DoSendRequest = 
      TraceEvent.HttpCacheTransaction.DoSendRequest.X;
  
    type DoSendRequestComplete = 
      TraceEvent.HttpCacheTransaction.DoSendRequestComplete.X;
  
    type DoSuccessfulSendRequest = 
      TraceEvent.HttpCacheTransaction.DoSuccessfulSendRequest.X;
  
    type DoTruncateCachedData = 
      TraceEvent.HttpCacheTransaction.DoTruncateCachedData.X;
  
    type DoTruncateCachedMetadata = 
      TraceEvent.HttpCacheTransaction.DoTruncateCachedMetadata.X;
  
    type DoTruncateCachedMetadataComplete = 
      TraceEvent.HttpCacheTransaction.DoTruncateCachedMetadataComplete.X;
  
    type Transaction = 
      TraceEvent.HttpCacheTransaction.Transaction.X;
  
    namespace DoAddToEntry {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoAddToEntry';
        // Denotes the end of the event DoAddToEntry.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoAddToEntryComplete {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoAddToEntryComplete';
        // Denotes the end of the event DoAddToEntryComplete.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoCacheDispatchValidation {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoCacheDispatchValidation';
        // Denotes the end of the event DoCacheDispatchValidation.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoCacheReadData {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoCacheReadData';
        // Denotes the end of the event DoCacheReadData.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoCacheReadDataComplete {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoCacheReadDataComplete';
        // Denotes the end of the event DoCacheReadDataComplete.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoCacheReadResponse {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoCacheReadResponse';
        // Denotes the end of the event DoCacheReadResponse.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoCacheReadResponseComplete {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoCacheReadResponseComplete';
        // Denotes the end of the event DoCacheReadResponseComplete.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoCacheWriteResponse {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoCacheWriteResponse';
        // Denotes the end of the event DoCacheWriteResponse.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoCacheWriteResponseComplete {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoCacheWriteResponseComplete';
        // Denotes the end of the event DoCacheWriteResponseComplete.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoCreateEntry {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoCreateEntry';
        // Denotes the end of the event DoCreateEntry.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoCreateEntryComplete {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoCreateEntryComplete';
        // Denotes the end of the event DoCreateEntryComplete.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoInitEntry {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoInitEntry';
        // Denotes the end of the event DoInitEntry.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoNetworkRead {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoNetworkRead';
        // Denotes the end of the event DoNetworkRead.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoNetworkReadCacheWrite {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoNetworkReadCacheWrite';
        // Denotes the end of the event DoNetworkReadCacheWrite.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoNetworkReadCacheWriteComplete {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoNetworkReadCacheWriteComplete';
        // Denotes the end of the event DoNetworkReadCacheWriteComplete.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoNetworkReadComplete {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoNetworkReadComplete';
        // Denotes the end of the event DoNetworkReadComplete.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoOpenEntry {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoOpenEntry';
        // Denotes the end of the event DoOpenEntry.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoOpenEntryComplete {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoOpenEntryComplete';
        // Denotes the end of the event DoOpenEntryComplete.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoOverwriteCachedResponse {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoOverwriteCachedResponse';
        // Denotes the end of the event DoOverwriteCachedResponse.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoSendRequest {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoSendRequest';
        // Denotes the end of the event DoSendRequest.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoSendRequestComplete {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoSendRequestComplete';
        // Denotes the end of the event DoSendRequestComplete.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoSuccessfulSendRequest {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoSuccessfulSendRequest';
        // Denotes the end of the event DoSuccessfulSendRequest.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoTruncateCachedData {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoTruncateCachedData';
        // Denotes the end of the event DoTruncateCachedData.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoTruncateCachedMetadata {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoTruncateCachedMetadata';
        // Denotes the end of the event DoTruncateCachedMetadata.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoTruncateCachedMetadataComplete {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::DoTruncateCachedMetadataComplete';
        // Denotes the end of the event DoTruncateCachedMetadataComplete.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Transaction {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'HttpCacheTransaction::Transaction';
        // Denotes the end of the event Transaction.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace HttpStreamFactory {
    namespace Job {
      type OnIOComplete = 
        TraceEvent.HttpStreamFactory.Job.OnIOComplete.X;
    
      type RunLoop = 
        TraceEvent.HttpStreamFactory.Job.RunLoop.X;
    
      namespace OnIOComplete {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'HttpStreamFactory::Job::OnIOComplete';
          // Denotes the end of the event OnIOComplete.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace RunLoop {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'HttpStreamFactory::Job::RunLoop';
          // Denotes the end of the event RunLoop.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace Identity {
    namespace Mojom {
      type IdentityManager = 
        TraceEvent.Identity.Mojom.IdentityManager.X;
    
      namespace IdentityManager {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'identity.mojom.IdentityManager';
          // Denotes the end of the event IdentityManager.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace Idle_tq {
    interface C extends Base {
      args: {
        value: number;
      };
      name: 'idle_tq';
      // Denotes a counter for the event Idle_tq.
      ph: 'C';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace IdleSpellCheckController {
    type HotModeInvocation = 
      TraceEvent.IdleSpellCheckController.HotModeInvocation.X;
  
    namespace HotModeInvocation {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'IdleSpellCheckController::hotModeInvocation';
        // Denotes the end of the event HotModeInvocation.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ImageAnimationController {
    type AnimateImagesForSyncTree = 
      TraceEvent.ImageAnimationController.AnimateImagesForSyncTree.X;
  
    type WillActivate = 
      TraceEvent.ImageAnimationController.WillActivate.X;
  
    namespace AnimateImagesForSyncTree {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ImageAnimationController::AnimateImagesForSyncTree';
        // Denotes the end of the event AnimateImagesForSyncTree.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace WillActivate {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ImageAnimationController::WillActivate';
        // Denotes the end of the event WillActivate.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ImageDecodeTask {
    interface B extends Base {
      args: {
        pixelRefId: number;
      };
      name: 'ImageDecodeTask';
      // Denotes the beginning of the event ImageDecodeTask.
      ph: 'B';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface E extends Base {
      args: {
      
      };
      name: 'ImageDecodeTask';
      // Denotes the ending of the event ImageDecodeTask.
      ph: 'E';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ImageOperations {
    type Resize = 
      TraceEvent.ImageOperations.Resize.X;
  
    namespace Resize {
      interface X extends Base {
        args: {
          dst_pixels: number;
          src_pixels: number;
        };
        // Duration.
        dur: number;
        name: 'ImageOperations::Resize';
        // Denotes the end of the event Resize.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ImageResourceContent {
    type UpdateImage = 
      TraceEvent.ImageResourceContent.UpdateImage.X;
  
    namespace UpdateImage {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ImageResourceContent::updateImage';
        // Denotes the end of the event UpdateImage.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ImageTransportSurfaceOverlayMac {
    type ApplyBackpressure = 
      TraceEvent.ImageTransportSurfaceOverlayMac.ApplyBackpressure.X;
  
    type SwapBuffersInternal = 
      TraceEvent.ImageTransportSurfaceOverlayMac.SwapBuffersInternal.X;
  
    namespace ApplyBackpressure {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ImageTransportSurfaceOverlayMac::ApplyBackpressure';
        // Denotes the end of the event ApplyBackpressure.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SwapBuffersInternal {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ImageTransportSurfaceOverlayMac::SwapBuffersInternal';
        // Denotes the end of the event SwapBuffersInternal.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ImageUploadTaskImpl {
    type RunOnWorkerThread = 
      TraceEvent.ImageUploadTaskImpl.RunOnWorkerThread.X;
  
    namespace RunOnWorkerThread {
      interface X extends Base {
        args: {
          mode: string;
          source_prepare_tiles_id: number;
        };
        // Duration.
        dur: number;
        name: 'ImageUploadTaskImpl::RunOnWorkerThread';
        // Denotes the end of the event RunOnWorkerThread.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ImplementationBase {
    type GetBucketContents = 
      TraceEvent.ImplementationBase.GetBucketContents.X;
  
    type Initialize = 
      TraceEvent.ImplementationBase.Initialize.X;
  
    type WaitForCmd = 
      TraceEvent.ImplementationBase.WaitForCmd.X;
  
    namespace GetBucketContents {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ImplementationBase::GetBucketContents';
        // Denotes the end of the event GetBucketContents.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Initialize {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ImplementationBase::Initialize';
        // Denotes the end of the event Initialize.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace WaitForCmd {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ImplementationBase::WaitForCmd';
        // Denotes the end of the event WaitForCmd.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace InProcessCommandBuffer {
    type Flush = 
      TraceEvent.InProcessCommandBuffer.Flush.X;
  
    type FlushOnGpuThread = 
      TraceEvent.InProcessCommandBuffer.FlushOnGpuThread.X;
  
    type Initialize = 
      TraceEvent.InProcessCommandBuffer.Initialize.X;
  
    type InitializeOnGpuThread = 
      TraceEvent.InProcessCommandBuffer.InitializeOnGpuThread.X;
  
    namespace Flush {
      interface X extends Base {
        args: {
          put_offset: number;
        };
        // Duration.
        dur: number;
        name: 'InProcessCommandBuffer::Flush';
        // Denotes the end of the event Flush.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace FlushOnGpuThread {
      interface X extends Base {
        args: {
          put_offset: number;
        };
        // Duration.
        dur: number;
        name: 'InProcessCommandBuffer::FlushOnGpuThread';
        // Denotes the end of the event FlushOnGpuThread.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Initialize {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'InProcessCommandBuffer::Initialize';
        // Denotes the end of the event Initialize.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace InitializeOnGpuThread {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'InProcessCommandBuffer::InitializeOnGpuThread';
        // Denotes the end of the event InitializeOnGpuThread.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Input_tq {
    interface C extends Base {
      args: {
        value: number;
      };
      name: 'input_tq';
      // Denotes a counter for the event Input_tq.
      ph: 'C';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace InputEventSentBlocking {
    interface I extends Base {
      args: {
      
      };
      name: 'InputEventSentBlocking';
      // Denotes an event InputEventSentBlocking. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace InputLatency {
    type KeyUp = 
      TraceEvent.InputLatency.KeyUp.F |
      TraceEvent.InputLatency.KeyUp.S;
  
    type MouseLeave = 
      TraceEvent.InputLatency.MouseLeave.F |
      TraceEvent.InputLatency.MouseLeave.S;
  
    type MouseMove = 
      TraceEvent.InputLatency.MouseMove.F |
      TraceEvent.InputLatency.MouseMove.S;
  
    type RawKeyDown = 
      TraceEvent.InputLatency.RawKeyDown.F |
      TraceEvent.InputLatency.RawKeyDown.S;
  
    namespace KeyUp {
      interface F extends Base {
        args: {
          data: {
            INPUT_EVENT_LATENCY_ACK_RWH_COMPONENT: {
              time: number;
            };
            INPUT_EVENT_LATENCY_BEGIN_RWH_COMPONENT: {
              time: number;
            };
            INPUT_EVENT_LATENCY_ORIGINAL_COMPONENT: {
              time: number;
            };
            INPUT_EVENT_LATENCY_RENDERER_MAIN_COMPONENT: {
              time: number;
            };
            INPUT_EVENT_LATENCY_UI_COMPONENT: {
              time: number;
            };
            trace_id: number;
          };
        };
        id: string;
        name: 'InputLatency::KeyUp';
        // Denotes the ending of the async event KeyUp.
        ph: 'F';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface S extends Base {
        args: {
        
        };
        id: string;
        name: 'InputLatency::KeyUp';
        // Denotes the beginning of the async event KeyUp.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace MouseLeave {
      interface F extends Base {
        args: {
          data: {
            INPUT_EVENT_LATENCY_ACK_RWH_COMPONENT: {
              time: number;
            };
            INPUT_EVENT_LATENCY_BEGIN_RWH_COMPONENT: {
              time: number;
            };
            INPUT_EVENT_LATENCY_ORIGINAL_COMPONENT: {
              time: number;
            };
            INPUT_EVENT_LATENCY_RENDERER_MAIN_COMPONENT: {
              time: number;
            };
            INPUT_EVENT_LATENCY_UI_COMPONENT: {
              time: number;
            };
            trace_id: number;
          };
        };
        id: string;
        name: 'InputLatency::MouseLeave';
        // Denotes the ending of the async event MouseLeave.
        ph: 'F';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface S extends Base {
        args: {
        
        };
        id: string;
        name: 'InputLatency::MouseLeave';
        // Denotes the beginning of the async event MouseLeave.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace MouseMove {
      interface F extends Base {
        args: {
          data: {
            INPUT_EVENT_LATENCY_ACK_RWH_COMPONENT: {
              time: number;
            };
            INPUT_EVENT_LATENCY_BEGIN_RWH_COMPONENT: {
              time: number;
            };
            INPUT_EVENT_LATENCY_ORIGINAL_COMPONENT: {
              time: number;
            };
            INPUT_EVENT_LATENCY_RENDERER_MAIN_COMPONENT: {
              time: number;
            };
            INPUT_EVENT_LATENCY_UI_COMPONENT: {
              time: number;
            };
            trace_id: number;
          };
        };
        id: string;
        name: 'InputLatency::MouseMove';
        // Denotes the ending of the async event MouseMove.
        ph: 'F';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface S extends Base {
        args: {
        
        };
        id: string;
        name: 'InputLatency::MouseMove';
        // Denotes the beginning of the async event MouseMove.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RawKeyDown {
      interface F extends Base {
        args: {
          data: {
            INPUT_EVENT_LATENCY_ACK_RWH_COMPONENT: {
              time: number;
            };
            INPUT_EVENT_LATENCY_BEGIN_RWH_COMPONENT: {
              time: number;
            };
            INPUT_EVENT_LATENCY_ORIGINAL_COMPONENT: {
              time: number;
            };
            INPUT_EVENT_LATENCY_RENDERER_MAIN_COMPONENT: {
              time: number;
            };
            INPUT_EVENT_LATENCY_UI_COMPONENT: {
              time: number;
            };
            trace_id: number;
          };
        };
        id: string;
        name: 'InputLatency::RawKeyDown';
        // Denotes the ending of the async event RawKeyDown.
        ph: 'F';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface S extends Base {
        args: {
        
        };
        id: string;
        name: 'InputLatency::RawKeyDown';
        // Denotes the beginning of the async event RawKeyDown.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace InputMsg_SetFocus {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'InputMsg_SetFocus';
      // Denotes the end of the event InputMsg_SetFocus.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace InputRouterImpl {
    type FilterAndSendWebInputEvent = 
      TraceEvent.InputRouterImpl.FilterAndSendWebInputEvent.X;
  
    type KeboardEventHandled = 
      TraceEvent.InputRouterImpl.KeboardEventHandled.X;
  
    type MouseEventHandled = 
      TraceEvent.InputRouterImpl.MouseEventHandled.X;
  
    type OnHasTouchEventHandlers = 
      TraceEvent.InputRouterImpl.OnHasTouchEventHandlers.X;
  
    namespace FilterAndSendWebInputEvent {
      interface X extends Base {
        args: {
          type: string;
        };
        // Duration.
        dur: number;
        name: 'InputRouterImpl::FilterAndSendWebInputEvent';
        // Denotes the end of the event FilterAndSendWebInputEvent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace KeboardEventHandled {
      interface X extends Base {
        args: {
          ack: string;
          type: string;
        };
        // Duration.
        dur: number;
        name: 'InputRouterImpl::KeboardEventHandled';
        // Denotes the end of the event KeboardEventHandled.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace MouseEventHandled {
      interface X extends Base {
        args: {
          ack: string;
          type: string;
        };
        // Duration.
        dur: number;
        name: 'InputRouterImpl::MouseEventHandled';
        // Denotes the end of the event MouseEventHandled.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnHasTouchEventHandlers {
      interface X extends Base {
        args: {
          has_handlers: boolean;
        };
        // Duration.
        dur: number;
        name: 'InputRouterImpl::OnHasTouchEventHandlers';
        // Denotes the end of the event OnHasTouchEventHandlers.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace InstallConditionalFeatures {
    interface X extends Base {
      args: {
        IsMainFrame: boolean;
      };
      // Duration.
      dur: number;
      name: 'InstallConditionalFeatures';
      // Denotes the end of the event InstallConditionalFeatures.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace InteractiveTime {
    interface R extends Base {
      args: {
        frame: string;
        had_user_input_before_interactive: boolean;
      };
      name: 'InteractiveTime';
      // Denotes a mark of the event InteractiveTime.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace InvalidateLayout {
    interface I extends Base {
      args: {
        data: {
          frame: string;
          stackTrace?: {
            columnNumber: number;
            functionName: string;
            lineNumber: number;
            scriptId: string;
            url: string;
          }[];
        };
      };
      name: 'InvalidateLayout';
      // Denotes an event InvalidateLayout. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Ipc_tq {
    interface C extends Base {
      args: {
        value: number;
      };
      name: 'ipc_tq';
      // Denotes a counter for the event Ipc_tq.
      ph: 'C';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace IPCChannel {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'IPC Channel';
      // Denotes the end of the event IPCChannel.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Is_gesture_active {
    interface C extends Base {
      args: {
        value: number;
      };
      name: 'is_gesture_active';
      // Denotes a counter for the event Is_gesture_active.
      ph: 'C';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ItemParallelJob {
    type Run = 
      TraceEvent.ItemParallelJob.Run.I;
  
    namespace Run {
      interface I extends Base {
        args: {
          num_items: number;
          num_tasks: number;
        };
        name: 'ItemParallelJob::Run';
        // Denotes an event Run. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Job {
    type ExecuteProxyResolver = 
      TraceEvent.Job.ExecuteProxyResolver.X;
  
    namespace ExecuteProxyResolver {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Job::ExecuteProxyResolver';
        // Denotes the end of the event ExecuteProxyResolver.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace KeyedServiceFactory {
    type GetServiceForContext = 
      TraceEvent.KeyedServiceFactory.GetServiceForContext.X;
  
    namespace GetServiceForContext {
      interface X extends Base {
        args: {
          service_name: string;
        };
        // Duration.
        dur: number;
        name: 'KeyedServiceFactory::GetServiceForContext';
        // Denotes the end of the event GetServiceForContext.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace KeyframeModel {
    interface F extends Base {
      args: {
      
      };
      id: string;
      name: 'KeyframeModel';
      // Denotes the ending of the async event KeyframeModel.
      ph: 'F';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface S extends Base {
      args: {
        Name: string;
      };
      id: string;
      name: 'KeyframeModel';
      // Denotes the beginning of the async event KeyframeModel.
      ph: 'S';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace KeywordProvider {
    type Start = 
      TraceEvent.KeywordProvider.Start.X;
  
    namespace Start {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'KeywordProvider::Start';
        // Denotes the end of the event Start.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace LatencyInfo {
    type Flow = 
      TraceEvent.LatencyInfo.Flow.X;
  
    namespace Flow {
      interface X extends Base {
        args: {
          frameTreeNodeId?: number;
          step?: string;
          trace_id?: number;
        };
        bind_id: string;
        // Duration.
        dur: number;
        flowPhase?: string;
        flow_in?: boolean;
        flow_out?: boolean;
        id: string;
        name: 'LatencyInfo.Flow';
        // Denotes the end of the event Flow.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace LaunchProcess {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'LaunchProcess';
      // Denotes the end of the event LaunchProcess.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Layer {
    type PaintContentsToDisplayList = 
      TraceEvent.Layer.PaintContentsToDisplayList.X;
  
    type PushPropertiesTo = 
      TraceEvent.Layer.PushPropertiesTo.X;
  
    type SetElementId = 
      TraceEvent.Layer.SetElementId.X;
  
    namespace PaintContentsToDisplayList {
      interface X extends Base {
        args: {
          name: string;
        };
        // Duration.
        dur: number;
        name: 'Layer::PaintContentsToDisplayList';
        // Denotes the end of the event PaintContentsToDisplayList.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PushPropertiesTo {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Layer::PushPropertiesTo';
        // Denotes the end of the event PushPropertiesTo.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetElementId {
      interface X extends Base {
        args: {
          element: string;
        };
        // Duration.
        dur: number;
        name: 'Layer::SetElementId';
        // Denotes the end of the event SetElementId.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace LayerAnimator {
    type Step = 
      TraceEvent.LayerAnimator.Step.X;
  
    namespace Step {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LayerAnimator::Step';
        // Denotes the end of the event Step.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace LayerId {
    interface D extends Base {
      args: {
      
      };
      id: string;
      name: 'layerId';
      // Denotes a delete object of the event LayerId.
      ph: 'D';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface N extends Base {
      args: {
      
      };
      id: string;
      name: 'layerId';
      // Denotes a create object of the event LayerId.
      ph: 'N';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace LayerImpl {
    type SetElementId = 
      TraceEvent.LayerImpl.SetElementId.X;
  
    namespace SetElementId {
      interface X extends Base {
        args: {
          element: string;
        };
        // Duration.
        dur: number;
        name: 'LayerImpl::SetElementId';
        // Denotes the end of the event SetElementId.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace LayerInvalidationTracking {
    interface I extends Base {
      args: {
        data: {
          frame: string;
          paintId: number;
          reason: string;
        };
      };
      name: 'LayerInvalidationTracking';
      // Denotes an event LayerInvalidationTracking. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace LayerTreeHost {
    type DoUpdateLayers = 
      TraceEvent.LayerTreeHost.DoUpdateLayers.X;
  
    type FinishCommitOnImplThread = 
      TraceEvent.LayerTreeHost.FinishCommitOnImplThread.X;
  
    type InitializeForReal = 
      TraceEvent.LayerTreeHost.InitializeForReal.X;
  
    type LayerTreeHost = 
      TraceEvent.LayerTreeHost.LayerTreeHost.X;
  
    type PushProperties = 
      TraceEvent.LayerTreeHost.PushProperties.X;
  
    type SetHasGpuRasterizationTrigger = 
      TraceEvent.LayerTreeHost.SetHasGpuRasterizationTrigger.I;
  
    type SetLayerTreeFrameSink = 
      TraceEvent.LayerTreeHost.SetLayerTreeFrameSink.X;
  
    type UpdateLayers_BuiltPropertyTrees = 
      TraceEvent.LayerTreeHost.UpdateLayers_BuiltPropertyTrees.I;
  
    namespace AnimationHost {
      type PushProperties = 
        TraceEvent.LayerTreeHost.AnimationHost.PushProperties.X;
    
      namespace PushProperties {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'LayerTreeHost::AnimationHost::PushProperties';
          // Denotes the end of the event PushProperties.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  
    namespace DoUpdateLayers {
      interface X extends Base {
        args: {
          source_frame_number: number;
        };
        // Duration.
        dur: number;
        name: 'LayerTreeHost::DoUpdateLayers';
        // Denotes the end of the event DoUpdateLayers.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace FinishCommitOnImplThread {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LayerTreeHost::FinishCommitOnImplThread';
        // Denotes the end of the event FinishCommitOnImplThread.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace InitializeForReal {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LayerTreeHost::InitializeForReal';
        // Denotes the end of the event InitializeForReal.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace LayerTreeHost {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LayerTreeHost::~LayerTreeHost';
        // Denotes the end of the event LayerTreeHost.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PushProperties {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LayerTreeHost::PushProperties';
        // Denotes the end of the event PushProperties.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetHasGpuRasterizationTrigger {
      interface I extends Base {
        args: {
          has_trigger: boolean;
        };
        name: 'LayerTreeHost::SetHasGpuRasterizationTrigger';
        // Denotes an event SetHasGpuRasterizationTrigger. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetLayerTreeFrameSink {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LayerTreeHost::SetLayerTreeFrameSink';
        // Denotes the end of the event SetLayerTreeFrameSink.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UpdateLayers_BuiltPropertyTrees {
      interface I extends Base {
        args: {
          property_trees: {
            clip_tree: {
              nodes: {
                clip: {
                
                }[];
                clip_type: number;
                id: number;
                parent_id: number;
                transform_id: number;
              }[];
            };
            effect_tree: {
              nodes: {
                backdrop_filter_quality: number;
                blend_mode: string;
                cache_render_surface: boolean;
                clip_id: number;
                closest_ancestor_with_cached_render_surface_id: number;
                closest_ancestor_with_copy_request_id: number;
                double_sided: boolean;
                effect_changed: boolean;
                has_copy_request: boolean;
                has_potential_filter_animation: boolean;
                has_potential_opacity_animation: boolean;
                has_render_surface: boolean;
                id: number;
                is_drawn: boolean;
                mask_layer_id: number;
                opacity: number;
                parent_id: number;
                stable_id: number;
                subtree_has_copy_request: number;
                target_id: number;
                transform_id: number;
                trilinear_filtering: boolean;
              }[];
            };
            scroll_tree: {
              nodes: {
                bounds: {
                  height: number;
                  width: number;
                };
                container_bounds: {
                  height: number;
                  width: number;
                };
                element_id: {
                  id_: number;
                };
                id: number;
                offset_to_transform_parent: {
                
                }[];
                overscroll_behavior_x: number;
                overscroll_behavior_y: number;
                parent_id: number;
                scrollable: boolean;
                should_flatten: boolean;
                transform_id: number;
                user_scrollable_horizontal: boolean;
                user_scrollable_vertical: boolean;
              }[];
            };
            sequence_number: number;
            transform_tree: {
              nodes: {
                element_id: {
                  id_: number;
                };
                flattens_inherited_transform: number;
                id: number;
                local: {
                
                }[];
                parent_id: number;
                post_local: {
                
                }[];
                pre_local: {
                
                }[];
                scroll_offset: {
                
                }[];
                snap_amount: {
                
                }[];
                sorting_context_id: number;
                source_node_id: number;
              }[];
            };
          };
        };
        name: 'LayerTreeHost::UpdateLayers_BuiltPropertyTrees';
        // Denotes an event UpdateLayers_BuiltPropertyTrees. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UpdateLayers {
      type BuildPropertyTrees = 
        TraceEvent.LayerTreeHost.UpdateLayers.BuildPropertyTrees.X;
    
      namespace BuildPropertyTrees {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'LayerTreeHost::UpdateLayers::BuildPropertyTrees';
          // Denotes the end of the event BuildPropertyTrees.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace LayerTreeHostImpl {
    type ActivateSyncTree = 
      TraceEvent.LayerTreeHostImpl.ActivateSyncTree.X;
  
    type BeginCommit = 
      TraceEvent.LayerTreeHostImpl.BeginCommit.X;
  
    type BuildEvictionQueue = 
      TraceEvent.LayerTreeHostImpl.BuildEvictionQueue.X;
  
    type BuildRasterQueue = 
      TraceEvent.LayerTreeHostImpl.BuildRasterQueue.X;
  
    type CalculateRenderPasses = 
      TraceEvent.LayerTreeHostImpl.CalculateRenderPasses.B |
      TraceEvent.LayerTreeHostImpl.CalculateRenderPasses.E;
  
    type CanDrawemptyviewport = 
      TraceEvent.LayerTreeHostImpl.CanDrawemptyviewport.I;
  
    type CanDrawnorootlayer = 
      TraceEvent.LayerTreeHostImpl.CanDrawnorootlayer.I;
  
    type CommitComplete = 
      TraceEvent.LayerTreeHostImpl.CommitComplete.X;
  
    type GenerateCompositorFrame = 
      TraceEvent.LayerTreeHostImpl.GenerateCompositorFrame.X;
  
    type InitializeFrameSink = 
      TraceEvent.LayerTreeHostImpl.InitializeFrameSink.X;
  
    type LayerTreeHostImpl = 
      TraceEvent.LayerTreeHostImpl.LayerTreeHostImpl.X;
  
    type NotifyTileStateChanged = 
      TraceEvent.LayerTreeHostImpl.NotifyTileStateChanged.X;
  
    type PrepareToDraw = 
      TraceEvent.LayerTreeHostImpl.PrepareToDraw.X;
  
    type ReleaseLayerTreeFrameSink = 
      TraceEvent.LayerTreeHostImpl.ReleaseLayerTreeFrameSink.X;
  
    type SetVisible = 
      TraceEvent.LayerTreeHostImpl.SetVisible.F |
      TraceEvent.LayerTreeHostImpl.SetVisible.S;
  
    namespace ActivateSyncTree {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LayerTreeHostImpl::ActivateSyncTree()';
        // Denotes the end of the event ActivateSyncTree.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BeginCommit {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LayerTreeHostImpl::BeginCommit';
        // Denotes the end of the event BeginCommit.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BuildEvictionQueue {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LayerTreeHostImpl::BuildEvictionQueue';
        // Denotes the end of the event BuildEvictionQueue.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BuildRasterQueue {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LayerTreeHostImpl::BuildRasterQueue';
        // Denotes the end of the event BuildRasterQueue.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CalculateRenderPasses {
      interface B extends Base {
        args: {
          RequiresHighResToDraw: boolean;
          'render_surface_list.size()': number;
        };
        name: 'LayerTreeHostImpl::CalculateRenderPasses';
        // Denotes the beginning of the event CalculateRenderPasses.
        ph: 'B';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface E extends Base {
        args: {
          draw_result: number;
          'missing tiles': number;
        };
        name: 'LayerTreeHostImpl::CalculateRenderPasses';
        // Denotes the ending of the event CalculateRenderPasses.
        ph: 'E';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CanDrawemptyviewport {
      interface I extends Base {
        args: {
        
        };
        name: 'LayerTreeHostImpl::CanDraw empty viewport';
        // Denotes an event CanDrawemptyviewport. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CanDrawnorootlayer {
      interface I extends Base {
        args: {
        
        };
        name: 'LayerTreeHostImpl::CanDraw no root layer';
        // Denotes an event CanDrawnorootlayer. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CommitComplete {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LayerTreeHostImpl::CommitComplete';
        // Denotes the end of the event CommitComplete.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GenerateCompositorFrame {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LayerTreeHostImpl::GenerateCompositorFrame';
        // Denotes the end of the event GenerateCompositorFrame.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace InitializeFrameSink {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LayerTreeHostImpl::InitializeFrameSink';
        // Denotes the end of the event InitializeFrameSink.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace LayerTreeHostImpl {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LayerTreeHostImpl::~LayerTreeHostImpl()';
        // Denotes the end of the event LayerTreeHostImpl.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace NotifyTileStateChanged {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LayerTreeHostImpl::NotifyTileStateChanged';
        // Denotes the end of the event NotifyTileStateChanged.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PrepareToDraw {
      interface X extends Base {
        args: {
          SourceFrameNumber: number;
        };
        // Duration.
        dur: number;
        name: 'LayerTreeHostImpl::PrepareToDraw';
        // Denotes the end of the event PrepareToDraw.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ReleaseLayerTreeFrameSink {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LayerTreeHostImpl::ReleaseLayerTreeFrameSink';
        // Denotes the end of the event ReleaseLayerTreeFrameSink.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetVisible {
      interface F extends Base {
        args: {
        
        };
        id: string;
        name: 'LayerTreeHostImpl::SetVisible';
        // Denotes the ending of the async event SetVisible.
        ph: 'F';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface S extends Base {
        args: {
          LayerTreeHostImpl: string;
        };
        id: string;
        name: 'LayerTreeHostImpl::SetVisible';
        // Denotes the beginning of the async event SetVisible.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace LayerTreeImpl {
    type AddToElementLayerList = 
      TraceEvent.LayerTreeImpl.AddToElementLayerList.X;
  
    type InvalidateRegionForImages = 
      TraceEvent.LayerTreeImpl.InvalidateRegionForImages.B |
      TraceEvent.LayerTreeImpl.InvalidateRegionForImages.E;
  
    type PushPropertiesTo = 
      TraceEvent.LayerTreeImpl.PushPropertiesTo.X;
  
    type PushPropertyTreesTo = 
      TraceEvent.LayerTreeImpl.PushPropertyTreesTo.X;
  
    type RemoveFromElementLayerList = 
      TraceEvent.LayerTreeImpl.RemoveFromElementLayerList.X;
  
    namespace AddToElementLayerList {
      interface X extends Base {
        args: {
          element: string;
        };
        // Duration.
        dur: number;
        name: 'LayerTreeImpl::AddToElementLayerList';
        // Denotes the end of the event AddToElementLayerList.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace InvalidateRegionForImages {
      interface B extends Base {
        args: {
          total_layer_count: number;
        };
        name: 'LayerTreeImpl::InvalidateRegionForImages';
        // Denotes the beginning of the event InvalidateRegionForImages.
        ph: 'B';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface E extends Base {
        args: {
          counts: string;
        };
        name: 'LayerTreeImpl::InvalidateRegionForImages';
        // Denotes the ending of the event InvalidateRegionForImages.
        ph: 'E';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PushPropertiesTo {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LayerTreeImpl::PushPropertiesTo';
        // Denotes the end of the event PushPropertiesTo.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PushPropertyTreesTo {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LayerTreeImpl::PushPropertyTreesTo';
        // Denotes the end of the event PushPropertyTreesTo.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RemoveFromElementLayerList {
      interface X extends Base {
        args: {
          element: string;
        };
        // Duration.
        dur: number;
        name: 'LayerTreeImpl::RemoveFromElementLayerList';
        // Denotes the end of the event RemoveFromElementLayerList.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UpdateDrawProperties {
      type CalculateDrawProperties = 
        TraceEvent.LayerTreeImpl.UpdateDrawProperties.CalculateDrawProperties.X;
    
      type Occlusion = 
        TraceEvent.LayerTreeImpl.UpdateDrawProperties.Occlusion.X;
    
      type UpdateTiles = 
        TraceEvent.LayerTreeImpl.UpdateDrawProperties.UpdateTiles.B |
        TraceEvent.LayerTreeImpl.UpdateDrawProperties.UpdateTiles.E;
    
      namespace CalculateDrawProperties {
        interface X extends Base {
          args: {
            IsActive: boolean;
            SourceFrameNumber: number;
          };
          // Duration.
          dur: number;
          name: 'LayerTreeImpl::UpdateDrawProperties::CalculateDrawProperties';
          // Denotes the end of the event CalculateDrawProperties.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace Occlusion {
        interface X extends Base {
          args: {
            IsActive: boolean;
            SourceFrameNumber: number;
          };
          // Duration.
          dur: number;
          name: 'LayerTreeImpl::UpdateDrawProperties::Occlusion';
          // Denotes the end of the event Occlusion.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace UpdateTiles {
        interface B extends Base {
          args: {
            IsActive: boolean;
            SourceFrameNumber: number;
          };
          name: 'LayerTreeImpl::UpdateDrawProperties::UpdateTiles';
          // Denotes the beginning of the event UpdateTiles.
          ph: 'B';
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      
        interface E extends Base {
          args: {
            layers_updated_count: number;
          };
          name: 'LayerTreeImpl::UpdateDrawProperties::UpdateTiles';
          // Denotes the ending of the event UpdateTiles.
          ph: 'E';
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LayerTreeImpl::UpdateDrawProperties';
        // Denotes the end of the event UpdateDrawProperties.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Layout {
    interface B extends Base {
      args: {
        beginData: {
          dirtyObjects: number;
          frame: string;
          partialLayout: boolean;
          stackTrace?: {
            columnNumber: number;
            functionName: string;
            lineNumber: number;
            scriptId: string;
            url: string;
          }[];
          totalObjects: number;
        };
      };
      name: 'Layout';
      // Denotes the beginning of the event Layout.
      ph: 'B';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface E extends Base {
      args: {
        endData: {
          root: {
          
          }[];
          rootNode: number;
        };
      };
      name: 'Layout';
      // Denotes the ending of the event Layout.
      ph: 'E';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace LayoutInvalidationTracking {
    interface I extends Base {
      args: {
        data: {
          frame: string;
          nodeId: number;
          nodeName: string;
          reason: string;
          stackTrace?: {
            columnNumber: number;
            functionName: string;
            lineNumber: number;
            scriptId: string;
            url: string;
          }[];
        };
      };
      name: 'LayoutInvalidationTracking';
      // Denotes an event LayoutInvalidationTracking. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace LayoutView {
    type CommitPendingSelection = 
      TraceEvent.LayoutView.CommitPendingSelection.X;
  
    namespace CommitPendingSelection {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LayoutView::commitPendingSelection';
        // Denotes the end of the event CommitPendingSelection.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Leveldb {
    namespace Mojom {
      type LevelDBService = 
        TraceEvent.Leveldb.Mojom.LevelDBService.X;
    
      namespace LevelDBService {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'leveldb.mojom.LevelDBService';
          // Denotes the end of the event LevelDBService.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace LiveObjectVisitor {
    type VisitBlackObjects = 
      TraceEvent.LiveObjectVisitor.VisitBlackObjects.X;
  
    type VisitBlackObjectsNoFail = 
      TraceEvent.LiveObjectVisitor.VisitBlackObjectsNoFail.X;
  
    namespace VisitBlackObjects {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LiveObjectVisitor::VisitBlackObjects';
        // Denotes the end of the event VisitBlackObjects.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace VisitBlackObjectsNoFail {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LiveObjectVisitor::VisitBlackObjectsNoFail';
        // Denotes the end of the event VisitBlackObjectsNoFail.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace LoadAnyStartablePendingRequests {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'LoadAnyStartablePendingRequests';
      // Denotes the end of the event LoadAnyStartablePendingRequests.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace LoadEndeventUtils {
    interface R extends Base {
      args: {
        data: {
          navigationId: string;
        };
      };
      name: 'loadEndeventUtils';
      // Denotes a mark of the event LoadEndeventUtils.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace LoadEndpixelQueue {
    interface R extends Base {
      args: {
        data: {
          navigationId: string;
        };
      };
      name: 'loadEndpixelQueue';
      // Denotes a mark of the event LoadEndpixelQueue.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace LoadEventEnd {
    interface R extends Base {
      args: {
        frame: string;
      };
      name: 'loadEventEnd';
      // Denotes a mark of the event LoadEventEnd.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace LoadEventStart {
    interface R extends Base {
      args: {
        frame: string;
      };
      name: 'loadEventStart';
      // Denotes a mark of the event LoadEventStart.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace LoadFinished {
    interface I extends Base {
      args: {
      
      };
      name: 'LoadFinished';
      // Denotes an event LoadFinished. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace LoadStarteventUtils {
    interface R extends Base {
      args: {
        data: {
          navigationId: string;
        };
      };
      name: 'loadStarteventUtils';
      // Denotes a mark of the event LoadStarteventUtils.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace LoadStartpixelQueue {
    interface R extends Base {
      args: {
        data: {
          navigationId: string;
        };
      };
      name: 'loadStartpixelQueue';
      // Denotes a mark of the event LoadStartpixelQueue.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace LocalFrameView {
    type FrameRectsChanged = 
      TraceEvent.LocalFrameView.FrameRectsChanged.X;
  
    type Layout = 
      TraceEvent.LocalFrameView.Layout.X;
  
    type PerformLayout = 
      TraceEvent.LocalFrameView.PerformLayout.B |
      TraceEvent.LocalFrameView.PerformLayout.E;
  
    type PerformPostLayoutTasks = 
      TraceEvent.LocalFrameView.PerformPostLayoutTasks.X;
  
    type PerformPreLayoutTasks = 
      TraceEvent.LocalFrameView.PerformPreLayoutTasks.X;
  
    type RunCompositingLifecyclePhase = 
      TraceEvent.LocalFrameView.RunCompositingLifecyclePhase.X;
  
    type RunPaintLifecyclePhase = 
      TraceEvent.LocalFrameView.RunPaintLifecyclePhase.X;
  
    type RunPrePaintLifecyclePhase = 
      TraceEvent.LocalFrameView.RunPrePaintLifecyclePhase.X;
  
    type RunStyleAndLayoutLifecyclePhases = 
      TraceEvent.LocalFrameView.RunStyleAndLayoutLifecyclePhases.X;
  
    type UpdateRenderThrottlingStatus = 
      TraceEvent.LocalFrameView.UpdateRenderThrottlingStatus.X;
  
    type UpdateStyleAndLayoutIfNeededRecursive = 
      TraceEvent.LocalFrameView.UpdateStyleAndLayoutIfNeededRecursive.X;
  
    type UpdateViewportIntersectionsForSubtree = 
      TraceEvent.LocalFrameView.UpdateViewportIntersectionsForSubtree.X;
  
    namespace FrameRectsChanged {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LocalFrameView::frameRectsChanged';
        // Denotes the end of the event FrameRectsChanged.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Layout {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LocalFrameView::layout';
        // Denotes the end of the event Layout.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PerformLayout {
      interface B extends Base {
        args: {
          contentsHeightBeforeLayout: number;
        };
        name: 'LocalFrameView::performLayout';
        // Denotes the beginning of the event PerformLayout.
        ph: 'B';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface E extends Base {
        args: {
          counters: {
            LayoutAnalyzerStackMaximumDepth: number;
            LayoutBlockHeightChanged?: number;
            LayoutBlockSizeChanged?: number;
            LayoutBlockSizeDidNotChange?: number;
            LayoutBlockWidthChanged?: number;
            LayoutObjectsThatAreFloating?: number;
            LayoutObjectsThatAreOutOfFlowPositioned: number;
            LayoutObjectsThatAreTableCells?: number;
            LayoutObjectsThatHadNeverHadLayout?: number;
            LayoutObjectsThatHaveALayer: number;
            LayoutObjectsThatNeedLayoutForThemselves?: number;
            LayoutObjectsThatNeedSimplifiedLayout?: number;
            TotalLayoutObjectsThatWereLaidOut: number;
            approximateBlankCharacterCount: number;
            contentsHeightAfterLayout: number;
            frame: string;
            host: string;
            visibleHeight: number;
          };
        };
        name: 'LocalFrameView::performLayout';
        // Denotes the ending of the event PerformLayout.
        ph: 'E';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PerformPostLayoutTasks {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LocalFrameView::performPostLayoutTasks';
        // Denotes the end of the event PerformPostLayoutTasks.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PerformPreLayoutTasks {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LocalFrameView::performPreLayoutTasks';
        // Denotes the end of the event PerformPreLayoutTasks.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RunCompositingLifecyclePhase {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LocalFrameView::RunCompositingLifecyclePhase';
        // Denotes the end of the event RunCompositingLifecyclePhase.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RunPaintLifecyclePhase {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LocalFrameView::RunPaintLifecyclePhase';
        // Denotes the end of the event RunPaintLifecyclePhase.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RunPrePaintLifecyclePhase {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LocalFrameView::RunPrePaintLifecyclePhase';
        // Denotes the end of the event RunPrePaintLifecyclePhase.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RunStyleAndLayoutLifecyclePhases {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LocalFrameView::RunStyleAndLayoutLifecyclePhases';
        // Denotes the end of the event RunStyleAndLayoutLifecyclePhases.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UpdateRenderThrottlingStatus {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LocalFrameView::updateRenderThrottlingStatus';
        // Denotes the end of the event UpdateRenderThrottlingStatus.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UpdateStyleAndLayoutIfNeededRecursive {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LocalFrameView::updateStyleAndLayoutIfNeededRecursive';
        // Denotes the end of the event UpdateStyleAndLayoutIfNeededRecursive.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UpdateViewportIntersectionsForSubtree {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'LocalFrameView::UpdateViewportIntersectionsForSubtree';
        // Denotes the end of the event UpdateViewportIntersectionsForSubtree.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace LocalSurfaceId {
    namespace Embed {
      type Flow = 
        TraceEvent.LocalSurfaceId.Embed.Flow.X;
    
      namespace Flow {
        interface X extends Base {
          args: {
            child_surface_id?: string;
            local_surface_id?: string;
            step: string;
            surface_id?: string;
          };
          bind_id: string;
          // Duration.
          dur: number;
          flow_in?: boolean;
          flow_out?: boolean;
          id2: {
            global: string;
          };
          name: 'LocalSurfaceId.Embed.Flow';
          // Denotes the end of the event Flow.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  
    namespace Submission {
      type Flow = 
        TraceEvent.LocalSurfaceId.Submission.Flow.X;
    
      namespace Flow {
        interface X extends Base {
          args: {
            local_surface_id?: string;
            local_surface_id_allocation?: string;
            step: string;
            surface_id?: string;
          };
          bind_id: string;
          // Duration.
          dur: number;
          flow_in?: boolean;
          flow_out?: boolean;
          id2: {
            global: string;
          };
          name: 'LocalSurfaceId.Submission.Flow';
          // Denotes the end of the event Flow.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace LocalWindowProxy {
    type CreateContext = 
      TraceEvent.LocalWindowProxy.CreateContext.X;
  
    type Initialize = 
      TraceEvent.LocalWindowProxy.Initialize.X;
  
    type SetupWindowPrototypeChain = 
      TraceEvent.LocalWindowProxy.SetupWindowPrototypeChain.X;
  
    type UpdateDocumentProperty = 
      TraceEvent.LocalWindowProxy.UpdateDocumentProperty.X;
  
    namespace CreateContext {
      interface X extends Base {
        args: {
          IsMainFrame: boolean;
        };
        // Duration.
        dur: number;
        name: 'LocalWindowProxy::CreateContext';
        // Denotes the end of the event CreateContext.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Initialize {
      interface X extends Base {
        args: {
          IsMainFrame: boolean;
        };
        // Duration.
        dur: number;
        name: 'LocalWindowProxy::Initialize';
        // Denotes the end of the event Initialize.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetupWindowPrototypeChain {
      interface X extends Base {
        args: {
          IsMainFrame: boolean;
        };
        // Duration.
        dur: number;
        name: 'LocalWindowProxy::SetupWindowPrototypeChain';
        // Denotes the end of the event SetupWindowPrototypeChain.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UpdateDocumentProperty {
      interface X extends Base {
        args: {
          IsMainFrame: boolean;
        };
        // Duration.
        dur: number;
        name: 'LocalWindowProxy::UpdateDocumentProperty';
        // Denotes the end of the event UpdateDocumentProperty.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace LongTask {
    interface I extends Base {
      args: {
        duration: number;
      };
      name: 'LongTask';
      // Denotes an event LongTask. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Lteu {
    interface b extends Base {
      args: {
      
      };
      id: string;
      name: 'lteu';
      // Denotes the beginning of the nestable async flow event Lteu.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
      
      };
      id: string;
      name: 'lteu';
      // Denotes a step into the nestable async flow event Lteu.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Ltpq {
    interface b extends Base {
      args: {
      
      };
      id: string;
      name: 'ltpq';
      // Denotes the beginning of the nestable async flow event Ltpq.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
      
      };
      id: string;
      name: 'ltpq';
      // Denotes a step into the nestable async flow event Ltpq.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace MainThreadLatency {
    interface C extends Base {
      args: {
        value: number;
      };
      name: 'MainThreadLatency';
      // Denotes a counter for the event MainThreadLatency.
      ph: 'C';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace MainThreadScheduler {
    namespace RendererMainThreadLoad {
      type Background = 
        TraceEvent.MainThreadScheduler.RendererMainThreadLoad.Background.C;
    
      type Foreground = 
        TraceEvent.MainThreadScheduler.RendererMainThreadLoad.Foreground.C;
    
      namespace Background {
        interface C extends Base {
          args: {
            value: number;
          };
          name: 'MainThreadScheduler.RendererMainThreadLoad.Background';
          // Denotes a counter for the event Background.
          ph: 'C';
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace Foreground {
        interface C extends Base {
          args: {
            value: number;
          };
          name: 'MainThreadScheduler.RendererMainThreadLoad.Foreground';
          // Denotes a counter for the event Foreground.
          ph: 'C';
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      interface C extends Base {
        args: {
          value: number;
        };
        name: 'MainThreadScheduler.RendererMainThreadLoad';
        // Denotes a counter for the event RendererMainThreadLoad.
        ph: 'C';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace MainThreadSchedulerIdlePeriod {
    interface F extends Base {
      args: {
      
      };
      id: string;
      name: 'MainThreadSchedulerIdlePeriod';
      // Denotes the ending of the async event MainThreadSchedulerIdlePeriod.
      ph: 'F';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface S extends Base {
      args: {
        idle_period_length_ms: number;
      };
      id: string;
      name: 'MainThreadSchedulerIdlePeriod';
      // Denotes the beginning of the async event MainThreadSchedulerIdlePeriod.
      ph: 'S';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface T extends Base {
      args: {
        step: string;
      };
      id: string;
      name: 'MainThreadSchedulerIdlePeriod';
      // Denotes a step into the async event MainThreadSchedulerIdlePeriod.
      ph: 'T';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace MainThreadSchedulerImpl {
    type BeginFrameNotExpectedSoon = 
      TraceEvent.MainThreadSchedulerImpl.BeginFrameNotExpectedSoon.X;
  
    type DidCommitFrameToCompositor = 
      TraceEvent.MainThreadSchedulerImpl.DidCommitFrameToCompositor.X;
  
    type DidCommitProvisionalLoad = 
      TraceEvent.MainThreadSchedulerImpl.DidCommitProvisionalLoad.X;
  
    type DidHandleInputEventOnCompositorThread = 
      TraceEvent.MainThreadSchedulerImpl.DidHandleInputEventOnCompositorThread.X;
  
    type DidHandleInputEventOnMainThread = 
      TraceEvent.MainThreadSchedulerImpl.DidHandleInputEventOnMainThread.X;
  
    type DidStartProvisionalLoad = 
      TraceEvent.MainThreadSchedulerImpl.DidStartProvisionalLoad.X;
  
    type DispatchRequestBeginMainFrameNotExpected = 
      TraceEvent.MainThreadSchedulerImpl.DispatchRequestBeginMainFrameNotExpected.X;
  
    type EndIdlePeriod = 
      TraceEvent.MainThreadSchedulerImpl.EndIdlePeriod.X;
  
    type OnFirstMeaningfulPaint = 
      TraceEvent.MainThreadSchedulerImpl.OnFirstMeaningfulPaint.X;
  
    type OnRendererBackgrounded = 
      TraceEvent.MainThreadSchedulerImpl.OnRendererBackgrounded.X;
  
    type OnRendererForegrounded = 
      TraceEvent.MainThreadSchedulerImpl.OnRendererForegrounded.X;
  
    type OnRendererHidden = 
      TraceEvent.MainThreadSchedulerImpl.OnRendererHidden.X;
  
    type OnRendererVisible = 
      TraceEvent.MainThreadSchedulerImpl.OnRendererVisible.X;
  
    type ResetForNavigationLocked = 
      TraceEvent.MainThreadSchedulerImpl.ResetForNavigationLocked.X;
  
    type SetAllRenderWidgetsHidden = 
      TraceEvent.MainThreadSchedulerImpl.SetAllRenderWidgetsHidden.X;
  
    type UpdateForInputEventOnCompositorThread = 
      TraceEvent.MainThreadSchedulerImpl.UpdateForInputEventOnCompositorThread.X;
  
    type WillBeginFrame = 
      TraceEvent.MainThreadSchedulerImpl.WillBeginFrame.X;
  
    namespace BeginFrameNotExpectedSoon {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'MainThreadSchedulerImpl::BeginFrameNotExpectedSoon';
        // Denotes the end of the event BeginFrameNotExpectedSoon.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidCommitFrameToCompositor {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'MainThreadSchedulerImpl::DidCommitFrameToCompositor';
        // Denotes the end of the event DidCommitFrameToCompositor.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidCommitProvisionalLoad {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'MainThreadSchedulerImpl::DidCommitProvisionalLoad';
        // Denotes the end of the event DidCommitProvisionalLoad.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidHandleInputEventOnCompositorThread {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'MainThreadSchedulerImpl::DidHandleInputEventOnCompositorThread';
        // Denotes the end of the event DidHandleInputEventOnCompositorThread.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidHandleInputEventOnMainThread {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'MainThreadSchedulerImpl::DidHandleInputEventOnMainThread';
        // Denotes the end of the event DidHandleInputEventOnMainThread.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidStartProvisionalLoad {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'MainThreadSchedulerImpl::DidStartProvisionalLoad';
        // Denotes the end of the event DidStartProvisionalLoad.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DispatchRequestBeginMainFrameNotExpected {
      interface X extends Base {
        args: {
          has_tasks: boolean;
        };
        // Duration.
        dur: number;
        name: 'MainThreadSchedulerImpl::DispatchRequestBeginMainFrameNotExpected';
        // Denotes the end of the event DispatchRequestBeginMainFrameNotExpected.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace EndIdlePeriod {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'MainThreadSchedulerImpl::EndIdlePeriod';
        // Denotes the end of the event EndIdlePeriod.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnFirstMeaningfulPaint {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'MainThreadSchedulerImpl::OnFirstMeaningfulPaint';
        // Denotes the end of the event OnFirstMeaningfulPaint.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnRendererBackgrounded {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'MainThreadSchedulerImpl::OnRendererBackgrounded';
        // Denotes the end of the event OnRendererBackgrounded.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnRendererForegrounded {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'MainThreadSchedulerImpl::OnRendererForegrounded';
        // Denotes the end of the event OnRendererForegrounded.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnRendererHidden {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'MainThreadSchedulerImpl::OnRendererHidden';
        // Denotes the end of the event OnRendererHidden.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnRendererVisible {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'MainThreadSchedulerImpl::OnRendererVisible';
        // Denotes the end of the event OnRendererVisible.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ResetForNavigationLocked {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'MainThreadSchedulerImpl::ResetForNavigationLocked';
        // Denotes the end of the event ResetForNavigationLocked.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetAllRenderWidgetsHidden {
      interface X extends Base {
        args: {
          hidden: boolean;
        };
        // Duration.
        dur: number;
        name: 'MainThreadSchedulerImpl::SetAllRenderWidgetsHidden';
        // Denotes the end of the event SetAllRenderWidgetsHidden.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UpdateForInputEventOnCompositorThread {
      interface X extends Base {
        args: {
          input_event_state: string;
          type: number;
        };
        // Duration.
        dur: number;
        name: 'MainThreadSchedulerImpl::UpdateForInputEventOnCompositorThread';
        // Denotes the end of the event UpdateForInputEventOnCompositorThread.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace WillBeginFrame {
      interface X extends Base {
        args: {
          args: {
            animate_only: boolean;
            deadline_us: number;
            frame_time_us: number;
            interval_us: number;
            on_critical_path: boolean;
            sequence_number: number;
            source_id: number;
            subtype: string;
            type: string;
          };
        };
        // Duration.
        dur: number;
        name: 'MainThreadSchedulerImpl::WillBeginFrame';
        // Denotes the end of the event WillBeginFrame.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace MajorGC {
    interface B extends Base {
      args: {
        type: string;
        usedHeapSizeBefore: number;
      };
      name: 'MajorGC';
      // Denotes the beginning of the event MajorGC.
      ph: 'B';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface E extends Base {
      args: {
        usedHeapSizeAfter: number;
      };
      name: 'MajorGC';
      // Denotes the ending of the event MajorGC.
      ph: 'E';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Mark_test {
    interface R extends Base {
      args: {
      
      };
      name: 'mark_test';
      // Denotes a mark of the event Mark_test.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace MarkAsMainFrame {
    interface I extends Base {
      args: {
        frame: string;
      };
      name: 'markAsMainFrame';
      // Denotes an event MarkAsMainFrame. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace MarkDOMContent {
    interface I extends Base {
      args: {
        data: {
          frame: string;
          isMainFrame: boolean;
          page: string;
        };
      };
      name: 'MarkDOMContent';
      // Denotes an event MarkDOMContent. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace MarkLoad {
    interface I extends Base {
      args: {
        data: {
          frame: string;
          isMainFrame: boolean;
          page: string;
        };
      };
      name: 'MarkLoad';
      // Denotes an event MarkLoad. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Measure_test {
    interface b extends Base {
      args: {
      
      };
      id: string;
      name: 'measure_test';
      // Denotes the beginning of the nestable async flow event Measure_test.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
      
      };
      id: string;
      name: 'measure_test';
      // Denotes a step into the nestable async flow event Measure_test.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Media {
    namespace Mojom {
      type InterfaceFactory = 
        TraceEvent.Media.Mojom.InterfaceFactory.X;
    
      type MediaMetricsProvider = 
        TraceEvent.Media.Mojom.MediaMetricsProvider.X;
    
      type MediaService = 
        TraceEvent.Media.Mojom.MediaService.X;
    
      type RemoterFactory = 
        TraceEvent.Media.Mojom.RemoterFactory.X;
    
      type VideoDecoder = 
        TraceEvent.Media.Mojom.VideoDecoder.X;
    
      namespace InterfaceFactory {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'media.mojom.InterfaceFactory';
          // Denotes the end of the event InterfaceFactory.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace MediaMetricsProvider {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'media.mojom.MediaMetricsProvider';
          // Denotes the end of the event MediaMetricsProvider.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace MediaService {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'media.mojom.MediaService';
          // Denotes the end of the event MediaService.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace RemoterFactory {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'media.mojom.RemoterFactory';
          // Denotes the end of the event RemoterFactory.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace VideoDecoder {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'media.mojom.VideoDecoder';
          // Denotes the end of the event VideoDecoder.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace MediaPlayerDelegateHostMsg_OnMutedStatusChanged {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'MediaPlayerDelegateHostMsg_OnMutedStatusChanged';
      // Denotes the end of the event MediaPlayerDelegateHostMsg_OnMutedStatusChanged.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Memory_instrumentation {
    namespace Mojom {
      type ClientProcess = 
        TraceEvent.Memory_instrumentation.Mojom.ClientProcess.X;
    
      type Coordinator = 
        TraceEvent.Memory_instrumentation.Mojom.Coordinator.X;
    
      namespace ClientProcess {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'memory_instrumentation.mojom.ClientProcess';
          // Denotes the end of the event ClientProcess.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace Coordinator {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'memory_instrumentation.mojom.Coordinator';
          // Denotes the end of the event Coordinator.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace MemoryCache {
    type Evict = 
      TraceEvent.MemoryCache.Evict.X;
  
    type Prune = 
      TraceEvent.MemoryCache.Prune.X;
  
    namespace Evict {
      interface X extends Base {
        args: {
          resource: string;
        };
        // Duration.
        dur: number;
        name: 'MemoryCache::evict';
        // Denotes the end of the event Evict.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Prune {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'MemoryCache::prune()';
        // Denotes the end of the event Prune.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace MemoryDumpManager {
    type FinishAsyncProcessDump = 
      TraceEvent.MemoryDumpManager.FinishAsyncProcessDump.X;
  
    type InvokeOnMemoryDump = 
      TraceEvent.MemoryDumpManager.InvokeOnMemoryDump.X;
  
    namespace FinishAsyncProcessDump {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'MemoryDumpManager::FinishAsyncProcessDump';
        // Denotes the end of the event FinishAsyncProcessDump.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace InvokeOnMemoryDump {
      interface X extends Base {
        args: {
          'dump_provider.name': string;
        };
        // Duration.
        dur: number;
        name: 'MemoryDumpManager::InvokeOnMemoryDump';
        // Denotes the end of the event InvokeOnMemoryDump.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace MemoryUsage {
    interface C extends Base {
      args: {
        InFlightToDisk: number;
        TotalStorage: number;
      };
      name: 'MemoryUsage';
      // Denotes a counter for the event MemoryUsage.
      ph: 'C';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace MessageLoop {
    type PostTask = 
      TraceEvent.MessageLoop.PostTask.X;
  
    type RunTask = 
      TraceEvent.MessageLoop.RunTask.X;
  
    namespace PostTask {
      interface X extends Base {
        args: {
        
        };
        bind_id: string;
        // Duration.
        dur?: number;
        flow_in?: boolean;
        flow_out?: boolean;
        id: string;
        name: 'MessageLoop::PostTask';
        // Denotes the end of the event PostTask.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RunTask {
      interface X extends Base {
        args: {
          src_file: string;
          src_func: string;
        };
        // Duration.
        dur?: number;
        name: 'MessageLoop::RunTask';
        // Denotes the end of the event RunTask.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace MessagePipeReader {
    type Receive = 
      TraceEvent.MessagePipeReader.Receive.X;
  
    type Send = 
      TraceEvent.MessagePipeReader.Send.X;
  
    namespace Receive {
      interface X extends Base {
        args: {
        
        };
        bind_id: string;
        // Duration.
        dur: number;
        flow_in: boolean;
        id: string;
        name: 'MessagePipeReader::Receive';
        // Denotes the end of the event Receive.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Send {
      interface X extends Base {
        args: {
        
        };
        bind_id: string;
        // Duration.
        dur: number;
        flow_out: boolean;
        id: string;
        name: 'MessagePipeReader::Send';
        // Denotes the end of the event Send.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Metrics {
    namespace Mojom {
      type SingleSampleMetric = 
        TraceEvent.Metrics.Mojom.SingleSampleMetric.X;
    
      type SingleSampleMetricsProvider = 
        TraceEvent.Metrics.Mojom.SingleSampleMetricsProvider.X;
    
      namespace SingleSampleMetric {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'metrics.mojom.SingleSampleMetric';
          // Denotes the end of the event SingleSampleMetric.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace SingleSampleMetricsProvider {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'metrics.mojom.SingleSampleMetricsProvider';
          // Denotes the end of the event SingleSampleMetricsProvider.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace MinorGC {
    interface B extends Base {
      args: {
        usedHeapSizeBefore: number;
      };
      name: 'MinorGC';
      // Denotes the beginning of the event MinorGC.
      ph: 'B';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface E extends Base {
      args: {
        usedHeapSizeAfter: number;
      };
      name: 'MinorGC';
      // Denotes the ending of the event MinorGC.
      ph: 'E';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ModelNeutralWriteTransaction {
    interface B extends Base {
      args: {
        src_file: string;
        src_func: string;
      };
      name: 'ModelNeutralWriteTransaction';
      // Denotes the beginning of the event ModelNeutralWriteTransaction.
      ph: 'B';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface E extends Base {
      args: {
      
      };
      name: 'ModelNeutralWriteTransaction';
      // Denotes the ending of the event ModelNeutralWriteTransaction.
      ph: 'E';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace MojoVideoDecoderService {
    type Construct = 
      TraceEvent.MojoVideoDecoderService.Construct.X;
  
    type Decode = 
      TraceEvent.MojoVideoDecoderService.Decode.F |
      TraceEvent.MojoVideoDecoderService.Decode.p |
      TraceEvent.MojoVideoDecoderService.Decode.S;
  
    type GetSupportedConfigs = 
      TraceEvent.MojoVideoDecoderService.GetSupportedConfigs.X;
  
    type Initialize = 
      TraceEvent.MojoVideoDecoderService.Initialize.F |
      TraceEvent.MojoVideoDecoderService.Initialize.S;
  
    type OnDecoderOutput = 
      TraceEvent.MojoVideoDecoderService.OnDecoderOutput.X;
  
    namespace Construct {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'MojoVideoDecoderService::Construct';
        // Denotes the end of the event Construct.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Decode {
      interface F extends Base {
        args: {
          status: string;
        };
        id: string;
        name: 'MojoVideoDecoderService::Decode';
        // Denotes the ending of the async event Decode.
        ph: 'F';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface p extends Base {
        args: {
          decoder_buffer?: string;
          step: string;
        };
        id: string;
        name: 'MojoVideoDecoderService::Decode';
        // Denotes an unknown phase of the event Decode.
        ph: 'p';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface S extends Base {
        args: {
          is_key_frame: boolean;
          timestamp_us: number;
        };
        id: string;
        name: 'MojoVideoDecoderService::Decode';
        // Denotes the beginning of the async event Decode.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GetSupportedConfigs {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'MojoVideoDecoderService::GetSupportedConfigs';
        // Denotes the end of the event GetSupportedConfigs.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Initialize {
      interface F extends Base {
        args: {
          success: boolean;
        };
        id: string;
        name: 'MojoVideoDecoderService::Initialize';
        // Denotes the ending of the async event Initialize.
        ph: 'F';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface S extends Base {
        args: {
          cdm_id: number;
          config: string;
        };
        id: string;
        name: 'MojoVideoDecoderService::Initialize';
        // Denotes the beginning of the async event Initialize.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnDecoderOutput {
      interface X extends Base {
        args: {
          video_frame: string;
        };
        // Duration.
        dur: number;
        name: 'MojoVideoDecoderService::OnDecoderOutput';
        // Denotes the end of the event OnDecoderOutput.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Moredamageexpectedsoon {
    interface I extends Base {
      args: {
      
      };
      name: 'More damage expected soon';
      // Denotes an event Moredamageexpectedsoon. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace MouseEventManager {
    type FakeMouseMoveEventTimerFired = 
      TraceEvent.MouseEventManager.FakeMouseMoveEventTimerFired.X;
  
    type HandleMouseDraggedEvent = 
      TraceEvent.MouseEventManager.HandleMouseDraggedEvent.X;
  
    type HandleMousePressEvent = 
      TraceEvent.MouseEventManager.HandleMousePressEvent.X;
  
    namespace FakeMouseMoveEventTimerFired {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'MouseEventManager::fakeMouseMoveEventTimerFired';
        // Denotes the end of the event FakeMouseMoveEventTimerFired.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace HandleMouseDraggedEvent {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'MouseEventManager::handleMouseDraggedEvent';
        // Denotes the end of the event HandleMouseDraggedEvent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace HandleMousePressEvent {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'MouseEventManager::handleMousePressEvent';
        // Denotes the end of the event HandleMousePressEvent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Namespace {
    namespace TextureOp {
      namespace Tessnamespace {
        type VertexSpecGrTextureProxy = 
          TraceEvent.Namespace.TextureOp.Tessnamespace.VertexSpecGrTextureProxy.X;
      
        namespace VertexSpecGrTextureProxy {
          interface X extends Base {
            args: {
            
            };
            // Duration.
            dur: number;
            name: 'void (anonymous namespace)::TextureOp::tess(void *, const (anonymous namespace)::VertexSpec &, const GrTextureProxy *, int, int) const';
            // Denotes the end of the event VertexSpecGrTextureProxy.
            ph: 'X';
            tdur: number;
            // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
            tts: number;
          }
        }
      }
    }
  }

  namespace NavigationControllerImpl {
    type LoadURLWithParams = 
      TraceEvent.NavigationControllerImpl.LoadURLWithParams.X;
  
    namespace LoadURLWithParams {
      interface X extends Base {
        args: {
          url: string;
        };
        // Duration.
        dur: number;
        name: 'NavigationControllerImpl::LoadURLWithParams';
        // Denotes the end of the event LoadURLWithParams.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace NavigationHandle {
    interface F extends Base {
      args: {
      
      };
      id: string;
      name: 'NavigationHandle';
      // Denotes the ending of the async event NavigationHandle.
      ph: 'F';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface S extends Base {
      args: {
        frame_tree_node: number;
        url: string;
      };
      id: string;
      name: 'NavigationHandle';
      // Denotes the beginning of the async event NavigationHandle.
      ph: 'S';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface T extends Base {
      args: {
        step: string;
      };
      id: string;
      name: 'NavigationHandle';
      // Denotes a step into the async event NavigationHandle.
      ph: 'T';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace NavigationRequest {
    interface F extends Base {
      args: {
      
      };
      id: string;
      name: 'NavigationRequest';
      // Denotes the ending of the async event NavigationRequest.
      ph: 'F';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface S extends Base {
      args: {
        frame_tree_node: number;
        url: string;
      };
      id: string;
      name: 'NavigationRequest';
      // Denotes the beginning of the async event NavigationRequest.
      ph: 'S';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface T extends Base {
      args: {
        step: string;
      };
      id: string;
      name: 'NavigationRequest';
      // Denotes a step into the async event NavigationRequest.
      ph: 'T';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace NavigationStart {
    interface R extends Base {
      args: {
        data?: {
          documentLoaderURL: string;
          isLoadingMainFrame: boolean;
          navigationId: string;
        };
        frame: string;
      };
      name: 'navigationStart';
      // Denotes a mark of the event NavigationStart.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace NavigationStartToCommit {
    interface F extends Base {
      args: {
        'Net Error Code': number;
        URL: string;
      };
      id: string;
      name: 'Navigation StartToCommit';
      // Denotes the ending of the async event NavigationStartToCommit.
      ph: 'F';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface S extends Base {
      args: {
        'Initial URL': string;
      };
      id: string;
      name: 'Navigation StartToCommit';
      // Denotes the beginning of the async event NavigationStartToCommit.
      ph: 'S';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace NavigationThrottle {
    type WillProcessResponse = 
      TraceEvent.NavigationThrottle.WillProcessResponse.X;
  
    type WillStartRequest = 
      TraceEvent.NavigationThrottle.WillStartRequest.X;
  
    namespace WillProcessResponse {
      interface X extends Base {
        args: {
          throttle: string;
        };
        // Duration.
        dur: number;
        name: 'NavigationThrottle::WillProcessResponse';
        // Denotes the end of the event WillProcessResponse.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace WillStartRequest {
      interface X extends Base {
        args: {
          throttle: string;
        };
        // Duration.
        dur: number;
        name: 'NavigationThrottle::WillStartRequest';
        // Denotes the end of the event WillStartRequest.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace NavigationtimeToResponseStarted {
    interface F extends Base {
      args: {
        '&NavigationURLLoaderImpl': string;
        success: boolean;
      };
      id: string;
      name: 'Navigation timeToResponseStarted';
      // Denotes the ending of the async event NavigationtimeToResponseStarted.
      ph: 'F';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface S extends Base {
      args: {
        'FrameTreeNode id': number;
      };
      id: string;
      name: 'Navigation timeToResponseStarted';
      // Denotes the beginning of the async event NavigationtimeToResponseStarted.
      ph: 'S';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace NavigationTimingnavigationStart {
    interface I extends Base {
      args: {
      
      };
      name: 'NavigationTiming navigationStart';
      // Denotes an event NavigationTimingnavigationStart. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace NavigatorImpl {
    type Navigate = 
      TraceEvent.NavigatorImpl.Navigate.X;
  
    namespace Navigate {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'NavigatorImpl::Navigate';
        // Denotes the end of the event Navigate.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace NeedsBeginFrameChanged {
    interface I extends Base {
      args: {
        data: {
          needsBeginFrame: number;
        };
        layerTreeId: number;
      };
      name: 'NeedsBeginFrameChanged';
      // Denotes an event NeedsBeginFrameChanged. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace NeedsTickAnimations {
    interface I extends Base {
      args: {
      
      };
      name: 'NeedsTickAnimations';
      // Denotes an event NeedsTickAnimations. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace NETWORK_DELEGATE_BEFORE_START_TRANSACTION {
    interface b extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'NETWORK_DELEGATE_BEFORE_START_TRANSACTION';
      // Denotes the beginning of the nestable async flow event NETWORK_DELEGATE_BEFORE_START_TRANSACTION.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'NETWORK_DELEGATE_BEFORE_START_TRANSACTION';
      // Denotes a step into the nestable async flow event NETWORK_DELEGATE_BEFORE_START_TRANSACTION.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace NETWORK_DELEGATE_BEFORE_URL_REQUEST {
    interface b extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'NETWORK_DELEGATE_BEFORE_URL_REQUEST';
      // Denotes the beginning of the nestable async flow event NETWORK_DELEGATE_BEFORE_URL_REQUEST.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'NETWORK_DELEGATE_BEFORE_URL_REQUEST';
      // Denotes a step into the nestable async flow event NETWORK_DELEGATE_BEFORE_URL_REQUEST.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace NETWORK_DELEGATE_HEADERS_RECEIVED {
    interface b extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'NETWORK_DELEGATE_HEADERS_RECEIVED';
      // Denotes the beginning of the nestable async flow event NETWORK_DELEGATE_HEADERS_RECEIVED.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'NETWORK_DELEGATE_HEADERS_RECEIVED';
      // Denotes a step into the nestable async flow event NETWORK_DELEGATE_HEADERS_RECEIVED.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace NETWORK_QUALITY_CHANGED {
    interface n extends Base {
      args: {
        params: {
          downstream_throughput_kbps: number;
          effective_connection_type: string;
          http_rtt_ms: number;
          transport_rtt_ms: number;
        };
        source_type: string;
      };
      id: string;
      name: 'NETWORK_QUALITY_CHANGED';
      // Denotes the ending of the nestable async flow event NETWORK_QUALITY_CHANGED.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Network {
    namespace Mojom {
      type CookieChangeListener = 
        TraceEvent.Network.Mojom.CookieChangeListener.X;
    
      type CookieManager = 
        TraceEvent.Network.Mojom.CookieManager.X;
    
      type NetworkContext = 
        TraceEvent.Network.Mojom.NetworkContext.X;
    
      type NetworkContextClient = 
        TraceEvent.Network.Mojom.NetworkContextClient.X;
    
      type NetworkQualityEstimatorManagerClient = 
        TraceEvent.Network.Mojom.NetworkQualityEstimatorManagerClient.X;
    
      type NetworkServiceClient = 
        TraceEvent.Network.Mojom.NetworkServiceClient.X;
    
      type ProxyConfigPollerClient = 
        TraceEvent.Network.Mojom.ProxyConfigPollerClient.X;
    
      type ProxyLookupClient = 
        TraceEvent.Network.Mojom.ProxyLookupClient.X;
    
      type ResolveHostClient = 
        TraceEvent.Network.Mojom.ResolveHostClient.X;
    
      type TrustedHeaderClient = 
        TraceEvent.Network.Mojom.TrustedHeaderClient.X;
    
      type TrustedURLLoaderHeaderClient = 
        TraceEvent.Network.Mojom.TrustedURLLoaderHeaderClient.X;
    
      type URLLoader = 
        TraceEvent.Network.Mojom.URLLoader.X;
    
      type URLLoaderClient = 
        TraceEvent.Network.Mojom.URLLoaderClient.X;
    
      type URLLoaderFactory = 
        TraceEvent.Network.Mojom.URLLoaderFactory.X;
    
      namespace CookieChangeListener {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'network.mojom.CookieChangeListener';
          // Denotes the end of the event CookieChangeListener.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace CookieManager {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'network.mojom.CookieManager';
          // Denotes the end of the event CookieManager.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace NetworkContext {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'network.mojom.NetworkContext';
          // Denotes the end of the event NetworkContext.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace NetworkContextClient {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'network.mojom.NetworkContextClient';
          // Denotes the end of the event NetworkContextClient.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace NetworkQualityEstimatorManagerClient {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'network.mojom.NetworkQualityEstimatorManagerClient';
          // Denotes the end of the event NetworkQualityEstimatorManagerClient.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace NetworkServiceClient {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'network.mojom.NetworkServiceClient';
          // Denotes the end of the event NetworkServiceClient.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace ProxyConfigPollerClient {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'network.mojom.ProxyConfigPollerClient';
          // Denotes the end of the event ProxyConfigPollerClient.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace ProxyLookupClient {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'network.mojom.ProxyLookupClient';
          // Denotes the end of the event ProxyLookupClient.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace ResolveHostClient {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'network.mojom.ResolveHostClient';
          // Denotes the end of the event ResolveHostClient.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace TrustedHeaderClient {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'network.mojom.TrustedHeaderClient';
          // Denotes the end of the event TrustedHeaderClient.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace TrustedURLLoaderHeaderClient {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'network.mojom.TrustedURLLoaderHeaderClient';
          // Denotes the end of the event TrustedURLLoaderHeaderClient.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace URLLoader {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'network.mojom.URLLoader';
          // Denotes the end of the event URLLoader.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace URLLoaderClient {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'network.mojom.URLLoaderClient';
          // Denotes the end of the event URLLoaderClient.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace URLLoaderFactory {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'network.mojom.URLLoaderFactory';
          // Denotes the end of the event URLLoaderFactory.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace NetworkDelegate {
    type ForcePrivacyMode = 
      TraceEvent.NetworkDelegate.ForcePrivacyMode.X;
  
    type NotifyBeforeStartTransation = 
      TraceEvent.NetworkDelegate.NotifyBeforeStartTransation.X;
  
    type NotifyBeforeURLRequest = 
      TraceEvent.NetworkDelegate.NotifyBeforeURLRequest.X;
  
    type NotifyCompleted = 
      TraceEvent.NetworkDelegate.NotifyCompleted.X;
  
    type NotifyHeadersReceived = 
      TraceEvent.NetworkDelegate.NotifyHeadersReceived.X;
  
    type NotifyNetworkBytesReceived = 
      TraceEvent.NetworkDelegate.NotifyNetworkBytesReceived.X;
  
    type NotifyStartTransaction = 
      TraceEvent.NetworkDelegate.NotifyStartTransaction.X;
  
    type NotifyURLRequestDestroyed = 
      TraceEvent.NetworkDelegate.NotifyURLRequestDestroyed.X;
  
    namespace ForcePrivacyMode {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'NetworkDelegate::ForcePrivacyMode';
        // Denotes the end of the event ForcePrivacyMode.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace NotifyBeforeStartTransation {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'NetworkDelegate::NotifyBeforeStartTransation';
        // Denotes the end of the event NotifyBeforeStartTransation.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace NotifyBeforeURLRequest {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'NetworkDelegate::NotifyBeforeURLRequest';
        // Denotes the end of the event NotifyBeforeURLRequest.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace NotifyCompleted {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'NetworkDelegate::NotifyCompleted';
        // Denotes the end of the event NotifyCompleted.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace NotifyHeadersReceived {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'NetworkDelegate::NotifyHeadersReceived';
        // Denotes the end of the event NotifyHeadersReceived.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace NotifyNetworkBytesReceived {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'NetworkDelegate::NotifyNetworkBytesReceived';
        // Denotes the end of the event NotifyNetworkBytesReceived.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace NotifyStartTransaction {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'NetworkDelegate::NotifyStartTransaction';
        // Denotes the end of the event NotifyStartTransaction.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace NotifyURLRequestDestroyed {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'NetworkDelegate::NotifyURLRequestDestroyed';
        // Denotes the end of the event NotifyURLRequestDestroyed.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace NetworkHintsMsg_DNSPrefetch {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'NetworkHintsMsg_DNSPrefetch';
      // Denotes the end of the event NetworkHintsMsg_DNSPrefetch.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace NetworkQualityEstimator {
    type NotifyHeadersReceived = 
      TraceEvent.NetworkQualityEstimator.NotifyHeadersReceived.X;
  
    type NotifyRequestCompleted = 
      TraceEvent.NetworkQualityEstimator.NotifyRequestCompleted.X;
  
    namespace NotifyHeadersReceived {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'NetworkQualityEstimator::NotifyHeadersReceived';
        // Denotes the end of the event NotifyHeadersReceived.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace NotifyRequestCompleted {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'NetworkQualityEstimator::NotifyRequestCompleted';
        // Denotes the end of the event NotifyRequestCompleted.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Nodamageyet {
    interface I extends Base {
      args: {
      
      };
      name: 'No damage yet';
      // Denotes an event Nodamageyet. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Node {
    type UpdateDistribution = 
      TraceEvent.Node.UpdateDistribution.X;
  
    namespace UpdateDistribution {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Node::updateDistribution';
        // Denotes the end of the event UpdateDistribution.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace NotStartingIdlePeriodBecauseDeadlineIsTooClose {
    interface X extends Base {
      args: {
        idle_period_duration_ms: number;
      };
      // Duration.
      dur: number;
      name: 'NotStartingIdlePeriodBecauseDeadlineIsTooClose';
      // Denotes the end of the event NotStartingIdlePeriodBecauseDeadlineIsTooClose.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Num_cpus {
    interface M extends Base {
      args: {
        number: number;
      };
      name: 'num_cpus';
      // Denotes metadata for the event Num_cpus.
      ph: 'M';
    }
  }

  namespace Obmark0c_search {
    interface R extends Base {
      args: {
        data: {
          navigationId: string;
        };
      };
      name: 'ob-mark-0-c_search';
      // Denotes a mark of the event Obmark0c_search.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Obmark0odbMB_120 {
    interface R extends Base {
      args: {
        data: {
          navigationId: string;
        };
      };
      name: 'ob-mark-0-odb-MB_12-0';
      // Denotes a mark of the event Obmark0odbMB_120.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Obmark0odbTR_11 {
    interface R extends Base {
      args: {
        data: {
          navigationId: string;
        };
      };
      name: 'ob-mark-0-odb-TR_1-1';
      // Denotes a mark of the event Obmark0odbTR_11.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Obmark0renderMB_120 {
    interface R extends Base {
      args: {
        data: {
          navigationId: string;
        };
      };
      name: 'ob-mark-0-render-MB_12-0';
      // Denotes a mark of the event Obmark0renderMB_120.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Obmark0renderTR_11 {
    interface R extends Base {
      args: {
        data: {
          navigationId: string;
        };
      };
      name: 'ob-mark-0-render-TR_1-1';
      // Denotes a mark of the event Obmark0renderTR_11.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Obmark0start {
    interface R extends Base {
      args: {
        data: {
          navigationId: string;
        };
      };
      name: 'ob-mark-0-start';
      // Denotes a mark of the event Obmark0start.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Obmark1c_foundMB_120 {
    interface R extends Base {
      args: {
        data: {
          navigationId: string;
        };
      };
      name: 'ob-mark-1-c_found-MB_12-0';
      // Denotes a mark of the event Obmark1c_foundMB_120.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Obmark1c_foundTR_11 {
    interface R extends Base {
      args: {
        data: {
          navigationId: string;
        };
      };
      name: 'ob-mark-1-c_found-TR_1-1';
      // Denotes a mark of the event Obmark1c_foundTR_11.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Obmark1odb_rMB_120 {
    interface R extends Base {
      args: {
        data: {
          navigationId: string;
        };
      };
      name: 'ob-mark-1-odb_r-MB_12-0';
      // Denotes a mark of the event Obmark1odb_rMB_120.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Obmark1odb_rTR_11 {
    interface R extends Base {
      args: {
        data: {
          navigationId: string;
        };
      };
      name: 'ob-mark-1-odb_r-TR_1-1';
      // Denotes a mark of the event Obmark1odb_rTR_11.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Obmark1renderedMB_120 {
    interface R extends Base {
      args: {
        data: {
          navigationId: string;
        };
      };
      name: 'ob-mark-1-rendered-MB_12-0';
      // Denotes a mark of the event Obmark1renderedMB_120.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Obmark1renderedTR_11 {
    interface R extends Base {
      args: {
        data: {
          navigationId: string;
        };
      };
      name: 'ob-mark-1-rendered-TR_1-1';
      // Denotes a mark of the event Obmark1renderedTR_11.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Obmeasurec_foundMB_120 {
    interface b extends Base {
      args: {
      
      };
      id: string;
      name: 'ob-measure-c_found-MB_12-0';
      // Denotes the beginning of the nestable async flow event Obmeasurec_foundMB_120.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
      
      };
      id: string;
      name: 'ob-measure-c_found-MB_12-0';
      // Denotes a step into the nestable async flow event Obmeasurec_foundMB_120.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Obmeasurec_foundTR_11 {
    interface b extends Base {
      args: {
      
      };
      id: string;
      name: 'ob-measure-c_found-TR_1-1';
      // Denotes the beginning of the nestable async flow event Obmeasurec_foundTR_11.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
      
      };
      id: string;
      name: 'ob-measure-c_found-TR_1-1';
      // Denotes a step into the nestable async flow event Obmeasurec_foundTR_11.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Obmeasureodb_rMB_120 {
    interface b extends Base {
      args: {
      
      };
      id: string;
      name: 'ob-measure-odb_r-MB_12-0';
      // Denotes the beginning of the nestable async flow event Obmeasureodb_rMB_120.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
      
      };
      id: string;
      name: 'ob-measure-odb_r-MB_12-0';
      // Denotes a step into the nestable async flow event Obmeasureodb_rMB_120.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Obmeasureodb_rTR_11 {
    interface b extends Base {
      args: {
      
      };
      id: string;
      name: 'ob-measure-odb_r-TR_1-1';
      // Denotes the beginning of the nestable async flow event Obmeasureodb_rTR_11.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
      
      };
      id: string;
      name: 'ob-measure-odb_r-TR_1-1';
      // Denotes a step into the nestable async flow event Obmeasureodb_rTR_11.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ObmeasureodbMB_120 {
    interface b extends Base {
      args: {
      
      };
      id: string;
      name: 'ob-measure-odb-MB_12-0';
      // Denotes the beginning of the nestable async flow event ObmeasureodbMB_120.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
      
      };
      id: string;
      name: 'ob-measure-odb-MB_12-0';
      // Denotes a step into the nestable async flow event ObmeasureodbMB_120.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ObmeasureodbTR_11 {
    interface b extends Base {
      args: {
      
      };
      id: string;
      name: 'ob-measure-odb-TR_1-1';
      // Denotes the beginning of the nestable async flow event ObmeasureodbTR_11.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
      
      };
      id: string;
      name: 'ob-measure-odb-TR_1-1';
      // Denotes a step into the nestable async flow event ObmeasureodbTR_11.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ObmeasurerenderedMB_120 {
    interface b extends Base {
      args: {
      
      };
      id: string;
      name: 'ob-measure-rendered-MB_12-0';
      // Denotes the beginning of the nestable async flow event ObmeasurerenderedMB_120.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
      
      };
      id: string;
      name: 'ob-measure-rendered-MB_12-0';
      // Denotes a step into the nestable async flow event ObmeasurerenderedMB_120.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ObmeasurerenderedTR_11 {
    interface b extends Base {
      args: {
      
      };
      id: string;
      name: 'ob-measure-rendered-TR_1-1';
      // Denotes the beginning of the nestable async flow event ObmeasurerenderedTR_11.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
      
      };
      id: string;
      name: 'ob-measure-rendered-TR_1-1';
      // Denotes a step into the nestable async flow event ObmeasurerenderedTR_11.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Onetapvideo {
    type EmbedRequest = 
      TraceEvent.Onetapvideo.EmbedRequest.R;
  
    type PlayerReady = 
      TraceEvent.Onetapvideo.PlayerReady.R;
  
    namespace EmbedRequest {
      interface R extends Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: 'one-tap-video::embedRequest';
        // Denotes a mark of the event EmbedRequest.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PlayerReady {
      interface R extends Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: 'one-tap-video::playerReady';
        // Denotes a mark of the event PlayerReady.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace OnIdleTaskPosted {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'OnIdleTaskPosted';
      // Denotes the end of the event OnIdleTaskPosted.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace OnIdleTaskPostedOnMainThread {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'OnIdleTaskPostedOnMainThread';
      // Denotes the end of the event OnIdleTaskPostedOnMainThread.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace OnLibevent {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur?: number;
      name: 'OnLibevent';
      // Denotes the end of the event OnLibevent.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace OnLoad {
    interface b extends Base {
      args: {
      
      };
      id: string;
      name: 'On Load';
      // Denotes the beginning of the nestable async flow event OnLoad.
      ph: 'b';
    }
  
    interface e extends Base {
      args: {
      
      };
      id: string;
      name: 'On Load';
      // Denotes a step into the nestable async flow event OnLoad.
      ph: 'e';
    }
  }

  namespace Optimizely {
    type BlockBegin = 
      TraceEvent.Optimizely.BlockBegin.R;
  
    namespace BlockBegin {
      interface R extends Base {
        args: {
          data: {
            navigationId: string;
          };
        };
        name: 'optimizely:blockBegin';
        // Denotes a mark of the event BlockBegin.
        ph: 'R';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace OptimizelyEnd {
    interface R extends Base {
      args: {
        data: {
          navigationId: string;
        };
      };
      name: 'optimizelyEnd';
      // Denotes a mark of the event OptimizelyEnd.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace OptimizelyStart {
    interface R extends Base {
      args: {
        data: {
          navigationId: string;
        };
      };
      name: 'optimizelyStart';
      // Denotes a mark of the event OptimizelyStart.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace OptimizelyTime {
    interface b extends Base {
      args: {
      
      };
      id: string;
      name: 'optimizelyTime';
      // Denotes the beginning of the nestable async flow event OptimizelyTime.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
      
      };
      id: string;
      name: 'optimizelyTime';
      // Denotes a step into the nestable async flow event OptimizelyTime.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace OverlayProcessor {
    type ProcessForOverlays = 
      TraceEvent.OverlayProcessor.ProcessForOverlays.X;
  
    namespace ProcessForOverlays {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'OverlayProcessor::ProcessForOverlays';
        // Denotes the end of the event ProcessForOverlays.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace PageAnimator {
    type ServiceScriptedAnimations = 
      TraceEvent.PageAnimator.ServiceScriptedAnimations.X;
  
    namespace ServiceScriptedAnimations {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'PageAnimator::serviceScriptedAnimations';
        // Denotes the end of the event ServiceScriptedAnimations.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace PageLoad {
    interface b extends Base {
      args: {
      
      };
      id: string;
      name: 'pageLoad';
      // Denotes the beginning of the nestable async flow event PageLoad.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
      
      };
      id: string;
      name: 'pageLoad';
      // Denotes a step into the nestable async flow event PageLoad.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace PageLoadMetricsObserver {
    type OnCommit = 
      TraceEvent.PageLoadMetricsObserver.OnCommit.X;
  
    type OnHidden = 
      TraceEvent.PageLoadMetricsObserver.OnHidden.X;
  
    type OnShown = 
      TraceEvent.PageLoadMetricsObserver.OnShown.X;
  
    type OnStart = 
      TraceEvent.PageLoadMetricsObserver.OnStart.X;
  
    type ShouldObserveMimeType = 
      TraceEvent.PageLoadMetricsObserver.ShouldObserveMimeType.X;
  
    namespace OnCommit {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'PageLoadMetricsObserver::OnCommit';
        // Denotes the end of the event OnCommit.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnHidden {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'PageLoadMetricsObserver::OnHidden';
        // Denotes the end of the event OnHidden.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnShown {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'PageLoadMetricsObserver::OnShown';
        // Denotes the end of the event OnShown.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnStart {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'PageLoadMetricsObserver::OnStart';
        // Denotes the end of the event OnStart.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ShouldObserveMimeType {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'PageLoadMetricsObserver::ShouldObserveMimeType';
        // Denotes the end of the event ShouldObserveMimeType.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace PageMsg_SetHistoryOffsetAndLength {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'PageMsg_SetHistoryOffsetAndLength';
      // Denotes the end of the event PageMsg_SetHistoryOffsetAndLength.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace PageMsg_UpdateScreenInfo {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'PageMsg_UpdateScreenInfo';
      // Denotes the end of the event PageMsg_UpdateScreenInfo.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace PageMsg_UpdateWindowScreenRect {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'PageMsg_UpdateWindowScreenRect';
      // Denotes the end of the event PageMsg_UpdateWindowScreenRect.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace PageMsg_WasHidden {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'PageMsg_WasHidden';
      // Denotes the end of the event PageMsg_WasHidden.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace PageMsg_WasShown {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'PageMsg_WasShown';
      // Denotes the end of the event PageMsg_WasShown.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Paint {
    interface X extends Base {
      args: {
        data: {
          clip: {
          
          }[];
          frame: string;
          layerId: number;
          nodeId: number;
        };
      };
      // Duration.
      dur: number;
      name: 'Paint';
      // Denotes the end of the event Paint.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace PaintArtifact {
    type AppendToWebDisplayItemList = 
      TraceEvent.PaintArtifact.AppendToWebDisplayItemList.X;
  
    type Replay = 
      TraceEvent.PaintArtifact.Replay.X;
  
    namespace AppendToWebDisplayItemList {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'PaintArtifact::appendToWebDisplayItemList';
        // Denotes the end of the event AppendToWebDisplayItemList.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Replay {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'PaintArtifact::replay';
        // Denotes the end of the event Replay.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace PaintController {
    type CommitNewDisplayItems = 
      TraceEvent.PaintController.CommitNewDisplayItems.X;
  
    namespace CommitNewDisplayItems {
      interface X extends Base {
        args: {
          current_display_list_size: number;
          num_non_cached_new_items: number;
        };
        // Duration.
        dur: number;
        name: 'PaintController::commitNewDisplayItems';
        // Denotes the end of the event CommitNewDisplayItems.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace PaintImage {
    interface X extends Base {
      args: {
        data: {
          height?: number;
          nodeId: number;
          srcHeight?: number;
          srcWidth?: number;
          url?: string;
          width?: number;
          x?: number;
          y?: number;
        };
      };
      // Duration.
      dur: number;
      name: 'PaintImage';
      // Denotes the end of the event PaintImage.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace PaintInvalidationTracking {
    interface I extends Base {
      args: {
        data: {
          frame: string;
          nodeId: number;
          nodeName: string;
          paintId: number;
        };
      };
      name: 'PaintInvalidationTracking';
      // Denotes an event PaintInvalidationTracking. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace PaintInvalidator {
    type InvalidatePaint = 
      TraceEvent.PaintInvalidator.InvalidatePaint.X;
  
    namespace InvalidatePaint {
      interface X extends Base {
        args: {
          object: string;
        };
        // Duration.
        dur: number;
        name: 'PaintInvalidator::InvalidatePaint()';
        // Denotes the end of the event InvalidatePaint.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace PaintLayer {
    type UpdateLayerPositionsAfterLayout = 
      TraceEvent.PaintLayer.UpdateLayerPositionsAfterLayout.X;
  
    namespace UpdateLayerPositionsAfterLayout {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'PaintLayer::updateLayerPositionsAfterLayout';
        // Denotes the end of the event UpdateLayerPositionsAfterLayout.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace PaintLayerCompositor {
    type UpdateIfNeededRecursive = 
      TraceEvent.PaintLayerCompositor.UpdateIfNeededRecursive.X;
  
    namespace UpdateIfNeededRecursive {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'PaintLayerCompositor::updateIfNeededRecursive';
        // Denotes the end of the event UpdateIfNeededRecursive.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace PaintNonDefaultBackgroundColor {
    interface R extends Base {
      args: {
      
      };
      name: 'paintNonDefaultBackgroundColor';
      // Denotes a mark of the event PaintNonDefaultBackgroundColor.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ParkableStringImpl {
    type CompressInBackground = 
      TraceEvent.ParkableStringImpl.CompressInBackground.X;
  
    type Unpark = 
      TraceEvent.ParkableStringImpl.Unpark.X;
  
    namespace CompressInBackground {
      interface X extends Base {
        args: {
          size: number;
        };
        // Duration.
        dur: number;
        name: 'ParkableStringImpl::CompressInBackground';
        // Denotes the end of the event CompressInBackground.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Unpark {
      interface X extends Base {
        args: {
          size: number;
        };
        // Duration.
        dur: number;
        name: 'ParkableStringImpl::Unpark';
        // Denotes the end of the event Unpark.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ParseAuthorStyleSheet {
    interface X extends Base {
      args: {
        data: {
          styleSheetUrl: string;
        };
      };
      // Duration.
      dur: number;
      name: 'ParseAuthorStyleSheet';
      // Denotes the end of the event ParseAuthorStyleSheet.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ParseHTML {
    interface B extends Base {
      args: {
        beginData: {
          frame: string;
          stackTrace?: {
            columnNumber: number;
            functionName: string;
            lineNumber: number;
            scriptId: string;
            url: string;
          }[];
          startLine: number;
          url: string;
        };
      };
      name: 'ParseHTML';
      // Denotes the beginning of the event ParseHTML.
      ph: 'B';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface E extends Base {
      args: {
        endData: {
          endLine: number;
        };
      };
      name: 'ParseHTML';
      // Denotes the ending of the event ParseHTML.
      ph: 'E';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace PartitionAlloc {
    type TotalSizeOfCommittedPagesKB = 
      TraceEvent.PartitionAlloc.TotalSizeOfCommittedPagesKB.C;
  
    namespace TotalSizeOfCommittedPagesKB {
      interface C extends Base {
        args: {
          value: number;
        };
        name: 'PartitionAlloc.TotalSizeOfCommittedPagesKB';
        // Denotes a counter for the event TotalSizeOfCommittedPagesKB.
        ph: 'C';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace PendingScript {
    type ExecuteScriptBlock = 
      TraceEvent.PendingScript.ExecuteScriptBlock.X;
  
    namespace ExecuteScriptBlock {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'PendingScript::ExecuteScriptBlock';
        // Denotes the end of the event ExecuteScriptBlock.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace PendingTree {
    type Waiting = 
      TraceEvent.PendingTree.Waiting.F |
      TraceEvent.PendingTree.Waiting.S;
  
    namespace Waiting {
      interface F extends Base {
        args: {
        
        };
        id: string;
        name: 'PendingTree:waiting';
        // Denotes the ending of the async event Waiting.
        ph: 'F';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface S extends Base {
        args: {
        
        };
        id: string;
        name: 'PendingTree:waiting';
        // Denotes the beginning of the async event Waiting.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace PictureLayer {
    type PushPropertiesTo = 
      TraceEvent.PictureLayer.PushPropertiesTo.X;
  
    type Update = 
      TraceEvent.PictureLayer.Update.X;
  
    namespace PushPropertiesTo {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'PictureLayer::PushPropertiesTo';
        // Denotes the end of the event PushPropertiesTo.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Update {
      interface X extends Base {
        args: {
          source_frame_number: number;
        };
        // Duration.
        dur: number;
        name: 'PictureLayer::Update';
        // Denotes the end of the event Update.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace PictureLayerImpl {
    type AppendQuadscheckerboard = 
      TraceEvent.PictureLayerImpl.AppendQuadscheckerboard.I;
  
    namespace AppendQuadscheckerboard {
      interface I extends Base {
        args: {
          missing_tile_count: number;
          on_demand_missing_tile_count: number;
        };
        name: 'PictureLayerImpl::AppendQuads checkerboard';
        // Denotes an event AppendQuadscheckerboard. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace PlatformResourceSendRequest {
    interface B extends Base {
      args: {
        data: {
          id: string;
        };
      };
      name: 'PlatformResourceSendRequest';
      // Denotes the beginning of the event PlatformResourceSendRequest.
      ph: 'B';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface E extends Base {
      args: {
      
      };
      name: 'PlatformResourceSendRequest';
      // Denotes the ending of the event PlatformResourceSendRequest.
      ph: 'E';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace PostCommit {
    interface B extends Base {
      args: {
      
      };
      name: 'PostCommit';
      // Denotes the beginning of the event PostCommit.
      ph: 'B';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface E extends Base {
      args: {
      
      };
      name: 'PostCommit';
      // Denotes the ending of the event PostCommit.
      ph: 'E';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace PrerenderManagerFactory {
    type GetForProfile = 
      TraceEvent.PrerenderManagerFactory.GetForProfile.X;
  
    namespace GetForProfile {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'PrerenderManagerFactory::GetForProfile';
        // Denotes the end of the event GetForProfile.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace PrintMsg_SetPrintingEnabled {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'PrintMsg_SetPrintingEnabled';
      // Denotes the end of the event PrintMsg_SetPrintingEnabled.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Process_labels {
    interface M extends Base {
      args: {
        labels: string;
      };
      name: 'process_labels';
      // Denotes metadata for the event Process_labels.
      ph: 'M';
    }
  }

  namespace Process_name {
    interface M extends Base {
      args: {
        name: string;
      };
      name: 'process_name';
      // Denotes metadata for the event Process_name.
      ph: 'M';
    }
  }

  namespace Process_sort_index {
    interface M extends Base {
      args: {
        sort_index: number;
      };
      name: 'process_sort_index';
      // Denotes metadata for the event Process_sort_index.
      ph: 'M';
    }
  }

  namespace Process_uptime_seconds {
    interface M extends Base {
      args: {
        uptime: number;
      };
      name: 'process_uptime_seconds';
      // Denotes metadata for the event Process_uptime_seconds.
      ph: 'M';
    }
  }

  namespace ProcessCommitResponse {
    interface X extends Base {
      args: {
        type: string;
      };
      // Duration.
      dur: number;
      name: 'ProcessCommitResponse';
      // Denotes the end of the event ProcessCommitResponse.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ProcessMemoryDump {
    interface b extends Base {
      args: {
        dump_guid: string;
      };
      id2: {
        local: string;
      };
      name: 'ProcessMemoryDump';
      // Denotes the beginning of the nestable async flow event ProcessMemoryDump.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
      
      };
      id2: {
        local: string;
      };
      name: 'ProcessMemoryDump';
      // Denotes a step into the nestable async flow event ProcessMemoryDump.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ProcessPriority {
    interface I extends Base {
      args: {
        priority: number;
      };
      name: 'ProcessPriority';
      // Denotes an event ProcessPriority. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ProcTask {
    type OnLookupComplete = 
      TraceEvent.ProcTask.OnLookupComplete.X;
  
    namespace OnLookupComplete {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ProcTask::OnLookupComplete';
        // Denotes the end of the event OnLookupComplete.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Profile {
    interface P extends Base {
      args: {
        data: {
          startTime: number;
        };
      };
      id: string;
      name: 'Profile';
      // Denotes a sample of the event Profile.
      ph: 'P';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ProfileChunk {
    interface P extends Base {
      args: {
        data: {
          cpuProfile: {
            nodes?: {
              callFrame: {
                columnNumber?: number;
                functionName: string;
                lineNumber?: number;
                scriptId: number;
                url?: string;
              };
              id: number;
              parent?: number;
            }[];
            samples: {
            
            }[];
          };
          timeDeltas: {
          
          }[];
        };
      };
      id: string;
      name: 'ProfileChunk';
      // Denotes a sample of the event ProfileChunk.
      ph: 'P';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ProfileManager {
    type GetProfileInfoCache = 
      TraceEvent.ProfileManager.GetProfileInfoCache.X;
  
    namespace GetProfileInfoCache {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ProfileManager::GetProfileInfoCache';
        // Denotes the end of the event GetProfileInfoCache.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ProgramBindingBase {
    type Init = 
      TraceEvent.ProgramBindingBase.Init.X;
  
    namespace Init {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ProgramBindingBase::init';
        // Denotes the end of the event Init.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace PropertyTreeBuilder {
    type ShouldCreateRenderSurfaceopacity = 
      TraceEvent.PropertyTreeBuilder.ShouldCreateRenderSurfaceopacity.I;
  
    namespace ShouldCreateRenderSurfaceopacity {
      interface I extends Base {
        args: {
        
        };
        name: 'PropertyTreeBuilder::ShouldCreateRenderSurface opacity';
        // Denotes an event ShouldCreateRenderSurfaceopacity. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace PROXY_RESOLUTION_SERVICE_RESOLVED_PROXY_LIST {
    interface n extends Base {
      args: {
        params: {
          pac_string: string;
        };
        source_type: string;
      };
      id: string;
      name: 'PROXY_RESOLUTION_SERVICE_RESOLVED_PROXY_LIST';
      // Denotes the ending of the nestable async flow event PROXY_RESOLUTION_SERVICE_RESOLVED_PROXY_LIST.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace PROXY_RESOLUTION_SERVICE {
    interface b extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'PROXY_RESOLUTION_SERVICE';
      // Denotes the beginning of the nestable async flow event PROXY_RESOLUTION_SERVICE.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'PROXY_RESOLUTION_SERVICE';
      // Denotes a step into the nestable async flow event PROXY_RESOLUTION_SERVICE.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Proxy_resolver {
    namespace Mojom {
      type ProxyResolver = 
        TraceEvent.Proxy_resolver.Mojom.ProxyResolver.X;
    
      type ProxyResolverRequestClient = 
        TraceEvent.Proxy_resolver.Mojom.ProxyResolverRequestClient.X;
    
      namespace ProxyResolver {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'proxy_resolver.mojom.ProxyResolver';
          // Denotes the end of the event ProxyResolver.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace ProxyResolverRequestClient {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'proxy_resolver.mojom.ProxyResolverRequestClient';
          // Denotes the end of the event ProxyResolverRequestClient.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace ProxyImpl {
    type BeginMainFrameAbortedOnImplThread = 
      TraceEvent.ProxyImpl.BeginMainFrameAbortedOnImplThread.X;
  
    type DidActivateSyncTreeOnImplThread = 
      TraceEvent.ProxyImpl.DidActivateSyncTreeOnImplThread.X;
  
    type DidLoseLayerTreeFrameSinkOnImplThread = 
      TraceEvent.ProxyImpl.DidLoseLayerTreeFrameSinkOnImplThread.X;
  
    type DidReceiveCompositorFrameAckOnImplThread = 
      TraceEvent.ProxyImpl.DidReceiveCompositorFrameAckOnImplThread.X;
  
    type FinishGLOnImplThread = 
      TraceEvent.ProxyImpl.FinishGLOnImplThread.X;
  
    type InitializeLayerTreeFrameSinkOnImplThread = 
      TraceEvent.ProxyImpl.InitializeLayerTreeFrameSinkOnImplThread.X;
  
    type NotifyReadyToActivate = 
      TraceEvent.ProxyImpl.NotifyReadyToActivate.X;
  
    type NotifyReadyToCommitOnImpl = 
      TraceEvent.ProxyImpl.NotifyReadyToCommitOnImpl.X;
  
    type NotifyReadyToDraw = 
      TraceEvent.ProxyImpl.NotifyReadyToDraw.X;
  
    type OnCanDrawStateChanged = 
      TraceEvent.ProxyImpl.OnCanDrawStateChanged.X;
  
    type ProxyImpl = 
      TraceEvent.ProxyImpl.ProxyImpl.X;
  
    type RequestBeginMainFrameNotExpected = 
      TraceEvent.ProxyImpl.RequestBeginMainFrameNotExpected.X;
  
    type ScheduledActionActivateSyncTree = 
      TraceEvent.ProxyImpl.ScheduledActionActivateSyncTree.X;
  
    type ScheduledActionBeginLayerTreeFrameSinkCreation = 
      TraceEvent.ProxyImpl.ScheduledActionBeginLayerTreeFrameSinkCreation.X;
  
    type ScheduledActionCommit = 
      TraceEvent.ProxyImpl.ScheduledActionCommit.X;
  
    type ScheduledActionDraw = 
      TraceEvent.ProxyImpl.ScheduledActionDraw.X;
  
    type ScheduledActionPrepareTiles = 
      TraceEvent.ProxyImpl.ScheduledActionPrepareTiles.X;
  
    type SetNeedsCommitOnImplThread = 
      TraceEvent.ProxyImpl.SetNeedsCommitOnImplThread.X;
  
    type SetNeedsRedrawOnImplThread = 
      TraceEvent.ProxyImpl.SetNeedsRedrawOnImplThread.X;
  
    type SetVisibleOnImplThread = 
      TraceEvent.ProxyImpl.SetVisibleOnImplThread.X;
  
    namespace BeginMainFrameAbortedOnImplThread {
      interface X extends Base {
        args: {
          reason: string;
        };
        // Duration.
        dur: number;
        name: 'ProxyImpl::BeginMainFrameAbortedOnImplThread';
        // Denotes the end of the event BeginMainFrameAbortedOnImplThread.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidActivateSyncTreeOnImplThread {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ProxyImpl::DidActivateSyncTreeOnImplThread';
        // Denotes the end of the event DidActivateSyncTreeOnImplThread.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidLoseLayerTreeFrameSinkOnImplThread {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ProxyImpl::DidLoseLayerTreeFrameSinkOnImplThread';
        // Denotes the end of the event DidLoseLayerTreeFrameSinkOnImplThread.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidReceiveCompositorFrameAckOnImplThread {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ProxyImpl::DidReceiveCompositorFrameAckOnImplThread';
        // Denotes the end of the event DidReceiveCompositorFrameAckOnImplThread.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace FinishGLOnImplThread {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ProxyImpl::FinishGLOnImplThread';
        // Denotes the end of the event FinishGLOnImplThread.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace InitializeLayerTreeFrameSinkOnImplThread {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ProxyImpl::InitializeLayerTreeFrameSinkOnImplThread';
        // Denotes the end of the event InitializeLayerTreeFrameSinkOnImplThread.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace NotifyReadyToActivate {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ProxyImpl::NotifyReadyToActivate';
        // Denotes the end of the event NotifyReadyToActivate.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace NotifyReadyToCommitOnImpl {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur?: number;
        name: 'ProxyImpl::NotifyReadyToCommitOnImpl';
        // Denotes the end of the event NotifyReadyToCommitOnImpl.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace NotifyReadyToDraw {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ProxyImpl::NotifyReadyToDraw';
        // Denotes the end of the event NotifyReadyToDraw.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnCanDrawStateChanged {
      interface X extends Base {
        args: {
          can_draw: boolean;
        };
        // Duration.
        dur: number;
        name: 'ProxyImpl::OnCanDrawStateChanged';
        // Denotes the end of the event OnCanDrawStateChanged.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ProxyImpl {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ProxyImpl::ProxyImpl';
        // Denotes the end of the event ProxyImpl.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RequestBeginMainFrameNotExpected {
      interface X extends Base {
        args: {
          new_state: boolean;
        };
        // Duration.
        dur: number;
        name: 'ProxyImpl::RequestBeginMainFrameNotExpected';
        // Denotes the end of the event RequestBeginMainFrameNotExpected.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ScheduledActionActivateSyncTree {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ProxyImpl::ScheduledActionActivateSyncTree';
        // Denotes the end of the event ScheduledActionActivateSyncTree.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ScheduledActionBeginLayerTreeFrameSinkCreation {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ProxyImpl::ScheduledActionBeginLayerTreeFrameSinkCreation';
        // Denotes the end of the event ScheduledActionBeginLayerTreeFrameSinkCreation.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ScheduledActionCommit {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur?: number;
        name: 'ProxyImpl::ScheduledActionCommit';
        // Denotes the end of the event ScheduledActionCommit.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ScheduledActionDraw {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ProxyImpl::ScheduledActionDraw';
        // Denotes the end of the event ScheduledActionDraw.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ScheduledActionPrepareTiles {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ProxyImpl::ScheduledActionPrepareTiles';
        // Denotes the end of the event ScheduledActionPrepareTiles.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetNeedsCommitOnImplThread {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ProxyImpl::SetNeedsCommitOnImplThread';
        // Denotes the end of the event SetNeedsCommitOnImplThread.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetNeedsRedrawOnImplThread {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ProxyImpl::SetNeedsRedrawOnImplThread';
        // Denotes the end of the event SetNeedsRedrawOnImplThread.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetVisibleOnImplThread {
      interface X extends Base {
        args: {
          visible: boolean;
        };
        // Duration.
        dur: number;
        name: 'ProxyImpl::SetVisibleOnImplThread';
        // Denotes the end of the event SetVisibleOnImplThread.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ProxyMain {
    type BeginMainFrameNotExpectedSoon = 
      TraceEvent.ProxyMain.BeginMainFrameNotExpectedSoon.X;
  
    type DidInitializeLayerTreeFrameSink = 
      TraceEvent.ProxyMain.DidInitializeLayerTreeFrameSink.X;
  
    type ProxyMain = 
      TraceEvent.ProxyMain.ProxyMain.X;
  
    type RequestNewLayerTreeFrameSink = 
      TraceEvent.ProxyMain.RequestNewLayerTreeFrameSink.X;
  
    type SetDeferMainFrameUpdate = 
      TraceEvent.ProxyMain.SetDeferMainFrameUpdate.F |
      TraceEvent.ProxyMain.SetDeferMainFrameUpdate.S;
  
    type SetNeedsAnimate = 
      TraceEvent.ProxyMain.SetNeedsAnimate.I;
  
    type SetNeedsCommit = 
      TraceEvent.ProxyMain.SetNeedsCommit.I;
  
    type SetNeedsUpdateLayers = 
      TraceEvent.ProxyMain.SetNeedsUpdateLayers.I;
  
    type SetVisible = 
      TraceEvent.ProxyMain.SetVisible.X;
  
    type Stop = 
      TraceEvent.ProxyMain.Stop.X;
  
    namespace BeginMainFrame {
      type Commit = 
        TraceEvent.ProxyMain.BeginMainFrame.Commit.X;
    
      namespace Commit {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'ProxyMain::BeginMainFrame::commit';
          // Denotes the end of the event Commit.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  
    namespace BeginMainFrameNotExpectedSoon {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ProxyMain::BeginMainFrameNotExpectedSoon';
        // Denotes the end of the event BeginMainFrameNotExpectedSoon.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidInitializeLayerTreeFrameSink {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ProxyMain::DidInitializeLayerTreeFrameSink';
        // Denotes the end of the event DidInitializeLayerTreeFrameSink.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ProxyMain {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ProxyMain::ProxyMain';
        // Denotes the end of the event ProxyMain.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RequestNewLayerTreeFrameSink {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ProxyMain::RequestNewLayerTreeFrameSink';
        // Denotes the end of the event RequestNewLayerTreeFrameSink.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetDeferMainFrameUpdate {
      interface F extends Base {
        args: {
        
        };
        id: string;
        name: 'ProxyMain::SetDeferMainFrameUpdate';
        // Denotes the ending of the async event SetDeferMainFrameUpdate.
        ph: 'F';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface S extends Base {
        args: {
        
        };
        id: string;
        name: 'ProxyMain::SetDeferMainFrameUpdate';
        // Denotes the beginning of the async event SetDeferMainFrameUpdate.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetNeedsAnimate {
      interface I extends Base {
        args: {
        
        };
        name: 'ProxyMain::SetNeedsAnimate';
        // Denotes an event SetNeedsAnimate. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetNeedsCommit {
      interface I extends Base {
        args: {
        
        };
        name: 'ProxyMain::SetNeedsCommit';
        // Denotes an event SetNeedsCommit. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetNeedsUpdateLayers {
      interface I extends Base {
        args: {
        
        };
        name: 'ProxyMain::SetNeedsUpdateLayers';
        // Denotes an event SetNeedsUpdateLayers. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetVisible {
      interface X extends Base {
        args: {
          visible: boolean;
        };
        // Duration.
        dur: number;
        name: 'ProxyMain::SetVisible';
        // Denotes the end of the event SetVisible.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Stop {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ProxyMain::Stop';
        // Denotes the end of the event Stop.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace QUIC_CHROMIUM_CLIENT_STREAM_READ_RESPONSE_HEADERS {
    interface n extends Base {
      args: {
        params: {
          headers: {
            '0': string;
            '1': string;
            '2': string;
            '3': string;
            '4': string;
            '5': string;
            '6': string;
            '7': string;
            '8': string;
            '9': string;
            '10': string;
            '11': string;
          }[];
        };
        source_type: string;
      };
      id: string;
      name: 'QUIC_CHROMIUM_CLIENT_STREAM_READ_RESPONSE_HEADERS';
      // Denotes the ending of the nestable async flow event QUIC_CHROMIUM_CLIENT_STREAM_READ_RESPONSE_HEADERS.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace QUIC_CHROMIUM_CLIENT_STREAM_SEND_REQUEST_HEADERS {
    interface n extends Base {
      args: {
        params: {
          headers: {
            '0': string;
            '1': string;
            '2': string;
            '3': string;
            '4': string;
            '5': string;
            '6': string;
            '7': string;
            '8': string;
            '9': string;
            '10': string;
            '11': string;
            '12'?: {
            
            };
          }[];
          quic_priority: number;
          quic_stream_id: number;
        };
        source_type: string;
      };
      id: string;
      name: 'QUIC_CHROMIUM_CLIENT_STREAM_SEND_REQUEST_HEADERS';
      // Denotes the ending of the nestable async flow event QUIC_CHROMIUM_CLIENT_STREAM_SEND_REQUEST_HEADERS.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace QUIC_CONNECTION_MIGRATION_MODE {
    interface n extends Base {
      args: {
        params: {
          connection_migration_mode: number;
        };
        source_type: string;
      };
      id: string;
      name: 'QUIC_CONNECTION_MIGRATION_MODE';
      // Denotes the ending of the nestable async flow event QUIC_CONNECTION_MIGRATION_MODE.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace QUIC_SESSION_ACK_FRAME_SENT {
    interface n extends Base {
      args: {
        params: {
          delta_time_largest_observed_us: number;
          largest_observed: number;
          missing_packets: {
          
          }[];
        };
        source_type: string;
      };
      id: string;
      name: 'QUIC_SESSION_ACK_FRAME_SENT';
      // Denotes the ending of the nestable async flow event QUIC_SESSION_ACK_FRAME_SENT.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace QUIC_SESSION_CERTIFICATE_VERIFIED {
    interface n extends Base {
      args: {
        params: {
          subjects: {
            '0': string;
            '1': string;
            '2': string;
            '3': string;
            '4': string;
            '5': string;
            '6': string;
            '7': string;
            '8': string;
            '9': string;
            '10': string;
            '11': string;
          }[];
        };
        source_type: string;
      };
      id: string;
      name: 'QUIC_SESSION_CERTIFICATE_VERIFIED';
      // Denotes the ending of the nestable async flow event QUIC_SESSION_CERTIFICATE_VERIFIED.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace QUIC_SESSION_CLOSED {
    interface n extends Base {
      args: {
        params: {
          from_peer: boolean;
          quic_error: number;
        };
        source_type: string;
      };
      id: string;
      name: 'QUIC_SESSION_CLOSED';
      // Denotes the ending of the nestable async flow event QUIC_SESSION_CLOSED.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace QUIC_SESSION_CRYPTO_HANDSHAKE_MESSAGE_RECEIVED {
    interface n extends Base {
      args: {
        params: {
          quic_crypto_handshake_message: string;
        };
        source_type: string;
      };
      id: string;
      name: 'QUIC_SESSION_CRYPTO_HANDSHAKE_MESSAGE_RECEIVED';
      // Denotes the ending of the nestable async flow event QUIC_SESSION_CRYPTO_HANDSHAKE_MESSAGE_RECEIVED.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace QUIC_SESSION_CRYPTO_HANDSHAKE_MESSAGE_SENT {
    interface n extends Base {
      args: {
        params: {
          quic_crypto_handshake_message: string;
        };
        source_type: string;
      };
      id: string;
      name: 'QUIC_SESSION_CRYPTO_HANDSHAKE_MESSAGE_SENT';
      // Denotes the ending of the nestable async flow event QUIC_SESSION_CRYPTO_HANDSHAKE_MESSAGE_SENT.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace QUIC_SESSION_PACKET_AUTHENTICATED {
    interface n extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'QUIC_SESSION_PACKET_AUTHENTICATED';
      // Denotes the ending of the nestable async flow event QUIC_SESSION_PACKET_AUTHENTICATED.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace QUIC_SESSION_PACKET_LOST {
    interface n extends Base {
      args: {
        params: {
          detection_time_us: number;
          packet_number: number;
          transmission_type: number;
        };
        source_type: string;
      };
      id: string;
      name: 'QUIC_SESSION_PACKET_LOST';
      // Denotes the ending of the nestable async flow event QUIC_SESSION_PACKET_LOST.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace QUIC_SESSION_PACKET_RECEIVED {
    interface n extends Base {
      args: {
        params: {
          peer_address: string;
          self_address: string;
          size: number;
        };
        source_type: string;
      };
      id: string;
      name: 'QUIC_SESSION_PACKET_RECEIVED';
      // Denotes the ending of the nestable async flow event QUIC_SESSION_PACKET_RECEIVED.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace QUIC_SESSION_PACKET_SENT {
    interface n extends Base {
      args: {
        params: {
          packet_number: number;
          sent_time_us: number;
          size: number;
          transmission_type: number;
        };
        source_type: string;
      };
      id: string;
      name: 'QUIC_SESSION_PACKET_SENT';
      // Denotes the ending of the nestable async flow event QUIC_SESSION_PACKET_SENT.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace QUIC_SESSION_PING_FRAME_SENT {
    interface n extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'QUIC_SESSION_PING_FRAME_SENT';
      // Denotes the ending of the nestable async flow event QUIC_SESSION_PING_FRAME_SENT.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace QUIC_SESSION_RST_STREAM_FRAME_RECEIVED {
    interface n extends Base {
      args: {
        params: {
          quic_rst_stream_error: number;
          stream_id: number;
        };
        source_type: string;
      };
      id: string;
      name: 'QUIC_SESSION_RST_STREAM_FRAME_RECEIVED';
      // Denotes the ending of the nestable async flow event QUIC_SESSION_RST_STREAM_FRAME_RECEIVED.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace QUIC_SESSION_RST_STREAM_FRAME_SENT {
    interface n extends Base {
      args: {
        params: {
          quic_rst_stream_error: number;
          stream_id: number;
        };
        source_type: string;
      };
      id: string;
      name: 'QUIC_SESSION_RST_STREAM_FRAME_SENT';
      // Denotes the ending of the nestable async flow event QUIC_SESSION_RST_STREAM_FRAME_SENT.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace QUIC_SESSION_STREAM_FRAME_RECEIVED {
    interface n extends Base {
      args: {
        params: {
          fin: boolean;
          length: number;
          offset: number;
          stream_id: number;
        };
        source_type: string;
      };
      id: string;
      name: 'QUIC_SESSION_STREAM_FRAME_RECEIVED';
      // Denotes the ending of the nestable async flow event QUIC_SESSION_STREAM_FRAME_RECEIVED.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace QUIC_SESSION_STREAM_FRAME_SENT {
    interface n extends Base {
      args: {
        params: {
          fin: boolean;
          length: number;
          offset: number;
          stream_id: number;
        };
        source_type: string;
      };
      id: string;
      name: 'QUIC_SESSION_STREAM_FRAME_SENT';
      // Denotes the ending of the nestable async flow event QUIC_SESSION_STREAM_FRAME_SENT.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace QUIC_SESSION_UNAUTHENTICATED_PACKET_HEADER_RECEIVED {
    interface n extends Base {
      args: {
        params: {
          connection_id: string;
          packet_number: number;
          reset_flag: number;
          version_flag: number;
        };
        source_type: string;
      };
      id: string;
      name: 'QUIC_SESSION_UNAUTHENTICATED_PACKET_HEADER_RECEIVED';
      // Denotes the ending of the nestable async flow event QUIC_SESSION_UNAUTHENTICATED_PACKET_HEADER_RECEIVED.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace QUIC_SESSION_VERSION_NEGOTIATED {
    interface n extends Base {
      args: {
        params: {
          version: string;
        };
        source_type: string;
      };
      id: string;
      name: 'QUIC_SESSION_VERSION_NEGOTIATED';
      // Denotes the ending of the nestable async flow event QUIC_SESSION_VERSION_NEGOTIATED.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace QUIC_SESSION {
    interface b extends Base {
      args: {
        params: {
          cert_verify_flags: number;
          host: string;
          port: number;
          privacy_mode: boolean;
          require_confirmation: boolean;
        };
        source_type: string;
      };
      id: string;
      name: 'QUIC_SESSION';
      // Denotes the beginning of the nestable async flow event QUIC_SESSION.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'QUIC_SESSION';
      // Denotes a step into the nestable async flow event QUIC_SESSION.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace QUIC_STREAM_FACTORY_JOB_BOUND_TO_HTTP_STREAM_JOB {
    interface n extends Base {
      args: {
        params: {
          source_dependency: {
            id: number;
            type: number;
          };
        };
        source_type: string;
      };
      id: string;
      name: 'QUIC_STREAM_FACTORY_JOB_BOUND_TO_HTTP_STREAM_JOB';
      // Denotes the ending of the nestable async flow event QUIC_STREAM_FACTORY_JOB_BOUND_TO_HTTP_STREAM_JOB.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace QUIC_STREAM_FACTORY_JOB_CONNECT {
    interface b extends Base {
      args: {
        params: {
          require_confirmation: boolean;
        };
        source_type: string;
      };
      id: string;
      name: 'QUIC_STREAM_FACTORY_JOB_CONNECT';
      // Denotes the beginning of the nestable async flow event QUIC_STREAM_FACTORY_JOB_CONNECT.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'QUIC_STREAM_FACTORY_JOB_CONNECT';
      // Denotes a step into the nestable async flow event QUIC_STREAM_FACTORY_JOB_CONNECT.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace QUIC_STREAM_FACTORY_JOB {
    interface b extends Base {
      args: {
        params: {
          server_id: string;
        };
        source_type: string;
      };
      id: string;
      name: 'QUIC_STREAM_FACTORY_JOB';
      // Denotes the beginning of the nestable async flow event QUIC_STREAM_FACTORY_JOB.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'QUIC_STREAM_FACTORY_JOB';
      // Denotes a step into the nestable async flow event QUIC_STREAM_FACTORY_JOB.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace QuicStreamFactory {
    type CreateSession = 
      TraceEvent.QuicStreamFactory.CreateSession.X;
  
    namespace CreateSession {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'QuicStreamFactory::CreateSession';
        // Denotes the end of the event CreateSession.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Job {
      type DoLoop = 
        TraceEvent.QuicStreamFactory.Job.DoLoop.X;
    
      namespace DoLoop {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'QuicStreamFactory::Job::DoLoop';
          // Denotes the end of the event DoLoop.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace Rappor {
    namespace Mojom {
      type RapporRecorder = 
        TraceEvent.Rappor.Mojom.RapporRecorder.X;
    
      namespace RapporRecorder {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'rappor.mojom.RapporRecorder';
          // Denotes the end of the event RapporRecorder.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace RasterizerTaskImpl {
    type RunOnWorkerThread = 
      TraceEvent.RasterizerTaskImpl.RunOnWorkerThread.X;
  
    namespace RunOnWorkerThread {
      interface X extends Base {
        args: {
          source_prepare_tiles_id: number;
        };
        // Duration.
        dur: number;
        name: 'RasterizerTaskImpl::RunOnWorkerThread';
        // Denotes the end of the event RunOnWorkerThread.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace RasterSource {
    type PerformSolidColorAnalysis = 
      TraceEvent.RasterSource.PerformSolidColorAnalysis.X;
  
    namespace PerformSolidColorAnalysis {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'RasterSource::PerformSolidColorAnalysis';
        // Denotes the end of the event PerformSolidColorAnalysis.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace RasterTask {
    interface B extends Base {
      args: {
        tileData: {
          layerId: number;
          sourceFrameNumber: number;
          tileId: {
            id_ref: string;
          };
          tileResolution: string;
        };
      };
      name: 'RasterTask';
      // Denotes the beginning of the event RasterTask.
      ph: 'B';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface E extends Base {
      args: {
      
      };
      name: 'RasterTask';
      // Denotes the ending of the event RasterTask.
      ph: 'E';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ReadTransaction {
    interface B extends Base {
      args: {
        src_file: string;
        src_func: string;
      };
      name: 'ReadTransaction';
      // Denotes the beginning of the event ReadTransaction.
      ph: 'B';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface E extends Base {
      args: {
      
      };
      name: 'ReadTransaction';
      // Denotes the ending of the event ReadTransaction.
      ph: 'E';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace RealTimeDomain {
    type DelayTillNextTask = 
      TraceEvent.RealTimeDomain.DelayTillNextTask.X;
  
    namespace DelayTillNextTask {
      interface X extends Base {
        args: {
          delay_ms: number;
        };
        // Duration.
        dur: number;
        name: 'RealTimeDomain::DelayTillNextTask';
        // Denotes the end of the event DelayTillNextTask.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace RecordingSource {
    type DetermineIfSolidColor = 
      TraceEvent.RecordingSource.DetermineIfSolidColor.X;
  
    type FinishDisplayItemListUpdate = 
      TraceEvent.RecordingSource.FinishDisplayItemListUpdate.X;
  
    namespace DetermineIfSolidColor {
      interface X extends Base {
        args: {
          opcount: number;
        };
        // Duration.
        dur: number;
        name: 'RecordingSource::DetermineIfSolidColor';
        // Denotes the end of the event DetermineIfSolidColor.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace FinishDisplayItemListUpdate {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'RecordingSource::FinishDisplayItemListUpdate';
        // Denotes the end of the event FinishDisplayItemListUpdate.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace RedirectEnd {
    interface R extends Base {
      args: {
        frame: string;
      };
      name: 'redirectEnd';
      // Denotes a mark of the event RedirectEnd.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace RedirectStart {
    interface R extends Base {
      args: {
        frame: string;
      };
      name: 'redirectStart';
      // Denotes a mark of the event RedirectStart.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace RememberedSetUpdatingItem {
    type Process = 
      TraceEvent.RememberedSetUpdatingItem.Process.X;
  
    namespace Process {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'RememberedSetUpdatingItem::Process';
        // Denotes the end of the event Process.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace RemoteWindowProxy {
    type Initialize = 
      TraceEvent.RemoteWindowProxy.Initialize.X;
  
    namespace Initialize {
      interface X extends Base {
        args: {
          isMainWindow: boolean;
        };
        // Duration.
        dur: number;
        name: 'RemoteWindowProxy::initialize';
        // Denotes the end of the event Initialize.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace RendererAudioState {
    interface S extends Base {
      args: {
      
      };
      id: string;
      name: 'RendererAudioState';
      // Denotes the beginning of the async event RendererAudioState.
      ph: 'S';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface T extends Base {
      args: {
        step: string;
      };
      id: string;
      name: 'RendererAudioState';
      // Denotes a step into the async event RendererAudioState.
      ph: 'T';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace RendererMain {
    type START_MSG_LOOP = 
      TraceEvent.RendererMain.START_MSG_LOOP.S;
  
    namespace START_MSG_LOOP {
      interface S extends Base {
        args: {
        
        };
        id: string;
        name: 'RendererMain.START_MSG_LOOP';
        // Denotes the beginning of the async event START_MSG_LOOP.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace RendererProcessType {
    interface S extends Base {
      args: {
      
      };
      id: string;
      name: 'RendererProcessType';
      // Denotes the beginning of the async event RendererProcessType.
      ph: 'S';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface T extends Base {
      args: {
        step: string;
      };
      id: string;
      name: 'RendererProcessType';
      // Denotes a step into the async event RendererProcessType.
      ph: 'T';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace RendererScheduler {
    type BackgroundBudgetMs = 
      TraceEvent.RendererScheduler.BackgroundBudgetMs.C;
  
    namespace BackgroundBudgetMs {
      interface C extends Base {
        args: {
          value: number;
        };
        id: string;
        name: 'RendererScheduler.BackgroundBudgetMs';
        // Denotes a counter for the event BackgroundBudgetMs.
        ph: 'C';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace RendererVisibility {
    interface F extends Base {
      args: {
      
      };
      id: string;
      name: 'RendererVisibility';
      // Denotes the ending of the async event RendererVisibility.
      ph: 'F';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface S extends Base {
      args: {
      
      };
      id: string;
      name: 'RendererVisibility';
      // Denotes the beginning of the async event RendererVisibility.
      ph: 'S';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface T extends Base {
      args: {
        step: string;
      };
      id: string;
      name: 'RendererVisibility';
      // Denotes a step into the async event RendererVisibility.
      ph: 'T';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace RenderFrame {
    interface D extends Base {
      args: {
      
      };
      id: string;
      name: 'RenderFrame';
      // Denotes a delete object of the event RenderFrame.
      ph: 'D';
      scope: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface N extends Base {
      args: {
      
      };
      id: string;
      name: 'RenderFrame';
      // Denotes a create object of the event RenderFrame.
      ph: 'N';
      scope: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface O extends Base {
      args: {
        snapshot: {
          parent: {
            id_ref: string;
            scope: string;
          };
        };
      };
      id: string;
      name: 'RenderFrame';
      // Denotes a snapshot object of the event RenderFrame.
      ph: 'O';
      scope: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace RenderFrameHostImpl {
    type BeginNavigation = 
      TraceEvent.RenderFrameHostImpl.BeginNavigation.X;
  
    type CommitNavigation = 
      TraceEvent.RenderFrameHostImpl.CommitNavigation.X;
  
    type CreateRenderFrame = 
      TraceEvent.RenderFrameHostImpl.CreateRenderFrame.X;
  
    type DidCommitProvisionalLoad = 
      TraceEvent.RenderFrameHostImpl.DidCommitProvisionalLoad.X;
  
    type OnDidAddContentSecurityPolicies = 
      TraceEvent.RenderFrameHostImpl.OnDidAddContentSecurityPolicies.X;
  
    type OnDidFailProvisionalLoadWithError = 
      TraceEvent.RenderFrameHostImpl.OnDidFailProvisionalLoadWithError.X;
  
    type OnDidStopLoading = 
      TraceEvent.RenderFrameHostImpl.OnDidStopLoading.X;
  
    type OnDispatchLoad = 
      TraceEvent.RenderFrameHostImpl.OnDispatchLoad.X;
  
    type SwapOut = 
      TraceEvent.RenderFrameHostImpl.SwapOut.F |
      TraceEvent.RenderFrameHostImpl.SwapOut.S;
  
    namespace BeginNavigation {
      interface X extends Base {
        args: {
          frame_tree_node: number;
          url: string;
        };
        // Duration.
        dur: number;
        name: 'RenderFrameHostImpl::BeginNavigation';
        // Denotes the end of the event BeginNavigation.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CommitNavigation {
      interface X extends Base {
        args: {
          frame_tree_node: number;
          url: string;
        };
        // Duration.
        dur: number;
        name: 'RenderFrameHostImpl::CommitNavigation';
        // Denotes the end of the event CommitNavigation.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CreateRenderFrame {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'RenderFrameHostImpl::CreateRenderFrame';
        // Denotes the end of the event CreateRenderFrame.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidCommitProvisionalLoad {
      interface X extends Base {
        args: {
          details: {
            base_url?: string;
            frame_tree_node: number;
            origin: string;
            'process lock': string;
            'site id': number;
            transition: number;
          };
          url: string;
        };
        // Duration.
        dur: number;
        name: 'RenderFrameHostImpl::DidCommitProvisionalLoad';
        // Denotes the end of the event DidCommitProvisionalLoad.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnDidAddContentSecurityPolicies {
      interface X extends Base {
        args: {
          frame_tree_node: number;
        };
        // Duration.
        dur: number;
        name: 'RenderFrameHostImpl::OnDidAddContentSecurityPolicies';
        // Denotes the end of the event OnDidAddContentSecurityPolicies.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnDidFailProvisionalLoadWithError {
      interface X extends Base {
        args: {
          error: number;
          frame_tree_node: number;
        };
        // Duration.
        dur: number;
        name: 'RenderFrameHostImpl::OnDidFailProvisionalLoadWithError';
        // Denotes the end of the event OnDidFailProvisionalLoadWithError.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnDidStopLoading {
      interface X extends Base {
        args: {
          frame_tree_node: number;
        };
        // Duration.
        dur: number;
        name: 'RenderFrameHostImpl::OnDidStopLoading';
        // Denotes the end of the event OnDidStopLoading.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnDispatchLoad {
      interface X extends Base {
        args: {
          frame_tree_node: number;
        };
        // Duration.
        dur: number;
        name: 'RenderFrameHostImpl::OnDispatchLoad';
        // Denotes the end of the event OnDispatchLoad.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SwapOut {
      interface F extends Base {
        args: {
        
        };
        id: string;
        name: 'RenderFrameHostImpl::SwapOut';
        // Denotes the ending of the async event SwapOut.
        ph: 'F';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface S extends Base {
        args: {
          frame_tree_node: number;
        };
        id: string;
        name: 'RenderFrameHostImpl::SwapOut';
        // Denotes the beginning of the async event SwapOut.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace RenderFrameHostImplBeforeUnload {
    interface F extends Base {
      args: {
        'FrameTreeNode id': number;
      };
      id: string;
      name: 'RenderFrameHostImpl BeforeUnload';
      // Denotes the ending of the async event RenderFrameHostImplBeforeUnload.
      ph: 'F';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface S extends Base {
      args: {
        '&RenderFrameHostImpl': string;
      };
      id: string;
      name: 'RenderFrameHostImpl BeforeUnload';
      // Denotes the beginning of the async event RenderFrameHostImplBeforeUnload.
      ph: 'S';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace RenderFrameHostManager {
    type CommitPending = 
      TraceEvent.RenderFrameHostManager.CommitPending.X;
  
    type SwapOutOldFrame = 
      TraceEvent.RenderFrameHostManager.SwapOutOldFrame.X;
  
    namespace CommitPending {
      interface X extends Base {
        args: {
          'FrameTreeNode id': number;
        };
        // Duration.
        dur: number;
        name: 'RenderFrameHostManager::CommitPending';
        // Denotes the end of the event CommitPending.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SwapOutOldFrame {
      interface X extends Base {
        args: {
          'FrameTreeNode id': number;
        };
        // Duration.
        dur: number;
        name: 'RenderFrameHostManager::SwapOutOldFrame';
        // Denotes the end of the event SwapOutOldFrame.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace RenderFrameImpl {
    type CreateChildFrame = 
      TraceEvent.RenderFrameImpl.CreateChildFrame.X;
  
    type DidCommitProvisionalLoad = 
      TraceEvent.RenderFrameImpl.DidCommitProvisionalLoad.X;
  
    type DidFinishDocumentLoad = 
      TraceEvent.RenderFrameImpl.DidFinishDocumentLoad.X;
  
    type DidFinishLoad = 
      TraceEvent.RenderFrameImpl.DidFinishLoad.X;
  
    type DidStartLoading = 
      TraceEvent.RenderFrameImpl.DidStartLoading.X;
  
    type DidStartProvisionalLoad = 
      TraceEvent.RenderFrameImpl.DidStartProvisionalLoad.X;
  
    type DidStopLoading = 
      TraceEvent.RenderFrameImpl.DidStopLoading.X;
  
    type Initialize = 
      TraceEvent.RenderFrameImpl.Initialize.X;
  
    namespace CreateChildFrame {
      interface X extends Base {
        args: {
          child: number;
          id: number;
        };
        // Duration.
        dur: number;
        name: 'RenderFrameImpl::createChildFrame';
        // Denotes the end of the event CreateChildFrame.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidCommitProvisionalLoad {
      interface X extends Base {
        args: {
          id: number;
          url: string;
        };
        // Duration.
        dur: number;
        name: 'RenderFrameImpl::didCommitProvisionalLoad';
        // Denotes the end of the event DidCommitProvisionalLoad.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidFinishDocumentLoad {
      interface X extends Base {
        args: {
          id: number;
        };
        // Duration.
        dur: number;
        name: 'RenderFrameImpl::didFinishDocumentLoad';
        // Denotes the end of the event DidFinishDocumentLoad.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidFinishLoad {
      interface X extends Base {
        args: {
          id: number;
        };
        // Duration.
        dur: number;
        name: 'RenderFrameImpl::didFinishLoad';
        // Denotes the end of the event DidFinishLoad.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidStartLoading {
      interface X extends Base {
        args: {
          id: number;
        };
        // Duration.
        dur: number;
        name: 'RenderFrameImpl::didStartLoading';
        // Denotes the end of the event DidStartLoading.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidStartProvisionalLoad {
      interface X extends Base {
        args: {
          id: number;
          url: string;
        };
        // Duration.
        dur: number;
        name: 'RenderFrameImpl::didStartProvisionalLoad';
        // Denotes the end of the event DidStartProvisionalLoad.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidStopLoading {
      interface X extends Base {
        args: {
          id: number;
        };
        // Duration.
        dur: number;
        name: 'RenderFrameImpl::didStopLoading';
        // Denotes the end of the event DidStopLoading.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Initialize {
      interface X extends Base {
        args: {
          id: number;
          parent: number;
        };
        // Duration.
        dur: number;
        name: 'RenderFrameImpl::Initialize';
        // Denotes the end of the event Initialize.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace RenderPass {
    interface D extends Base {
      args: {
      
      };
      id: string;
      name: 'RenderPass';
      // Denotes a delete object of the event RenderPass.
      ph: 'D';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace RenderProcessHostImpl {
    type Send = 
      TraceEvent.RenderProcessHostImpl.Send.X;
  
    namespace Send {
      interface X extends Base {
        args: {
          class: number;
          line: number;
        };
        // Duration.
        dur: number;
        name: 'RenderProcessHostImpl::Send';
        // Denotes the end of the event Send.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UpdateProcessPriority {
      type SetProcessPriority = 
        TraceEvent.RenderProcessHostImpl.UpdateProcessPriority.SetProcessPriority.X;
    
      namespace SetProcessPriority {
        interface X extends Base {
          args: {
            pid: number;
            priority_is_background: boolean;
          };
          // Duration.
          dur: number;
          name: 'RenderProcessHostImpl::UpdateProcessPriority.SetProcessPriority';
          // Denotes the end of the event SetProcessPriority.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      interface X extends Base {
        args: {
          has_pending_views: boolean;
          should_background: boolean;
        };
        // Duration.
        dur: number;
        name: 'RenderProcessHostImpl::UpdateProcessPriority';
        // Denotes the end of the event UpdateProcessPriority.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace RenderSurfaceImpl {
    type AppendQuads = 
      TraceEvent.RenderSurfaceImpl.AppendQuads.X;
  
    namespace AppendQuads {
      interface X extends Base {
        args: {
          mask_layer_gpu_memory_usage: number;
        };
        // Duration.
        dur: number;
        name: 'RenderSurfaceImpl::AppendQuads';
        // Denotes the end of the event AppendQuads.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace RenderTextHarfBuzz {
    type ItemizeTextToRuns = 
      TraceEvent.RenderTextHarfBuzz.ItemizeTextToRuns.X;
  
    type ShapeRuns = 
      TraceEvent.RenderTextHarfBuzz.ShapeRuns.X;
  
    type ShapeRunWithFontInternal = 
      TraceEvent.RenderTextHarfBuzz.ShapeRunWithFontInternal.X;
  
    namespace ItemizeTextToRuns {
      interface X extends Base {
        args: {
          text_length: number;
        };
        // Duration.
        dur: number;
        name: 'RenderTextHarfBuzz::ItemizeTextToRuns';
        // Denotes the end of the event ItemizeTextToRuns.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ShapeRuns {
      interface X extends Base {
        args: {
          run_count: number;
        };
        // Duration.
        dur: number;
        name: 'RenderTextHarfBuzz::ShapeRuns';
        // Denotes the end of the event ShapeRuns.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ShapeRunWithFontInternal {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'RenderTextHarfBuzz::ShapeRunWithFontInternal';
        // Denotes the end of the event ShapeRunWithFontInternal.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace RenderThreadImpl {
    type EstablishGpuChannelSync = 
      TraceEvent.RenderThreadImpl.EstablishGpuChannelSync.X;
  
    namespace EstablishGpuChannelSync {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'RenderThreadImpl::EstablishGpuChannelSync';
        // Denotes the end of the event EstablishGpuChannelSync.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace RenderViewHostImpl {
    type CreateRenderView = 
      TraceEvent.RenderViewHostImpl.CreateRenderView.X;
  
    type GetWebkitPrefs = 
      TraceEvent.RenderViewHostImpl.GetWebkitPrefs.X;
  
    namespace CreateRenderView {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'RenderViewHostImpl::CreateRenderView';
        // Denotes the end of the event CreateRenderView.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GetWebkitPrefs {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'RenderViewHostImpl::GetWebkitPrefs';
        // Denotes the end of the event GetWebkitPrefs.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace RenderWidget {
    type DidCommitAndDrawCompositorFrame = 
      TraceEvent.RenderWidget.DidCommitAndDrawCompositorFrame.X;
  
    type InitializeLayerTreeView = 
      TraceEvent.RenderWidget.InitializeLayerTreeView.X;
  
    type OnSynchronizeVisualProperties = 
      TraceEvent.RenderWidget.OnSynchronizeVisualProperties.X;
  
    type OnWasHidden = 
      TraceEvent.RenderWidget.OnWasHidden.X;
  
    type OnWasShown = 
      TraceEvent.RenderWidget.OnWasShown.X;
  
    type UpdateSelectionBounds = 
      TraceEvent.RenderWidget.UpdateSelectionBounds.X;
  
    type UpdateTextInputState = 
      TraceEvent.RenderWidget.UpdateTextInputState.X;
  
    type WillBeginCompositorFrame = 
      TraceEvent.RenderWidget.WillBeginCompositorFrame.X;
  
    namespace DidCommitAndDrawCompositorFrame {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'RenderWidget::DidCommitAndDrawCompositorFrame';
        // Denotes the end of the event DidCommitAndDrawCompositorFrame.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace InitializeLayerTreeView {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'RenderWidget::InitializeLayerTreeView';
        // Denotes the end of the event InitializeLayerTreeView.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnSynchronizeVisualProperties {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'RenderWidget::OnSynchronizeVisualProperties';
        // Denotes the end of the event OnSynchronizeVisualProperties.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnWasHidden {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'RenderWidget::OnWasHidden';
        // Denotes the end of the event OnWasHidden.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnWasShown {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'RenderWidget::OnWasShown';
        // Denotes the end of the event OnWasShown.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UpdateSelectionBounds {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'RenderWidget::UpdateSelectionBounds';
        // Denotes the end of the event UpdateSelectionBounds.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UpdateTextInputState {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'RenderWidget::UpdateTextInputState';
        // Denotes the end of the event UpdateTextInputState.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace WillBeginCompositorFrame {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'RenderWidget::willBeginCompositorFrame';
        // Denotes the end of the event WillBeginCompositorFrame.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace RenderWidgetHostImpl {
    type DidUpdateVisualProperties = 
      TraceEvent.RenderWidgetHostImpl.DidUpdateVisualProperties.X;
  
    type ForwardKeyboardEvent = 
      TraceEvent.RenderWidgetHostImpl.ForwardKeyboardEvent.X;
  
    type ForwardMouseEvent = 
      TraceEvent.RenderWidgetHostImpl.ForwardMouseEvent.X;
  
    type GetScreenInfo = 
      TraceEvent.RenderWidgetHostImpl.GetScreenInfo.X;
  
    type WasHidden = 
      TraceEvent.RenderWidgetHostImpl.WasHidden.X;
  
    type WasShown = 
      TraceEvent.RenderWidgetHostImpl.WasShown.X;
  
    namespace DidUpdateVisualProperties {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'RenderWidgetHostImpl::DidUpdateVisualProperties';
        // Denotes the end of the event DidUpdateVisualProperties.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ForwardKeyboardEvent {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'RenderWidgetHostImpl::ForwardKeyboardEvent';
        // Denotes the end of the event ForwardKeyboardEvent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ForwardMouseEvent {
      interface X extends Base {
        args: {
          x: number;
          y: number;
        };
        // Duration.
        dur: number;
        name: 'RenderWidgetHostImpl::ForwardMouseEvent';
        // Denotes the end of the event ForwardMouseEvent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GetScreenInfo {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'RenderWidgetHostImpl::GetScreenInfo';
        // Denotes the end of the event GetScreenInfo.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace WasHidden {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'RenderWidgetHostImpl::WasHidden';
        // Denotes the end of the event WasHidden.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace WasShown {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'RenderWidgetHostImpl::WasShown';
        // Denotes the end of the event WasShown.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace RenderWidgetHostViewCocoa {
    type KeyEvent = 
      TraceEvent.RenderWidgetHostViewCocoa.KeyEvent.X;
  
    type MouseEvent = 
      TraceEvent.RenderWidgetHostViewCocoa.MouseEvent.X;
  
    type SendViewBoundsInWindowToClient = 
      TraceEvent.RenderWidgetHostViewCocoa.SendViewBoundsInWindowToClient.X;
  
    type SendWindowFrameInScreenToClient = 
      TraceEvent.RenderWidgetHostViewCocoa.SendWindowFrameInScreenToClient.X;
  
    namespace KeyEvent {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'RenderWidgetHostViewCocoa::keyEvent';
        // Denotes the end of the event KeyEvent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace MouseEvent {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'RenderWidgetHostViewCocoa::mouseEvent';
        // Denotes the end of the event MouseEvent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SendViewBoundsInWindowToClient {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'RenderWidgetHostViewCocoa::sendViewBoundsInWindowToClient';
        // Denotes the end of the event SendViewBoundsInWindowToClient.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SendWindowFrameInScreenToClient {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'RenderWidgetHostViewCocoa::sendWindowFrameInScreenToClient';
        // Denotes the end of the event SendWindowFrameInScreenToClient.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace RenderWidgetInputHandler {
    type OnHandleInputEvent = 
      TraceEvent.RenderWidgetInputHandler.OnHandleInputEvent.X;
  
    namespace OnHandleInputEvent {
      interface X extends Base {
        args: {
          event: string;
        };
        // Duration.
        dur: number;
        name: 'RenderWidgetInputHandler::OnHandleInputEvent';
        // Denotes the end of the event OnHandleInputEvent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace RenderWorker0x7f8e1500b000 {
    interface b extends Base {
      args: {
        channel: string;
        gl_category: string;
      };
      id: string;
      name: 'RenderWorker-0x7f8e1500b000';
      // Denotes the beginning of the nestable async flow event RenderWorker0x7f8e1500b000.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
      use_async_tts: number;
    }
  
    interface e extends Base {
      args: {
        channel: string;
        gl_category: string;
      };
      id: string;
      name: 'RenderWorker-0x7f8e1500b000';
      // Denotes a step into the nestable async flow event RenderWorker0x7f8e1500b000.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
      use_async_tts: number;
    }
  
    interface F extends Base {
      args: {
        channel: string;
        gl_category: string;
      };
      id: string;
      name: 'RenderWorker-0x7f8e1500b000';
      // Denotes the ending of the async event RenderWorker0x7f8e1500b000.
      ph: 'F';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface S extends Base {
      args: {
        channel: string;
        gl_category: string;
      };
      id: string;
      name: 'RenderWorker-0x7f8e1500b000';
      // Denotes the beginning of the async event RenderWorker0x7f8e1500b000.
      ph: 'S';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace RenderWorker0x7fa57a039c00 {
    interface b extends Base {
      args: {
        channel: string;
        gl_category: string;
      };
      id: string;
      name: 'RenderWorker-0x7fa57a039c00';
      // Denotes the beginning of the nestable async flow event RenderWorker0x7fa57a039c00.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
      use_async_tts: number;
    }
  
    interface e extends Base {
      args: {
        channel: string;
        gl_category: string;
      };
      id: string;
      name: 'RenderWorker-0x7fa57a039c00';
      // Denotes a step into the nestable async flow event RenderWorker0x7fa57a039c00.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
      use_async_tts: number;
    }
  
    interface F extends Base {
      args: {
        channel: string;
        gl_category: string;
      };
      id: string;
      name: 'RenderWorker-0x7fa57a039c00';
      // Denotes the ending of the async event RenderWorker0x7fa57a039c00.
      ph: 'F';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface S extends Base {
      args: {
        channel: string;
        gl_category: string;
      };
      id: string;
      name: 'RenderWorker-0x7fa57a039c00';
      // Denotes the beginning of the async event RenderWorker0x7fa57a039c00.
      ph: 'S';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace RenderWorker0x7fcab207b200 {
    interface b extends Base {
      args: {
        channel: string;
        gl_category: string;
      };
      id: string;
      name: 'RenderWorker-0x7fcab207b200';
      // Denotes the beginning of the nestable async flow event RenderWorker0x7fcab207b200.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
      use_async_tts: number;
    }
  
    interface e extends Base {
      args: {
        channel: string;
        gl_category: string;
      };
      id: string;
      name: 'RenderWorker-0x7fcab207b200';
      // Denotes a step into the nestable async flow event RenderWorker0x7fcab207b200.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
      use_async_tts: number;
    }
  
    interface F extends Base {
      args: {
        channel: string;
        gl_category: string;
      };
      id: string;
      name: 'RenderWorker-0x7fcab207b200';
      // Denotes the ending of the async event RenderWorker0x7fcab207b200.
      ph: 'F';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface S extends Base {
      args: {
        channel: string;
        gl_category: string;
      };
      id: string;
      name: 'RenderWorker-0x7fcab207b200';
      // Denotes the beginning of the async event RenderWorker0x7fcab207b200.
      ph: 'S';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace RenderWorker0x7fd50f00aa00 {
    interface b extends Base {
      args: {
        channel: string;
        gl_category: string;
      };
      id: string;
      name: 'RenderWorker-0x7fd50f00aa00';
      // Denotes the beginning of the nestable async flow event RenderWorker0x7fd50f00aa00.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
      use_async_tts: number;
    }
  
    interface e extends Base {
      args: {
        channel: string;
        gl_category: string;
      };
      id: string;
      name: 'RenderWorker-0x7fd50f00aa00';
      // Denotes a step into the nestable async flow event RenderWorker0x7fd50f00aa00.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
      use_async_tts: number;
    }
  
    interface F extends Base {
      args: {
        channel: string;
        gl_category: string;
      };
      id: string;
      name: 'RenderWorker-0x7fd50f00aa00';
      // Denotes the ending of the async event RenderWorker0x7fd50f00aa00.
      ph: 'F';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface S extends Base {
      args: {
        channel: string;
        gl_category: string;
      };
      id: string;
      name: 'RenderWorker-0x7fd50f00aa00';
      // Denotes the beginning of the async event RenderWorker0x7fd50f00aa00.
      ph: 'S';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace RenderWorker0x7fdabc07b400 {
    interface b extends Base {
      args: {
        channel: string;
        gl_category: string;
      };
      id: string;
      name: 'RenderWorker-0x7fdabc07b400';
      // Denotes the beginning of the nestable async flow event RenderWorker0x7fdabc07b400.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
      use_async_tts: number;
    }
  
    interface e extends Base {
      args: {
        channel: string;
        gl_category: string;
      };
      id: string;
      name: 'RenderWorker-0x7fdabc07b400';
      // Denotes a step into the nestable async flow event RenderWorker0x7fdabc07b400.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
      use_async_tts: number;
    }
  
    interface F extends Base {
      args: {
        channel: string;
        gl_category: string;
      };
      id: string;
      name: 'RenderWorker-0x7fdabc07b400';
      // Denotes the ending of the async event RenderWorker0x7fdabc07b400.
      ph: 'F';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface S extends Base {
      args: {
        channel: string;
        gl_category: string;
      };
      id: string;
      name: 'RenderWorker-0x7fdabc07b400';
      // Denotes the beginning of the async event RenderWorker0x7fdabc07b400.
      ph: 'S';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace RenderWorker0x7fdefa843000 {
    interface b extends Base {
      args: {
        channel: string;
        gl_category: string;
      };
      id: string;
      name: 'RenderWorker-0x7fdefa843000';
      // Denotes the beginning of the nestable async flow event RenderWorker0x7fdefa843000.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
      use_async_tts: number;
    }
  
    interface e extends Base {
      args: {
        channel: string;
        gl_category: string;
      };
      id: string;
      name: 'RenderWorker-0x7fdefa843000';
      // Denotes a step into the nestable async flow event RenderWorker0x7fdefa843000.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
      use_async_tts: number;
    }
  
    interface F extends Base {
      args: {
        channel: string;
        gl_category: string;
      };
      id: string;
      name: 'RenderWorker-0x7fdefa843000';
      // Denotes the ending of the async event RenderWorker0x7fdefa843000.
      ph: 'F';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface S extends Base {
      args: {
        channel: string;
        gl_category: string;
      };
      id: string;
      name: 'RenderWorker-0x7fdefa843000';
      // Denotes the beginning of the async event RenderWorker0x7fdefa843000.
      ph: 'S';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace RenderWorker0x7fe5c4821c00 {
    interface b extends Base {
      args: {
        channel: string;
        gl_category: string;
      };
      id: string;
      name: 'RenderWorker-0x7fe5c4821c00';
      // Denotes the beginning of the nestable async flow event RenderWorker0x7fe5c4821c00.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
      use_async_tts: number;
    }
  
    interface e extends Base {
      args: {
        channel: string;
        gl_category: string;
      };
      id: string;
      name: 'RenderWorker-0x7fe5c4821c00';
      // Denotes a step into the nestable async flow event RenderWorker0x7fe5c4821c00.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
      use_async_tts: number;
    }
  
    interface F extends Base {
      args: {
        channel: string;
        gl_category: string;
      };
      id: string;
      name: 'RenderWorker-0x7fe5c4821c00';
      // Denotes the ending of the async event RenderWorker0x7fe5c4821c00.
      ph: 'F';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface S extends Base {
      args: {
        channel: string;
        gl_category: string;
      };
      id: string;
      name: 'RenderWorker-0x7fe5c4821c00';
      // Denotes the beginning of the async event RenderWorker0x7fe5c4821c00.
      ph: 'S';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace REQUEST_ALIVE {
    interface b extends Base {
      args: {
        params: {
          priority: string;
          url: string;
        };
        source_type: string;
      };
      id: string;
      name: 'REQUEST_ALIVE';
      // Denotes the beginning of the nestable async flow event REQUEST_ALIVE.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
        params: {
          net_error: number;
        };
        source_type: string;
      };
      id: string;
      name: 'REQUEST_ALIVE';
      // Denotes a step into the nestable async flow event REQUEST_ALIVE.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace RequestAnimationFrame {
    interface I extends Base {
      args: {
        data: {
          frame: string;
          id: number;
          stackTrace?: {
            columnNumber: number;
            functionName: string;
            lineNumber: number;
            scriptId: string;
            url: string;
          }[];
        };
      };
      name: 'RequestAnimationFrame';
      // Denotes an event RequestAnimationFrame. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace RequestIdleCallback {
    interface I extends Base {
      args: {
        data: {
          frame: string;
          id: number;
          stackTrace?: {
            columnNumber: number;
            functionName: string;
            lineNumber: number;
            scriptId: string;
            url: string;
          }[];
          timeout: number;
        };
      };
      name: 'RequestIdleCallback';
      // Denotes an event RequestIdleCallback. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace RequestMainThreadFrame {
    interface I extends Base {
      args: {
        layerTreeId: number;
      };
      name: 'RequestMainThreadFrame';
      // Denotes an event RequestMainThreadFrame. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace RequestStart {
    interface R extends Base {
      args: {
      
      };
      name: 'requestStart';
      // Denotes a mark of the event RequestStart.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Resource_coordinator {
    namespace Mojom {
      type CoordinationUnitProvider = 
        TraceEvent.Resource_coordinator.Mojom.CoordinationUnitProvider.X;
    
      type FrameCoordinationUnit = 
        TraceEvent.Resource_coordinator.Mojom.FrameCoordinationUnit.X;
    
      type PageCoordinationUnit = 
        TraceEvent.Resource_coordinator.Mojom.PageCoordinationUnit.X;
    
      type PageSignalReceiver = 
        TraceEvent.Resource_coordinator.Mojom.PageSignalReceiver.X;
    
      type ProcessCoordinationUnit = 
        TraceEvent.Resource_coordinator.Mojom.ProcessCoordinationUnit.X;
    
      namespace CoordinationUnitProvider {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'resource_coordinator.mojom.CoordinationUnitProvider';
          // Denotes the end of the event CoordinationUnitProvider.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace FrameCoordinationUnit {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'resource_coordinator.mojom.FrameCoordinationUnit';
          // Denotes the end of the event FrameCoordinationUnit.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace PageCoordinationUnit {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'resource_coordinator.mojom.PageCoordinationUnit';
          // Denotes the end of the event PageCoordinationUnit.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace PageSignalReceiver {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'resource_coordinator.mojom.PageSignalReceiver';
          // Denotes the end of the event PageSignalReceiver.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace ProcessCoordinationUnit {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'resource_coordinator.mojom.ProcessCoordinationUnit';
          // Denotes the end of the event ProcessCoordinationUnit.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace Resource {
    type AppendData = 
      TraceEvent.Resource.AppendData.X;
  
    namespace AppendData {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Resource::appendData';
        // Denotes the end of the event AppendData.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ResourceChangePriority {
    interface I extends Base {
      args: {
        data: {
          priority: string;
          requestId: string;
        };
      };
      name: 'ResourceChangePriority';
      // Denotes an event ResourceChangePriority. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface X extends Base {
      args: {
        data: {
          priority: string;
          requestId: string;
        };
      };
      // Duration.
      dur: number;
      name: 'ResourceChangePriority';
      // Denotes the end of the event ResourceChangePriority.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ResourceDispatcher {
    type OnReceivedRedirect = 
      TraceEvent.ResourceDispatcher.OnReceivedRedirect.X;
  
    type OnReceivedResponse = 
      TraceEvent.ResourceDispatcher.OnReceivedResponse.X;
  
    type OnRequestComplete = 
      TraceEvent.ResourceDispatcher.OnRequestComplete.X;
  
    namespace OnReceivedRedirect {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ResourceDispatcher::OnReceivedRedirect';
        // Denotes the end of the event OnReceivedRedirect.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnReceivedResponse {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ResourceDispatcher::OnReceivedResponse';
        // Denotes the end of the event OnReceivedResponse.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnRequestComplete {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ResourceDispatcher::OnRequestComplete';
        // Denotes the end of the event OnRequestComplete.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ResourceFetcher {
    type DetermineRevalidationPolicy = 
      TraceEvent.ResourceFetcher.DetermineRevalidationPolicy.I;
  
    type RequestResource = 
      TraceEvent.ResourceFetcher.RequestResource.X;
  
    namespace DetermineRevalidationPolicy {
      interface I extends Base {
        args: {
          revalidationPolicy: number;
        };
        name: 'ResourceFetcher::DetermineRevalidationPolicy';
        // Denotes an event DetermineRevalidationPolicy. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RequestResource {
      interface X extends Base {
        args: {
          url: {
            url: string;
          };
        };
        // Duration.
        dur: number;
        name: 'ResourceFetcher::requestResource';
        // Denotes the end of the event RequestResource.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ResourceFinish {
    interface I extends Base {
      args: {
        data: {
          decodedBodyLength?: number;
          didFail: boolean;
          encodedDataLength?: number;
          finishTime?: number;
          networkTime?: number;
          requestId: string;
        };
      };
      name: 'ResourceFinish';
      // Denotes an event ResourceFinish. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ResourceLoad {
    interface b extends Base {
      args: {
        beginData: {
          url: string;
        };
      };
      id2: {
        local: string;
      };
      name: 'ResourceLoad';
      // Denotes the beginning of the nestable async flow event ResourceLoad.
      ph: 'b';
      scope: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
        endData: {
          outcome: string;
        };
      };
      id2: {
        local: string;
      };
      name: 'ResourceLoad';
      // Denotes a step into the nestable async flow event ResourceLoad.
      ph: 'e';
      scope: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ResourceLoadPriorityOptimizer {
    type UpdateAllImageResourcePriorities = 
      TraceEvent.ResourceLoadPriorityOptimizer.UpdateAllImageResourcePriorities.X;
  
    namespace UpdateAllImageResourcePriorities {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ResourceLoadPriorityOptimizer::updateAllImageResourcePriorities';
        // Denotes the end of the event UpdateAllImageResourcePriorities.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ResourcePrefetchPredictor {
    type StartInitialization = 
      TraceEvent.ResourcePrefetchPredictor.StartInitialization.X;
  
    namespace StartInitialization {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ResourcePrefetchPredictor::StartInitialization';
        // Denotes the end of the event StartInitialization.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ResourcePrioritySet {
    interface n extends Base {
      args: {
        data: {
          priority: number;
        };
      };
      id2: {
        local: string;
      };
      name: 'ResourcePrioritySet';
      // Denotes the ending of the nestable async flow event ResourcePrioritySet.
      ph: 'n';
      scope: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ResourceReceivedData {
    interface I extends Base {
      args: {
        data: {
          encodedDataLength: number;
          frame: string;
          requestId: string;
        };
      };
      name: 'ResourceReceivedData';
      // Denotes an event ResourceReceivedData. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ResourceReceiveResponse {
    interface I extends Base {
      args: {
        data: {
          encodedDataLength?: number;
          frame: string;
          fromCache?: boolean;
          fromServiceWorker?: boolean;
          mimeType: string;
          requestId: string;
          statusCode: number;
          timing?: {
            connectEnd: number;
            connectStart: number;
            dnsEnd: number;
            dnsStart: number;
            proxyEnd: number;
            proxyStart: number;
            pushEnd: number;
            pushStart: number;
            receiveHeadersEnd: number;
            requestTime: number;
            sendEnd: number;
            sendStart: number;
            sslEnd: number;
            sslStart: number;
            workerReady: number;
            workerStart: number;
          };
        };
      };
      name: 'ResourceReceiveResponse';
      // Denotes an event ResourceReceiveResponse. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ResourceSendRequest {
    interface I extends Base {
      args: {
        data: {
          frame: string;
          priority: string;
          requestId: string;
          requestMethod: string;
          stackTrace?: {
            columnNumber: number;
            functionName: string;
            lineNumber: number;
            scriptId: string;
            url: string;
          }[];
          url: string;
        };
      };
      name: 'ResourceSendRequest';
      // Denotes an event ResourceSendRequest. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ResponseEnd {
    interface R extends Base {
      args: {
        frame: string;
      };
      name: 'responseEnd';
      // Denotes a mark of the event ResponseEnd.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace RootScrollerController {
    type PerformRootScrollerSelection = 
      TraceEvent.RootScrollerController.PerformRootScrollerSelection.X;
  
    namespace PerformRootScrollerSelection {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'RootScrollerController::PerformRootScrollerSelection';
        // Denotes the end of the event PerformRootScrollerSelection.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace RuleSet {
    type AddRulesFromSheet = 
      TraceEvent.RuleSet.AddRulesFromSheet.X;
  
    namespace AddRulesFromSheet {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'RuleSet::addRulesFromSheet';
        // Denotes the end of the event AddRulesFromSheet.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace RunMicrotasks {
    interface B extends Base {
      args: {
      
      };
      name: 'RunMicrotasks';
      // Denotes the beginning of the event RunMicrotasks.
      ph: 'B';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface E extends Base {
      args: {
        microtask_count: number;
      };
      name: 'RunMicrotasks';
      // Denotes the ending of the event RunMicrotasks.
      ph: 'E';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'RunMicrotasks';
      // Denotes the end of the event RunMicrotasks.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace RunTask {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur?: number;
      name: 'RunTask';
      // Denotes the end of the event RunTask.
      ph: 'X';
      tdur?: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace RunWithFaviconResults {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'RunWithFaviconResults';
      // Denotes the end of the event RunWithFaviconResults.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Safe_browsing {
    namespace Mojom {
      type PhishingDetector = 
        TraceEvent.Safe_browsing.Mojom.PhishingDetector.X;
    
      type PhishingModelSetter = 
        TraceEvent.Safe_browsing.Mojom.PhishingModelSetter.X;
    
      type SafeBrowsing = 
        TraceEvent.Safe_browsing.Mojom.SafeBrowsing.X;
    
      type SafeBrowsingUrlChecker = 
        TraceEvent.Safe_browsing.Mojom.SafeBrowsingUrlChecker.X;
    
      namespace PhishingDetector {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'safe_browsing.mojom.PhishingDetector';
          // Denotes the end of the event PhishingDetector.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace PhishingModelSetter {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'safe_browsing.mojom.PhishingModelSetter';
          // Denotes the end of the event PhishingModelSetter.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace SafeBrowsing {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'safe_browsing.mojom.SafeBrowsing';
          // Denotes the end of the event SafeBrowsing.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace SafeBrowsingUrlChecker {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'safe_browsing.mojom.SafeBrowsingUrlChecker';
          // Denotes the end of the event SafeBrowsingUrlChecker.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace ScheduledAction {
    type Execute = 
      TraceEvent.ScheduledAction.Execute.X;
  
    namespace Execute {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ScheduledAction::execute';
        // Denotes the end of the event Execute.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ScheduledTasks {
    interface F extends Base {
      args: {
      
      };
      id: string;
      name: 'ScheduledTasks';
      // Denotes the ending of the async event ScheduledTasks.
      ph: 'F';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface S extends Base {
      args: {
      
      };
      id: string;
      name: 'ScheduledTasks';
      // Denotes the beginning of the async event ScheduledTasks.
      ph: 'S';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface T extends Base {
      args: {
        state: {
          tasks_pending: {
            activate_tile_tasks_completed: boolean;
            all_tile_tasks_completed: boolean;
            draw_tile_tasks_completed: boolean;
          };
        };
        step: string;
      };
      id: string;
      name: 'ScheduledTasks';
      // Denotes a step into the async event ScheduledTasks.
      ph: 'T';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Scheduler {
    type AwaitingTouchstartResponse = 
      TraceEvent.Scheduler.AwaitingTouchstartResponse.S |
      TraceEvent.Scheduler.AwaitingTouchstartResponse.T;
  
    type BeginFrame = 
      TraceEvent.Scheduler.BeginFrame.X;
  
    type BeginFrameDropped = 
      TraceEvent.Scheduler.BeginFrameDropped.I;
  
    type BeginFrameNotExpectedSoon = 
      TraceEvent.Scheduler.BeginFrameNotExpectedSoon.F |
      TraceEvent.Scheduler.BeginFrameNotExpectedSoon.S |
      TraceEvent.Scheduler.BeginFrameNotExpectedSoon.T;
  
    type BeginImplFrame = 
      TraceEvent.Scheduler.BeginImplFrame.X;
  
    type BeginMainFrameAborted = 
      TraceEvent.Scheduler.BeginMainFrameAborted.X;
  
    type BeginMainFrameOnCriticalPath = 
      TraceEvent.Scheduler.BeginMainFrameOnCriticalPath.F |
      TraceEvent.Scheduler.BeginMainFrameOnCriticalPath.S |
      TraceEvent.Scheduler.BeginMainFrameOnCriticalPath.T;
  
    type BlockingInputExpectedSoon = 
      TraceEvent.Scheduler.BlockingInputExpectedSoon.S |
      TraceEvent.Scheduler.BlockingInputExpectedSoon.T;
  
    type CompositorWillSendMainFrameNotExpected = 
      TraceEvent.Scheduler.CompositorWillSendMainFrameNotExpected.F |
      TraceEvent.Scheduler.CompositorWillSendMainFrameNotExpected.S |
      TraceEvent.Scheduler.CompositorWillSendMainFrameNotExpected.T;
  
    type DefaultGesturePrevented = 
      TraceEvent.Scheduler.DefaultGesturePrevented.S |
      TraceEvent.Scheduler.DefaultGesturePrevented.T;
  
    type DidCreateAndInitializeLayerTreeFrameSink = 
      TraceEvent.Scheduler.DidCreateAndInitializeLayerTreeFrameSink.X;
  
    type DidLoseLayerTreeFrameSink = 
      TraceEvent.Scheduler.DidLoseLayerTreeFrameSink.X;
  
    type HasNavigated = 
      TraceEvent.Scheduler.HasNavigated.F |
      TraceEvent.Scheduler.HasNavigated.S |
      TraceEvent.Scheduler.HasNavigated.T;
  
    type HasReportedBlockingInterventionInCurrentPolicy = 
      TraceEvent.Scheduler.HasReportedBlockingInterventionInCurrentPolicy.S |
      TraceEvent.Scheduler.HasReportedBlockingInterventionInCurrentPolicy.T;
  
    type HasReportedBlockingInterventionSinceNavigation = 
      TraceEvent.Scheduler.HasReportedBlockingInterventionSinceNavigation.S |
      TraceEvent.Scheduler.HasReportedBlockingInterventionSinceNavigation.T;
  
    type HasSeenBeginMainFrame = 
      TraceEvent.Scheduler.HasSeenBeginMainFrame.F |
      TraceEvent.Scheduler.HasSeenBeginMainFrame.S |
      TraceEvent.Scheduler.HasSeenBeginMainFrame.T;
  
    type HasVisibleRenderWidgetWithTouchHandler = 
      TraceEvent.Scheduler.HasVisibleRenderWidgetWithTouchHandler.F |
      TraceEvent.Scheduler.HasVisibleRenderWidgetWithTouchHandler.S |
      TraceEvent.Scheduler.HasVisibleRenderWidgetWithTouchHandler.T;
  
    type HaveSeenBlockingGesture = 
      TraceEvent.Scheduler.HaveSeenBlockingGesture.S |
      TraceEvent.Scheduler.HaveSeenBlockingGesture.T;
  
    type HaveSeenInputSinceNavigation = 
      TraceEvent.Scheduler.HaveSeenInputSinceNavigation.S |
      TraceEvent.Scheduler.HaveSeenInputSinceNavigation.T;
  
    type Hidden = 
      TraceEvent.Scheduler.Hidden.F |
      TraceEvent.Scheduler.Hidden.S |
      TraceEvent.Scheduler.Hidden.T;
  
    type InIdlePeriod = 
      TraceEvent.Scheduler.InIdlePeriod.F |
      TraceEvent.Scheduler.InIdlePeriod.S |
      TraceEvent.Scheduler.InIdlePeriod.T;
  
    type KeepRendererActive = 
      TraceEvent.Scheduler.KeepRendererActive.F |
      TraceEvent.Scheduler.KeepRendererActive.S |
      TraceEvent.Scheduler.KeepRendererActive.T;
  
    type LastGestureWasCompositorDriven = 
      TraceEvent.Scheduler.LastGestureWasCompositorDriven.S |
      TraceEvent.Scheduler.LastGestureWasCompositorDriven.T;
  
    type LongestJankFreeTaskDuration = 
      TraceEvent.Scheduler.LongestJankFreeTaskDuration.C;
  
    type MainThreadTask = 
      TraceEvent.Scheduler.MainThreadTask.F |
      TraceEvent.Scheduler.MainThreadTask.S |
      TraceEvent.Scheduler.MainThreadTask.T;
  
    type MissedBeginFrameDropped = 
      TraceEvent.Scheduler.MissedBeginFrameDropped.I;
  
    type NotifyBeginMainFrameStarted = 
      TraceEvent.Scheduler.NotifyBeginMainFrameStarted.X;
  
    type NotifyReadyToCommit = 
      TraceEvent.Scheduler.NotifyReadyToCommit.X;
  
    type Now = 
      TraceEvent.Scheduler.Now.X;
  
    type OnBeginImplFrameDeadline = 
      TraceEvent.Scheduler.OnBeginImplFrameDeadline.X;
  
    type PauseCount = 
      TraceEvent.Scheduler.PauseCount.C;
  
    type PauseTimersForWebview = 
      TraceEvent.Scheduler.PauseTimersForWebview.S |
      TraceEvent.Scheduler.PauseTimersForWebview.T;
  
    type Pending_submit_frames = 
      TraceEvent.Scheduler.Pending_submit_frames.F |
      TraceEvent.Scheduler.Pending_submit_frames.S;
  
    type RAILMode = 
      TraceEvent.Scheduler.RAILMode.F |
      TraceEvent.Scheduler.RAILMode.S |
      TraceEvent.Scheduler.RAILMode.T;
  
    type RunNextTask = 
      TraceEvent.Scheduler.RunNextTask.X;
  
    type Running = 
      TraceEvent.Scheduler.Running.F |
      TraceEvent.Scheduler.Running.S;
  
    type ScheduleBeginImplFrameDeadline = 
      TraceEvent.Scheduler.ScheduleBeginImplFrameDeadline.X;
  
    type Scheduler = 
      TraceEvent.Scheduler.Scheduler.X;
  
    type SetDeferMainFrameUpdate = 
      TraceEvent.Scheduler.SetDeferMainFrameUpdate.X;
  
    type SkipNextBeginMainFrameToReduceLatency = 
      TraceEvent.Scheduler.SkipNextBeginMainFrameToReduceLatency.I;
  
    type TaskPriority = 
      TraceEvent.Scheduler.TaskPriority.F |
      TraceEvent.Scheduler.TaskPriority.S |
      TraceEvent.Scheduler.TaskPriority.T;
  
    type UseCase = 
      TraceEvent.Scheduler.UseCase.F |
      TraceEvent.Scheduler.UseCase.S |
      TraceEvent.Scheduler.UseCase.T;
  
    type UseVirtualTime = 
      TraceEvent.Scheduler.UseVirtualTime.S |
      TraceEvent.Scheduler.UseVirtualTime.T;
  
    type WaitingForMeaningfulPaint = 
      TraceEvent.Scheduler.WaitingForMeaningfulPaint.F |
      TraceEvent.Scheduler.WaitingForMeaningfulPaint.S |
      TraceEvent.Scheduler.WaitingForMeaningfulPaint.T;
  
    namespace AwaitingTouchstartResponse {
      interface S extends Base {
        args: {
        
        };
        id: string;
        name: 'Scheduler.AwaitingTouchstartResponse';
        // Denotes the beginning of the async event AwaitingTouchstartResponse.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface T extends Base {
        args: {
          step: string;
        };
        id: string;
        name: 'Scheduler.AwaitingTouchstartResponse';
        // Denotes a step into the async event AwaitingTouchstartResponse.
        ph: 'T';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BeginFrame {
      interface X extends Base {
        args: {
          args: {
            animate_only: boolean;
            deadline_us: number;
            frame_time_us: number;
            interval_us: number;
            on_critical_path: boolean;
            sequence_number: number;
            source_id: number;
            subtype: string;
            type: string;
          };
        };
        // Duration.
        dur?: number;
        name: 'Scheduler::BeginFrame';
        // Denotes the end of the event BeginFrame.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BeginFrameDropped {
      interface I extends Base {
        args: {
        
        };
        name: 'Scheduler::BeginFrameDropped';
        // Denotes an event BeginFrameDropped. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BeginFrameNotExpectedSoon {
      interface F extends Base {
        args: {
        
        };
        id: string;
        name: 'Scheduler.BeginFrameNotExpectedSoon';
        // Denotes the ending of the async event BeginFrameNotExpectedSoon.
        ph: 'F';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface S extends Base {
        args: {
        
        };
        id: string;
        name: 'Scheduler.BeginFrameNotExpectedSoon';
        // Denotes the beginning of the async event BeginFrameNotExpectedSoon.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface T extends Base {
        args: {
          step: string;
        };
        id: string;
        name: 'Scheduler.BeginFrameNotExpectedSoon';
        // Denotes a step into the async event BeginFrameNotExpectedSoon.
        ph: 'T';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BeginImplFrame {
      interface X extends Base {
        args: {
          args: {
            animate_only: boolean;
            deadline_us: number;
            frame_time_us: number;
            interval_us: number;
            on_critical_path: boolean;
            sequence_number: number;
            source_id: number;
            subtype: string;
            type: string;
          };
          main_thread_missed_last_deadline: boolean;
        };
        // Duration.
        dur?: number;
        name: 'Scheduler::BeginImplFrame';
        // Denotes the end of the event BeginImplFrame.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BeginMainFrameAborted {
      interface X extends Base {
        args: {
          reason: string;
        };
        // Duration.
        dur: number;
        name: 'Scheduler::BeginMainFrameAborted';
        // Denotes the end of the event BeginMainFrameAborted.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BeginMainFrameOnCriticalPath {
      interface F extends Base {
        args: {
        
        };
        id: string;
        name: 'Scheduler.BeginMainFrameOnCriticalPath';
        // Denotes the ending of the async event BeginMainFrameOnCriticalPath.
        ph: 'F';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface S extends Base {
        args: {
        
        };
        id: string;
        name: 'Scheduler.BeginMainFrameOnCriticalPath';
        // Denotes the beginning of the async event BeginMainFrameOnCriticalPath.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface T extends Base {
        args: {
          step: string;
        };
        id: string;
        name: 'Scheduler.BeginMainFrameOnCriticalPath';
        // Denotes a step into the async event BeginMainFrameOnCriticalPath.
        ph: 'T';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace BlockingInputExpectedSoon {
      interface S extends Base {
        args: {
        
        };
        id: string;
        name: 'Scheduler.BlockingInputExpectedSoon';
        // Denotes the beginning of the async event BlockingInputExpectedSoon.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface T extends Base {
        args: {
          step: string;
        };
        id: string;
        name: 'Scheduler.BlockingInputExpectedSoon';
        // Denotes a step into the async event BlockingInputExpectedSoon.
        ph: 'T';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CompositorWillSendMainFrameNotExpected {
      interface F extends Base {
        args: {
        
        };
        id: string;
        name: 'Scheduler.CompositorWillSendMainFrameNotExpected';
        // Denotes the ending of the async event CompositorWillSendMainFrameNotExpected.
        ph: 'F';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface S extends Base {
        args: {
        
        };
        id: string;
        name: 'Scheduler.CompositorWillSendMainFrameNotExpected';
        // Denotes the beginning of the async event CompositorWillSendMainFrameNotExpected.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface T extends Base {
        args: {
          step: string;
        };
        id: string;
        name: 'Scheduler.CompositorWillSendMainFrameNotExpected';
        // Denotes a step into the async event CompositorWillSendMainFrameNotExpected.
        ph: 'T';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DefaultGesturePrevented {
      interface S extends Base {
        args: {
        
        };
        id: string;
        name: 'Scheduler.DefaultGesturePrevented';
        // Denotes the beginning of the async event DefaultGesturePrevented.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface T extends Base {
        args: {
          step: string;
        };
        id: string;
        name: 'Scheduler.DefaultGesturePrevented';
        // Denotes a step into the async event DefaultGesturePrevented.
        ph: 'T';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidCreateAndInitializeLayerTreeFrameSink {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Scheduler::DidCreateAndInitializeLayerTreeFrameSink';
        // Denotes the end of the event DidCreateAndInitializeLayerTreeFrameSink.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidLoseLayerTreeFrameSink {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Scheduler::DidLoseLayerTreeFrameSink';
        // Denotes the end of the event DidLoseLayerTreeFrameSink.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace HasNavigated {
      interface F extends Base {
        args: {
        
        };
        id: string;
        name: 'Scheduler.HasNavigated';
        // Denotes the ending of the async event HasNavigated.
        ph: 'F';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface S extends Base {
        args: {
        
        };
        id: string;
        name: 'Scheduler.HasNavigated';
        // Denotes the beginning of the async event HasNavigated.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface T extends Base {
        args: {
          step: string;
        };
        id: string;
        name: 'Scheduler.HasNavigated';
        // Denotes a step into the async event HasNavigated.
        ph: 'T';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace HasReportedBlockingInterventionInCurrentPolicy {
      interface S extends Base {
        args: {
        
        };
        id: string;
        name: 'Scheduler.HasReportedBlockingInterventionInCurrentPolicy';
        // Denotes the beginning of the async event HasReportedBlockingInterventionInCurrentPolicy.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface T extends Base {
        args: {
          step: string;
        };
        id: string;
        name: 'Scheduler.HasReportedBlockingInterventionInCurrentPolicy';
        // Denotes a step into the async event HasReportedBlockingInterventionInCurrentPolicy.
        ph: 'T';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace HasReportedBlockingInterventionSinceNavigation {
      interface S extends Base {
        args: {
        
        };
        id: string;
        name: 'Scheduler.HasReportedBlockingInterventionSinceNavigation';
        // Denotes the beginning of the async event HasReportedBlockingInterventionSinceNavigation.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface T extends Base {
        args: {
          step: string;
        };
        id: string;
        name: 'Scheduler.HasReportedBlockingInterventionSinceNavigation';
        // Denotes a step into the async event HasReportedBlockingInterventionSinceNavigation.
        ph: 'T';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace HasSeenBeginMainFrame {
      interface F extends Base {
        args: {
        
        };
        id: string;
        name: 'Scheduler.HasSeenBeginMainFrame';
        // Denotes the ending of the async event HasSeenBeginMainFrame.
        ph: 'F';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface S extends Base {
        args: {
        
        };
        id: string;
        name: 'Scheduler.HasSeenBeginMainFrame';
        // Denotes the beginning of the async event HasSeenBeginMainFrame.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface T extends Base {
        args: {
          step: string;
        };
        id: string;
        name: 'Scheduler.HasSeenBeginMainFrame';
        // Denotes a step into the async event HasSeenBeginMainFrame.
        ph: 'T';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace HasVisibleRenderWidgetWithTouchHandler {
      interface F extends Base {
        args: {
        
        };
        id: string;
        name: 'Scheduler.HasVisibleRenderWidgetWithTouchHandler';
        // Denotes the ending of the async event HasVisibleRenderWidgetWithTouchHandler.
        ph: 'F';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface S extends Base {
        args: {
        
        };
        id: string;
        name: 'Scheduler.HasVisibleRenderWidgetWithTouchHandler';
        // Denotes the beginning of the async event HasVisibleRenderWidgetWithTouchHandler.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface T extends Base {
        args: {
          step: string;
        };
        id: string;
        name: 'Scheduler.HasVisibleRenderWidgetWithTouchHandler';
        // Denotes a step into the async event HasVisibleRenderWidgetWithTouchHandler.
        ph: 'T';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace HaveSeenBlockingGesture {
      interface S extends Base {
        args: {
        
        };
        id: string;
        name: 'Scheduler.HaveSeenBlockingGesture';
        // Denotes the beginning of the async event HaveSeenBlockingGesture.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface T extends Base {
        args: {
          step: string;
        };
        id: string;
        name: 'Scheduler.HaveSeenBlockingGesture';
        // Denotes a step into the async event HaveSeenBlockingGesture.
        ph: 'T';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace HaveSeenInputSinceNavigation {
      interface S extends Base {
        args: {
        
        };
        id: string;
        name: 'Scheduler.HaveSeenInputSinceNavigation';
        // Denotes the beginning of the async event HaveSeenInputSinceNavigation.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface T extends Base {
        args: {
          step: string;
        };
        id: string;
        name: 'Scheduler.HaveSeenInputSinceNavigation';
        // Denotes a step into the async event HaveSeenInputSinceNavigation.
        ph: 'T';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Hidden {
      interface F extends Base {
        args: {
        
        };
        id: string;
        name: 'Scheduler.Hidden';
        // Denotes the ending of the async event Hidden.
        ph: 'F';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface S extends Base {
        args: {
        
        };
        id: string;
        name: 'Scheduler.Hidden';
        // Denotes the beginning of the async event Hidden.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface T extends Base {
        args: {
          step: string;
        };
        id: string;
        name: 'Scheduler.Hidden';
        // Denotes a step into the async event Hidden.
        ph: 'T';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace InIdlePeriod {
      interface F extends Base {
        args: {
        
        };
        id: string;
        name: 'Scheduler.InIdlePeriod';
        // Denotes the ending of the async event InIdlePeriod.
        ph: 'F';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface S extends Base {
        args: {
        
        };
        id: string;
        name: 'Scheduler.InIdlePeriod';
        // Denotes the beginning of the async event InIdlePeriod.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface T extends Base {
        args: {
          step: string;
        };
        id: string;
        name: 'Scheduler.InIdlePeriod';
        // Denotes a step into the async event InIdlePeriod.
        ph: 'T';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace KeepRendererActive {
      interface F extends Base {
        args: {
        
        };
        id: string;
        name: 'Scheduler.KeepRendererActive';
        // Denotes the ending of the async event KeepRendererActive.
        ph: 'F';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface S extends Base {
        args: {
        
        };
        id: string;
        name: 'Scheduler.KeepRendererActive';
        // Denotes the beginning of the async event KeepRendererActive.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface T extends Base {
        args: {
          step: string;
        };
        id: string;
        name: 'Scheduler.KeepRendererActive';
        // Denotes a step into the async event KeepRendererActive.
        ph: 'T';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace LastGestureWasCompositorDriven {
      interface S extends Base {
        args: {
        
        };
        id: string;
        name: 'Scheduler.LastGestureWasCompositorDriven';
        // Denotes the beginning of the async event LastGestureWasCompositorDriven.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface T extends Base {
        args: {
          step: string;
        };
        id: string;
        name: 'Scheduler.LastGestureWasCompositorDriven';
        // Denotes a step into the async event LastGestureWasCompositorDriven.
        ph: 'T';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace LongestJankFreeTaskDuration {
      interface C extends Base {
        args: {
          value: number;
        };
        id: string;
        name: 'Scheduler.LongestJankFreeTaskDuration';
        // Denotes a counter for the event LongestJankFreeTaskDuration.
        ph: 'C';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace MainThreadTask {
      interface F extends Base {
        args: {
        
        };
        id: string;
        name: 'Scheduler.MainThreadTask';
        // Denotes the ending of the async event MainThreadTask.
        ph: 'F';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface S extends Base {
        args: {
        
        };
        id: string;
        name: 'Scheduler.MainThreadTask';
        // Denotes the beginning of the async event MainThreadTask.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface T extends Base {
        args: {
          step: string;
        };
        id: string;
        name: 'Scheduler.MainThreadTask';
        // Denotes a step into the async event MainThreadTask.
        ph: 'T';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace MissedBeginFrameDropped {
      interface I extends Base {
        args: {
        
        };
        name: 'Scheduler::MissedBeginFrameDropped';
        // Denotes an event MissedBeginFrameDropped. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace NotifyBeginMainFrameStarted {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Scheduler::NotifyBeginMainFrameStarted';
        // Denotes the end of the event NotifyBeginMainFrameStarted.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace NotifyReadyToCommit {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur?: number;
        name: 'Scheduler::NotifyReadyToCommit';
        // Denotes the end of the event NotifyReadyToCommit.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Now {
      interface X extends Base {
        args: {
          now: number;
        };
        // Duration.
        dur: number;
        name: 'Scheduler::Now';
        // Denotes the end of the event Now.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnBeginImplFrameDeadline {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Scheduler::OnBeginImplFrameDeadline';
        // Denotes the end of the event OnBeginImplFrameDeadline.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PauseCount {
      interface C extends Base {
        args: {
          value: number;
        };
        id: string;
        name: 'Scheduler.PauseCount';
        // Denotes a counter for the event PauseCount.
        ph: 'C';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PauseTimersForWebview {
      interface S extends Base {
        args: {
        
        };
        id: string;
        name: 'Scheduler.PauseTimersForWebview';
        // Denotes the beginning of the async event PauseTimersForWebview.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface T extends Base {
        args: {
          step: string;
        };
        id: string;
        name: 'Scheduler.PauseTimersForWebview';
        // Denotes a step into the async event PauseTimersForWebview.
        ph: 'T';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Pending_submit_frames {
      interface F extends Base {
        args: {
          pending_frames: number;
        };
        id: string;
        name: 'Scheduler:pending_submit_frames';
        // Denotes the ending of the async event Pending_submit_frames.
        ph: 'F';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface S extends Base {
        args: {
          pending_frames: number;
        };
        id: string;
        name: 'Scheduler:pending_submit_frames';
        // Denotes the beginning of the async event Pending_submit_frames.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RAILMode {
      interface F extends Base {
        args: {
        
        };
        id: string;
        name: 'Scheduler.RAILMode';
        // Denotes the ending of the async event RAILMode.
        ph: 'F';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface S extends Base {
        args: {
        
        };
        id: string;
        name: 'Scheduler.RAILMode';
        // Denotes the beginning of the async event RAILMode.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface T extends Base {
        args: {
          step: string;
        };
        id: string;
        name: 'Scheduler.RAILMode';
        // Denotes a step into the async event RAILMode.
        ph: 'T';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RunNextTask {
      interface X extends Base {
        args: {
          state: {
            order_num: number;
            priority: string;
            sequence_id: number;
          };
        };
        // Duration.
        dur: number;
        name: 'Scheduler::RunNextTask';
        // Denotes the end of the event RunNextTask.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Running {
      interface F extends Base {
        args: {
        
        };
        id: string;
        name: 'Scheduler::Running';
        // Denotes the ending of the async event Running.
        ph: 'F';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface S extends Base {
        args: {
        
        };
        id: string;
        name: 'Scheduler::Running';
        // Denotes the beginning of the async event Running.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ScheduleBeginImplFrameDeadline {
      interface X extends Base {
        args: {
          'deadline mode': string;
          'new deadline': number;
        };
        // Duration.
        dur: number;
        name: 'Scheduler::ScheduleBeginImplFrameDeadline';
        // Denotes the end of the event ScheduleBeginImplFrameDeadline.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Scheduler {
      interface X extends Base {
        args: {
          settings: {
            background_frame_interval: number;
            commit_to_active_tree: boolean;
            enable_latency_recovery: boolean;
            enable_surface_synchronization: boolean;
            main_frame_before_activation_enabled: boolean;
            main_frame_while_submit_frame_throttled_enabled: boolean;
            maximum_number_of_failed_draws_before_draw_is_forced: number;
            timeout_and_draw_when_animation_checkerboards: boolean;
            using_synchronous_renderer_compositor: boolean;
            wait_for_all_pipeline_stages_before_draw: boolean;
          };
        };
        // Duration.
        dur: number;
        name: 'Scheduler::Scheduler';
        // Denotes the end of the event Scheduler.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Sequence {
      type RemoveWaitingPriority = 
        TraceEvent.Scheduler.Sequence.RemoveWaitingPriority.X;
    
      type UpdateSchedulingPriority = 
        TraceEvent.Scheduler.Sequence.UpdateSchedulingPriority.X;
    
      namespace RemoveWaitingPriority {
        interface X extends Base {
          args: {
            new_priority: string;
            sequence_id: number;
          };
          // Duration.
          dur: number;
          name: 'Scheduler::Sequence::RemoveWaitingPriority';
          // Denotes the end of the event RemoveWaitingPriority.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace UpdateSchedulingPriority {
        interface X extends Base {
          args: {
            new_priority: string;
            sequence_id: number;
          };
          // Duration.
          dur: number;
          name: 'Scheduler::Sequence::UpdateSchedulingPriority';
          // Denotes the end of the event UpdateSchedulingPriority.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  
    namespace SetDeferMainFrameUpdate {
      interface X extends Base {
        args: {
          defer_main_frame_update: boolean;
        };
        // Duration.
        dur: number;
        name: 'Scheduler::SetDeferMainFrameUpdate';
        // Denotes the end of the event SetDeferMainFrameUpdate.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SkipNextBeginMainFrameToReduceLatency {
      interface I extends Base {
        args: {
        
        };
        name: 'Scheduler: SkipNextBeginMainFrameToReduceLatency';
        // Denotes an event SkipNextBeginMainFrameToReduceLatency. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace TaskPriority {
      interface F extends Base {
        args: {
        
        };
        id: string;
        name: 'Scheduler.TaskPriority';
        // Denotes the ending of the async event TaskPriority.
        ph: 'F';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface S extends Base {
        args: {
        
        };
        id: string;
        name: 'Scheduler.TaskPriority';
        // Denotes the beginning of the async event TaskPriority.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface T extends Base {
        args: {
          step: string;
        };
        id: string;
        name: 'Scheduler.TaskPriority';
        // Denotes a step into the async event TaskPriority.
        ph: 'T';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UseCase {
      interface F extends Base {
        args: {
        
        };
        id: string;
        name: 'Scheduler.UseCase';
        // Denotes the ending of the async event UseCase.
        ph: 'F';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface S extends Base {
        args: {
        
        };
        id: string;
        name: 'Scheduler.UseCase';
        // Denotes the beginning of the async event UseCase.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface T extends Base {
        args: {
          step: string;
        };
        id: string;
        name: 'Scheduler.UseCase';
        // Denotes a step into the async event UseCase.
        ph: 'T';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UseVirtualTime {
      interface S extends Base {
        args: {
        
        };
        id: string;
        name: 'Scheduler.UseVirtualTime';
        // Denotes the beginning of the async event UseVirtualTime.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface T extends Base {
        args: {
          step: string;
        };
        id: string;
        name: 'Scheduler.UseVirtualTime';
        // Denotes a step into the async event UseVirtualTime.
        ph: 'T';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace WaitingForMeaningfulPaint {
      interface F extends Base {
        args: {
        
        };
        id: string;
        name: 'Scheduler.WaitingForMeaningfulPaint';
        // Denotes the ending of the async event WaitingForMeaningfulPaint.
        ph: 'F';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface S extends Base {
        args: {
        
        };
        id: string;
        name: 'Scheduler.WaitingForMeaningfulPaint';
        // Denotes the beginning of the async event WaitingForMeaningfulPaint.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface T extends Base {
        args: {
          step: string;
        };
        id: string;
        name: 'Scheduler.WaitingForMeaningfulPaint';
        // Denotes a step into the async event WaitingForMeaningfulPaint.
        ph: 'T';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace SchedulerStateMachine {
    type SetNeedsPrepareTiles = 
      TraceEvent.SchedulerStateMachine.SetNeedsPrepareTiles.X;
  
    namespace SetNeedsPrepareTiles {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SchedulerStateMachine::SetNeedsPrepareTiles';
        // Denotes the end of the event SetNeedsPrepareTiles.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    interface X extends Base {
      args: {
        state: {
          begin_frame_observer_state: {
            dropped_begin_frame_args: number;
            last_begin_frame_args: {
              animate_only: boolean;
              deadline_us: number;
              frame_time_us: number;
              interval_us: number;
              on_critical_path: boolean;
              sequence_number: number;
              source_id: number;
              subtype: string;
              type: string;
            };
          };
          begin_frame_source_state?: {
            last_begin_frame_args: {
              animate_only: boolean;
              deadline_us: number;
              frame_time_us: number;
              interval_us: number;
              on_critical_path: boolean;
              sequence_number: number;
              source_id: number;
              subtype: string;
              type: string;
            };
            num_observers: number;
            paused: boolean;
            source_id: number;
          };
          begin_impl_frame_args: {
            current_args_?: {
              animate_only: boolean;
              deadline_us: number;
              frame_time_us: number;
              interval_us: number;
              on_critical_path: boolean;
              sequence_number: number;
              source_id: number;
              subtype: string;
              type: string;
            };
            finished_at_ms: number;
            last_args_?: {
              animate_only: boolean;
              deadline_us: number;
              frame_time_us: number;
              interval_us: number;
              on_critical_path: boolean;
              sequence_number: number;
              source_id: number;
              subtype: string;
              type: string;
            };
            major_timestamps_in_ms: {
              '0_interval': number;
              '1_now_to_deadline': number;
              '2_frame_time_to_now': number;
              '3_frame_time_to_deadline': number;
              '4_now': number;
              '5_frame_time': number;
              '6_deadline': number;
            };
            state: string;
            updated_at_ms: number;
          };
          begin_impl_frame_deadline_task: boolean;
          compositor_timing_history: {
            activate_estimate_ms: number;
            begin_main_frame_queue_critical_estimate_ms: number;
            begin_main_frame_queue_not_critical_estimate_ms: number;
            begin_main_frame_start_to_ready_to_commit_estimate_ms: number;
            commit_to_ready_to_activate_estimate_ms: number;
            draw_estimate_ms: number;
            prepare_tiles_estimate_ms: number;
          };
          deadline_mode: string;
          deadline_ms: number;
          deadline_scheduled_at_ms: number;
          inside_action: string;
          now_ms: number;
          now_to_deadline_ms: number;
          now_to_deadline_scheduled_at_ms: number;
          observing_begin_frame_source: boolean;
          pending_begin_frame_task: boolean;
          skipped_last_frame_missed_exceeded_deadline: boolean;
          skipped_last_frame_to_reduce_latency: boolean;
          state_machine: {
            major_state: {
              begin_impl_frame_state: string;
              begin_main_frame_state: string;
              forced_redraw_state: string;
              layer_tree_frame_sink_state: string;
              next_action: string;
            };
            minor_state: {
              active_tree_is_ready_to_draw: boolean;
              active_tree_needs_first_draw: boolean;
              begin_frame_source_paused: boolean;
              can_draw: boolean;
              commit_count: number;
              consecutive_checkerboard_animations: number;
              critical_begin_main_frame_to_activate_is_fast: boolean;
              current_frame_number: number;
              current_pending_tree_is_impl_side: boolean;
              defer_main_frame_update: boolean;
              did_commit_during_frame: boolean;
              did_create_and_initialize_first_layer_tree_frame_sink: boolean;
              did_draw: boolean;
              did_draw_in_last_frame: boolean;
              did_invalidate_layer_tree_frame_sink: boolean;
              did_notify_begin_main_frame_not_sent: boolean;
              did_perform_impl_side_invalidaion: boolean;
              did_prepare_tiles: boolean;
              did_send_begin_main_frame_for_current_frame: boolean;
              did_submit_in_last_frame: boolean;
              has_pending_tree: boolean;
              last_commit_had_no_updates: boolean;
              last_frame_number_begin_main_frame_sent: number;
              last_frame_number_draw_performed: number;
              last_frame_number_submit_performed: number;
              main_thread_missed_last_deadline: boolean;
              needs_begin_main_frame: boolean;
              needs_impl_side_invalidation: boolean;
              needs_one_begin_impl_frame: boolean;
              needs_prepare_tiles: boolean;
              needs_redraw: boolean;
              pending_submit_frames: number;
              pending_tree_is_ready_for_activation: boolean;
              previous_pending_tree_was_impl_side: boolean;
              resourceless_draw: boolean;
              scroll_handler_state: string;
              skip_next_begin_main_frame_to_reduce_latency: boolean;
              submit_frames_with_current_layer_tree_frame_sink: number;
              tree_priority: string;
              video_needs_begin_frames: boolean;
              visible: boolean;
              wants_begin_main_frame_not_expected: boolean;
            };
          };
        };
      };
      // Duration.
      dur?: number;
      name: 'SchedulerStateMachine';
      // Denotes the end of the event SchedulerStateMachine.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SchedulerWorkerThreadactive {
    interface B extends Base {
      args: {
      
      };
      name: 'SchedulerWorkerThread active';
      // Denotes the beginning of the event SchedulerWorkerThreadactive.
      ph: 'B';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface E extends Base {
      args: {
      
      };
      name: 'SchedulerWorkerThread active';
      // Denotes the ending of the event SchedulerWorkerThreadactive.
      ph: 'E';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SchedulerWorkerThreadborn {
    interface I extends Base {
      args: {
      
      };
      name: 'SchedulerWorkerThread born';
      // Denotes an event SchedulerWorkerThreadborn. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SchedulerWorkerThreaddead {
    interface I extends Base {
      args: {
      
      };
      name: 'SchedulerWorkerThread dead';
      // Denotes an event SchedulerWorkerThreaddead. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ScheduleStyleInvalidationTracking {
    interface I extends Base {
      args: {
        data: {
          changedAttribute?: string;
          changedClass?: string;
          changedPseudo?: string;
          frame: string;
          invalidatedSelectorId: string;
          invalidationSet: string;
          nodeId: number;
          nodeName: string;
          stackTrace?: {
            columnNumber: number;
            functionName: string;
            lineNumber: number;
            scriptId: string;
            url: string;
          }[];
        };
      };
      name: 'ScheduleStyleInvalidationTracking';
      // Denotes an event ScheduleStyleInvalidationTracking. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ScheduleStyleRecalculation {
    interface I extends Base {
      args: {
        data: {
          frame: string;
          stackTrace?: {
            columnNumber: number;
            functionName: string;
            lineNumber: number;
            scriptId: string;
            url: string;
          }[];
        };
      };
      name: 'ScheduleStyleRecalculation';
      // Denotes an event ScheduleStyleRecalculation. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ScopedBlockingCall {
    interface B extends Base {
      args: {
        blocking_type: number;
      };
      name: 'ScopedBlockingCall';
      // Denotes the beginning of the event ScopedBlockingCall.
      ph: 'B';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface E extends Base {
      args: {
      
      };
      name: 'ScopedBlockingCall';
      // Denotes the ending of the event ScopedBlockingCall.
      ph: 'E';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ScopedBlockingCallWithBaseSyncPrimitives {
    interface B extends Base {
      args: {
        blocking_type: number;
      };
      name: 'ScopedBlockingCallWithBaseSyncPrimitives';
      // Denotes the beginning of the event ScopedBlockingCallWithBaseSyncPrimitives.
      ph: 'B';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface E extends Base {
      args: {
      
      };
      name: 'ScopedBlockingCallWithBaseSyncPrimitives';
      // Denotes the ending of the event ScopedBlockingCallWithBaseSyncPrimitives.
      ph: 'E';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Screenshot {
    interface O extends Base {
      args: {
        snapshot: string;
      };
      id: string;
      name: 'Screenshot';
      // Denotes a snapshot object of the event Screenshot.
      ph: 'O';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ScriptRunner {
    type ExecuteAsyncTask = 
      TraceEvent.ScriptRunner.ExecuteAsyncTask.X;
  
    namespace ExecuteAsyncTask {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ScriptRunner::ExecuteAsyncTask';
        // Denotes the end of the event ExecuteAsyncTask.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ScrollAnchor {
    type FindAnchor = 
      TraceEvent.ScrollAnchor.FindAnchor.X;
  
    namespace FindAnchor {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ScrollAnchor::findAnchor';
        // Denotes the end of the event FindAnchor.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ScrollingCoordinator {
    type UpdateAfterPaint = 
      TraceEvent.ScrollingCoordinator.UpdateAfterPaint.X;
  
    type UpdateTouchEventTargetRectsIfNeeded = 
      TraceEvent.ScrollingCoordinator.UpdateTouchEventTargetRectsIfNeeded.X;
  
    namespace UpdateAfterPaint {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ScrollingCoordinator::UpdateAfterPaint';
        // Denotes the end of the event UpdateAfterPaint.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UpdateTouchEventTargetRectsIfNeeded {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ScrollingCoordinator::updateTouchEventTargetRectsIfNeeded';
        // Denotes the end of the event UpdateTouchEventTargetRectsIfNeeded.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace SearchProvider {
    type OnURLLoadComplete = 
      TraceEvent.SearchProvider.OnURLLoadComplete.X;
  
    type Question_mark = 
      TraceEvent.SearchProvider.Question_mark.X;
  
    type Start = 
      TraceEvent.SearchProvider.Start.X;
  
    namespace OnURLLoadComplete {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SearchProvider::OnURLLoadComplete';
        // Denotes the end of the event OnURLLoadComplete.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Question_mark {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SearchProvider::question_mark';
        // Denotes the end of the event Question_mark.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Start {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SearchProvider::Start';
        // Denotes the end of the event Start.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace SelectionController {
    type HandleMousePressEvent = 
      TraceEvent.SelectionController.HandleMousePressEvent.X;
  
    type HandleMousePressEventSingleClick = 
      TraceEvent.SelectionController.HandleMousePressEventSingleClick.X;
  
    type HandleMouseReleaseEvent = 
      TraceEvent.SelectionController.HandleMouseReleaseEvent.X;
  
    namespace HandleMousePressEvent {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SelectionController::handleMousePressEvent';
        // Denotes the end of the event HandleMousePressEvent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace HandleMousePressEventSingleClick {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SelectionController::handleMousePressEventSingleClick';
        // Denotes the end of the event HandleMousePressEventSingleClick.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace HandleMouseReleaseEvent {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SelectionController::handleMouseReleaseEvent';
        // Denotes the end of the event HandleMouseReleaseEvent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace SequenceEnabled {
    interface F extends Base {
      args: {
        sequence_id: number;
      };
      id: string;
      name: 'SequenceEnabled';
      // Denotes the ending of the async event SequenceEnabled.
      ph: 'F';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SequenceManager {
    type DidProcessTaskObservers = 
      TraceEvent.SequenceManager.DidProcessTaskObservers.X;
  
    type DidProcessTaskTimeObservers = 
      TraceEvent.SequenceManager.DidProcessTaskTimeObservers.X;
  
    type PostTask = 
      TraceEvent.SequenceManager.PostTask.X;
  
    type QueueNotifyDidProcessTask = 
      TraceEvent.SequenceManager.QueueNotifyDidProcessTask.X;
  
    type QueueNotifyWillProcessTask = 
      TraceEvent.SequenceManager.QueueNotifyWillProcessTask.X;
  
    type QueueOnTaskCompleted = 
      TraceEvent.SequenceManager.QueueOnTaskCompleted.X;
  
    type QueueOnTaskStarted = 
      TraceEvent.SequenceManager.QueueOnTaskStarted.X;
  
    type RunTask = 
      TraceEvent.SequenceManager.RunTask.B;
  
    type WillProcessTaskObservers = 
      TraceEvent.SequenceManager.WillProcessTaskObservers.X;
  
    type WillProcessTaskTimeObservers = 
      TraceEvent.SequenceManager.WillProcessTaskTimeObservers.X;
  
    namespace DidProcessTaskObservers {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SequenceManager.DidProcessTaskObservers';
        // Denotes the end of the event DidProcessTaskObservers.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidProcessTaskTimeObservers {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SequenceManager.DidProcessTaskTimeObservers';
        // Denotes the end of the event DidProcessTaskTimeObservers.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PostTask {
      interface X extends Base {
        args: {
        
        };
        bind_id: string;
        // Duration.
        dur: number;
        flow_out: boolean;
        id: string;
        name: 'SequenceManager::PostTask';
        // Denotes the end of the event PostTask.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace QueueNotifyDidProcessTask {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SequenceManager.QueueNotifyDidProcessTask';
        // Denotes the end of the event QueueNotifyDidProcessTask.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace QueueNotifyWillProcessTask {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SequenceManager.QueueNotifyWillProcessTask';
        // Denotes the end of the event QueueNotifyWillProcessTask.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace QueueOnTaskCompleted {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SequenceManager.QueueOnTaskCompleted';
        // Denotes the end of the event QueueOnTaskCompleted.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace QueueOnTaskStarted {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SequenceManager.QueueOnTaskStarted';
        // Denotes the end of the event QueueOnTaskStarted.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RunTask {
      interface B extends Base {
        args: {
          queue_type: string;
          task_type: number;
        };
        name: 'SequenceManager::RunTask';
        // Denotes the beginning of the event RunTask.
        ph: 'B';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace WillProcessTaskObservers {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SequenceManager.WillProcessTaskObservers';
        // Denotes the end of the event WillProcessTaskObservers.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace WillProcessTaskTimeObservers {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SequenceManager.WillProcessTaskTimeObservers';
        // Denotes the end of the event WillProcessTaskTimeObservers.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    interface O extends Base {
      args: {
        snapshot: {
          active_queues: {
            current_fence?: number;
            delay_to_next_task_ms?: number;
            delayed_fence_seconds_from_now?: number;
            delayed_incoming_queue: {
              delayed_run_time: number;
              delayed_run_time_milliseconds_from_now: number;
              is_cancelled: boolean;
              is_high_res: boolean;
              nestable: boolean;
              posted_from: string;
              sequence_num: number;
            }[];
            delayed_incoming_queue_size: number;
            delayed_work_queue: {
              delayed_run_time: number;
              delayed_run_time_milliseconds_from_now: number;
              enqueue_order: number;
              is_cancelled: boolean;
              is_high_res: boolean;
              nestable: boolean;
              posted_from: string;
              sequence_num: number;
            }[];
            delayed_work_queue_capacity: number;
            delayed_work_queue_size: number;
            enabled: boolean;
            immediate_incoming_queue: {
              delayed_run_time: number;
              delayed_run_time_milliseconds_from_now: number;
              enqueue_order: number;
              is_cancelled: boolean;
              is_high_res: boolean;
              nestable: boolean;
              posted_from: string;
              sequence_num: number;
            }[];
            immediate_incoming_queue_capacity: number;
            immediate_incoming_queue_size: number;
            immediate_work_queue: {
              delayed_run_time: number;
              delayed_run_time_milliseconds_from_now: number;
              enqueue_order: number;
              is_cancelled: boolean;
              is_high_res: boolean;
              nestable: boolean;
              posted_from: string;
              sequence_num: number;
            }[];
            immediate_work_queue_capacity: number;
            immediate_work_queue_size: number;
            name: string;
            priority: string;
            task_queue_id: string;
            time_domain_name: string;
          }[];
          has_incoming_immediate_work: {
            '0': string;
            '1': string;
            '2': string;
            '3': string;
            '4': string;
            '5'?: string;
            '6'?: {
            
            };
            '7'?: {
            
            };
            '8'?: {
            
            };
            '9'?: {
            
            };
            '10'?: {
            
            };
            '11'?: {
            
            };
            '12'?: {
            
            };
            '13'?: {
            
            };
            '14'?: {
            
            };
            '15'?: {
            
            };
            '16'?: {
            
            };
            '17'?: {
            
            };
            '18'?: {
            
            };
            '19'?: {
            
            };
          }[];
          queues_to_gracefully_shutdown: {
            delay_to_next_task_ms?: number;
            delayed_incoming_queue: {
              delayed_run_time: number;
              delayed_run_time_milliseconds_from_now: number;
              is_cancelled: boolean;
              is_high_res: boolean;
              nestable: boolean;
              posted_from: string;
              sequence_num: number;
            }[];
            delayed_incoming_queue_size: number;
            delayed_work_queue: {
              delayed_run_time: number;
              delayed_run_time_milliseconds_from_now: number;
              enqueue_order: number;
              is_cancelled: boolean;
              is_high_res: boolean;
              nestable: boolean;
              posted_from: string;
              sequence_num: number;
            }[];
            delayed_work_queue_capacity: number;
            delayed_work_queue_size: number;
            enabled: boolean;
            immediate_incoming_queue_capacity: number;
            immediate_incoming_queue_size: number;
            immediate_work_queue_capacity: number;
            immediate_work_queue_size: number;
            name: string;
            priority: string;
            task_queue_id: string;
            time_domain_name: string;
          }[];
          selected_queue?: string;
          selector: {
            immediate_starvation_count: number;
          };
          time_domains: {
            name: string;
            next_delay_ms?: number;
            registered_delay_count: number;
          }[];
          work_queue_name?: string;
        };
      };
      id: string;
      name: 'SequenceManager';
      // Denotes a snapshot object of the event SequenceManager.
      ph: 'O';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SequenceManagerImpl {
    type NotifyDidProcessTaskObservers = 
      TraceEvent.SequenceManagerImpl.NotifyDidProcessTaskObservers.X;
  
    type NotifyWillProcessTaskObservers = 
      TraceEvent.SequenceManagerImpl.NotifyWillProcessTaskObservers.X;
  
    type RunTask = 
      TraceEvent.SequenceManagerImpl.RunTask.E;
  
    type TakeTask = 
      TraceEvent.SequenceManagerImpl.TakeTask.X;
  
    type UnregisterTaskQueue = 
      TraceEvent.SequenceManagerImpl.UnregisterTaskQueue.X;
  
    type WakeUpReadyDelayedQueues = 
      TraceEvent.SequenceManagerImpl.WakeUpReadyDelayedQueues.X;
  
    namespace NotifyDidProcessTaskObservers {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SequenceManagerImpl::NotifyDidProcessTaskObservers';
        // Denotes the end of the event NotifyDidProcessTaskObservers.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace NotifyWillProcessTaskObservers {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SequenceManagerImpl::NotifyWillProcessTaskObservers';
        // Denotes the end of the event NotifyWillProcessTaskObservers.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RunTask {
      interface E extends Base {
        args: {
        
        };
        name: 'SequenceManagerImpl::RunTask';
        // Denotes the ending of the event RunTask.
        ph: 'E';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace TakeTask {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SequenceManagerImpl::TakeTask';
        // Denotes the end of the event TakeTask.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UnregisterTaskQueue {
      interface X extends Base {
        args: {
          queue_name: string;
        };
        // Duration.
        dur: number;
        name: 'SequenceManagerImpl::UnregisterTaskQueue';
        // Denotes the end of the event UnregisterTaskQueue.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace WakeUpReadyDelayedQueues {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SequenceManagerImpl::WakeUpReadyDelayedQueues';
        // Denotes the end of the event WakeUpReadyDelayedQueues.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace SerializedScriptValueFactory {
    type Create = 
      TraceEvent.SerializedScriptValueFactory.Create.X;
  
    type Deserialize = 
      TraceEvent.SerializedScriptValueFactory.Deserialize.X;
  
    namespace Create {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SerializedScriptValueFactory::create';
        // Denotes the end of the event Create.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Deserialize {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SerializedScriptValueFactory::deserialize';
        // Denotes the end of the event Deserialize.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Service_manager {
    namespace Mojom {
      type Connector = 
        TraceEvent.Service_manager.Mojom.Connector.X;
    
      type InterfaceProvider = 
        TraceEvent.Service_manager.Mojom.InterfaceProvider.X;
    
      type PIDReceiver = 
        TraceEvent.Service_manager.Mojom.PIDReceiver.X;
    
      type Service = 
        TraceEvent.Service_manager.Mojom.Service.X;
    
      type ServiceFactory = 
        TraceEvent.Service_manager.Mojom.ServiceFactory.X;
    
      type ServiceManagerListener = 
        TraceEvent.Service_manager.Mojom.ServiceManagerListener.X;
    
      namespace Connector {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'service_manager.mojom.Connector';
          // Denotes the end of the event Connector.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace InterfaceProvider {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'service_manager.mojom.InterfaceProvider';
          // Denotes the end of the event InterfaceProvider.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace PIDReceiver {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'service_manager.mojom.PIDReceiver';
          // Denotes the end of the event PIDReceiver.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace Service {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'service_manager.mojom.Service';
          // Denotes the end of the event Service.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace ServiceFactory {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'service_manager.mojom.ServiceFactory';
          // Denotes the end of the event ServiceFactory.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace ServiceManagerListener {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'service_manager.mojom.ServiceManagerListener';
          // Denotes the end of the event ServiceManagerListener.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace ServiceManager {
    type Connect = 
      TraceEvent.ServiceManager.Connect.I;
  
    namespace Connect {
      interface I extends Base {
        args: {
          original_name: string;
        };
        name: 'ServiceManager::Connect';
        // Denotes an event Connect. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ServiceWorkerControlleeRequestHandler {
    type PrepareForMainResource = 
      TraceEvent.ServiceWorkerControlleeRequestHandler.PrepareForMainResource.F |
      TraceEvent.ServiceWorkerControlleeRequestHandler.PrepareForMainResource.S;
  
    namespace PrepareForMainResource {
      interface F extends Base {
        args: {
          Status: string;
        };
        id: string;
        name: 'ServiceWorkerControlleeRequestHandler::PrepareForMainResource';
        // Denotes the ending of the async event PrepareForMainResource.
        ph: 'F';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface S extends Base {
        args: {
          URL: string;
        };
        id: string;
        name: 'ServiceWorkerControlleeRequestHandler::PrepareForMainResource';
        // Denotes the beginning of the async event PrepareForMainResource.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ServiceWorkerDispatcherHost {
    type OnProviderCreated = 
      TraceEvent.ServiceWorkerDispatcherHost.OnProviderCreated.X;
  
    namespace OnProviderCreated {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ServiceWorkerDispatcherHost::OnProviderCreated';
        // Denotes the end of the event OnProviderCreated.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ServiceWorkerNavigationLoader {
    type FallbackToNetwork = 
      TraceEvent.ServiceWorkerNavigationLoader.FallbackToNetwork.X;
  
    type ServiceWorkerNavigationloader = 
      TraceEvent.ServiceWorkerNavigationLoader.ServiceWorkerNavigationloader.X;
  
    namespace FallbackToNetwork {
      interface X extends Base {
        args: {
        
        };
        bind_id: string;
        // Duration.
        dur: number;
        flow_in: boolean;
        flow_out: boolean;
        id: string;
        name: 'ServiceWorkerNavigationLoader::FallbackToNetwork';
        // Denotes the end of the event FallbackToNetwork.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ServiceWorkerNavigationloader {
      interface X extends Base {
        args: {
          url?: string;
        };
        bind_id: string;
        // Duration.
        dur: number;
        flow_in?: boolean;
        flow_out?: boolean;
        id: string;
        name: 'ServiceWorkerNavigationLoader::ServiceWorkerNavigationloader';
        // Denotes the end of the event ServiceWorkerNavigationloader.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ServiceWorkerProviderHost {
    type RemoveProviderHost = 
      TraceEvent.ServiceWorkerProviderHost.RemoveProviderHost.X;
  
    namespace RemoveProviderHost {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ServiceWorkerProviderHost::RemoveProviderHost';
        // Denotes the end of the event RemoveProviderHost.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ServiceWorkerStorage {
    namespace FindRegistrationForDocument {
      type CheckInstalling = 
        TraceEvent.ServiceWorkerStorage.FindRegistrationForDocument.CheckInstalling.I;
    
      namespace CheckInstalling {
        interface I extends Base {
          args: {
            Status: string;
            URL: string;
          };
          name: 'ServiceWorkerStorage::FindRegistrationForDocument:CheckInstalling';
          // Denotes an event CheckInstalling. There are no begining/ending phases.
          ph: 'I';
          s: string;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace SetIdlePeriodState {
    interface X extends Base {
      args: {
        new_state: string;
        old_state: string;
      };
      // Duration.
      dur: number;
      name: 'SetIdlePeriodState';
      // Denotes the end of the event SetIdlePeriodState.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SetLayerTreeId {
    interface I extends Base {
      args: {
        data: {
          frame?: string;
          layerTreeId: number;
          sessionId?: string;
        };
      };
      name: 'SetLayerTreeId';
      // Denotes an event SetLayerTreeId. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SharedImageStub {
    type OnCreateSharedImage = 
      TraceEvent.SharedImageStub.OnCreateSharedImage.X;
  
    type OnCreateSharedImageWithData = 
      TraceEvent.SharedImageStub.OnCreateSharedImageWithData.X;
  
    type OnDestroySharedImage = 
      TraceEvent.SharedImageStub.OnDestroySharedImage.X;
  
    type OnRegisterSharedImageUploadBuffer = 
      TraceEvent.SharedImageStub.OnRegisterSharedImageUploadBuffer.X;
  
    namespace OnCreateSharedImage {
      interface X extends Base {
        args: {
          height: number;
          width: number;
        };
        // Duration.
        dur: number;
        name: 'SharedImageStub::OnCreateSharedImage';
        // Denotes the end of the event OnCreateSharedImage.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnCreateSharedImageWithData {
      interface X extends Base {
        args: {
          height: number;
          width: number;
        };
        // Duration.
        dur: number;
        name: 'SharedImageStub::OnCreateSharedImageWithData';
        // Denotes the end of the event OnCreateSharedImageWithData.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnDestroySharedImage {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SharedImageStub::OnDestroySharedImage';
        // Denotes the end of the event OnDestroySharedImage.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnRegisterSharedImageUploadBuffer {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SharedImageStub::OnRegisterSharedImageUploadBuffer';
        // Denotes the end of the event OnRegisterSharedImageUploadBuffer.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ShCompile {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ShCompile';
      // Denotes the end of the event ShCompile.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ShortcutsProvider {
    type Start = 
      TraceEvent.ShortcutsProvider.Start.X;
  
    namespace Start {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ShortcutsProvider::Start';
        // Denotes the end of the event Start.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace SIGNED_CERTIFICATE_TIMESTAMPS_CHECKED {
    interface n extends Base {
      args: {
        params: {
          scts: {
            extensions: string;
            hash_algorithm: string;
            log_id: string;
            origin: string;
            signature_algorithm: string;
            signature_data: string;
            timestamp: string;
            verification_status: string;
            version: number;
          }[];
        };
        source_type: string;
      };
      id: string;
      name: 'SIGNED_CERTIFICATE_TIMESTAMPS_CHECKED';
      // Denotes the ending of the nestable async flow event SIGNED_CERTIFICATE_TIMESTAMPS_CHECKED.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SIGNED_CERTIFICATE_TIMESTAMPS_RECEIVED {
    interface n extends Base {
      args: {
        params: {
          embedded_scts: string;
          scts_from_ocsp_response: string;
          scts_from_tls_extension: string;
        };
        source_type: string;
      };
      id: string;
      name: 'SIGNED_CERTIFICATE_TIMESTAMPS_RECEIVED';
      // Denotes the ending of the nestable async flow event SIGNED_CERTIFICATE_TIMESTAMPS_RECEIVED.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SIMPLE_CACHE_ENTRY_CLOSE_BEGIN {
    interface n extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'SIMPLE_CACHE_ENTRY_CLOSE_BEGIN';
      // Denotes the ending of the nestable async flow event SIMPLE_CACHE_ENTRY_CLOSE_BEGIN.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SIMPLE_CACHE_ENTRY_CLOSE_CALL {
    interface n extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'SIMPLE_CACHE_ENTRY_CLOSE_CALL';
      // Denotes the ending of the nestable async flow event SIMPLE_CACHE_ENTRY_CLOSE_CALL.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SIMPLE_CACHE_ENTRY_CLOSE_END {
    interface n extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'SIMPLE_CACHE_ENTRY_CLOSE_END';
      // Denotes the ending of the nestable async flow event SIMPLE_CACHE_ENTRY_CLOSE_END.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SIMPLE_CACHE_ENTRY_CREATE_BEGIN {
    interface n extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'SIMPLE_CACHE_ENTRY_CREATE_BEGIN';
      // Denotes the ending of the nestable async flow event SIMPLE_CACHE_ENTRY_CREATE_BEGIN.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SIMPLE_CACHE_ENTRY_CREATE_CALL {
    interface n extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'SIMPLE_CACHE_ENTRY_CREATE_CALL';
      // Denotes the ending of the nestable async flow event SIMPLE_CACHE_ENTRY_CREATE_CALL.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SIMPLE_CACHE_ENTRY_CREATE_END {
    interface n extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'SIMPLE_CACHE_ENTRY_CREATE_END';
      // Denotes the ending of the nestable async flow event SIMPLE_CACHE_ENTRY_CREATE_END.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SIMPLE_CACHE_ENTRY_CREATE_OPTIMISTIC {
    interface n extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'SIMPLE_CACHE_ENTRY_CREATE_OPTIMISTIC';
      // Denotes the ending of the nestable async flow event SIMPLE_CACHE_ENTRY_CREATE_OPTIMISTIC.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SIMPLE_CACHE_ENTRY_DOOM_BEGIN {
    interface n extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'SIMPLE_CACHE_ENTRY_DOOM_BEGIN';
      // Denotes the ending of the nestable async flow event SIMPLE_CACHE_ENTRY_DOOM_BEGIN.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SIMPLE_CACHE_ENTRY_DOOM_CALL {
    interface n extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'SIMPLE_CACHE_ENTRY_DOOM_CALL';
      // Denotes the ending of the nestable async flow event SIMPLE_CACHE_ENTRY_DOOM_CALL.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SIMPLE_CACHE_ENTRY_DOOM_END {
    interface n extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'SIMPLE_CACHE_ENTRY_DOOM_END';
      // Denotes the ending of the nestable async flow event SIMPLE_CACHE_ENTRY_DOOM_END.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SIMPLE_CACHE_ENTRY_OPEN_BEGIN {
    interface n extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'SIMPLE_CACHE_ENTRY_OPEN_BEGIN';
      // Denotes the ending of the nestable async flow event SIMPLE_CACHE_ENTRY_OPEN_BEGIN.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SIMPLE_CACHE_ENTRY_OPEN_CALL {
    interface n extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'SIMPLE_CACHE_ENTRY_OPEN_CALL';
      // Denotes the ending of the nestable async flow event SIMPLE_CACHE_ENTRY_OPEN_CALL.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SIMPLE_CACHE_ENTRY_OPEN_END {
    interface n extends Base {
      args: {
        params: {
          net_error: number;
        };
        source_type: string;
      };
      id: string;
      name: 'SIMPLE_CACHE_ENTRY_OPEN_END';
      // Denotes the ending of the nestable async flow event SIMPLE_CACHE_ENTRY_OPEN_END.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SIMPLE_CACHE_ENTRY_READ_BEGIN {
    interface n extends Base {
      args: {
        params: {
          buf_len: number;
          index: number;
          offset: number;
        };
        source_type: string;
      };
      id: string;
      name: 'SIMPLE_CACHE_ENTRY_READ_BEGIN';
      // Denotes the ending of the nestable async flow event SIMPLE_CACHE_ENTRY_READ_BEGIN.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SIMPLE_CACHE_ENTRY_READ_CALL {
    interface n extends Base {
      args: {
        params: {
          buf_len: number;
          index: number;
          offset: number;
        };
        source_type: string;
      };
      id: string;
      name: 'SIMPLE_CACHE_ENTRY_READ_CALL';
      // Denotes the ending of the nestable async flow event SIMPLE_CACHE_ENTRY_READ_CALL.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SIMPLE_CACHE_ENTRY_READ_END {
    interface n extends Base {
      args: {
        params: {
          bytes_copied: number;
        };
        source_type: string;
      };
      id: string;
      name: 'SIMPLE_CACHE_ENTRY_READ_END';
      // Denotes the ending of the nestable async flow event SIMPLE_CACHE_ENTRY_READ_END.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SIMPLE_CACHE_ENTRY_SET_KEY {
    interface n extends Base {
      args: {
        params: {
          key: string;
        };
        source_type: string;
      };
      id: string;
      name: 'SIMPLE_CACHE_ENTRY_SET_KEY';
      // Denotes the ending of the nestable async flow event SIMPLE_CACHE_ENTRY_SET_KEY.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SIMPLE_CACHE_ENTRY_WRITE_BEGIN {
    interface n extends Base {
      args: {
        params: {
          buf_len: number;
          index: number;
          offset: number;
          truncate: boolean;
        };
        source_type: string;
      };
      id: string;
      name: 'SIMPLE_CACHE_ENTRY_WRITE_BEGIN';
      // Denotes the ending of the nestable async flow event SIMPLE_CACHE_ENTRY_WRITE_BEGIN.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SIMPLE_CACHE_ENTRY_WRITE_CALL {
    interface n extends Base {
      args: {
        params: {
          buf_len: number;
          index: number;
          offset: number;
          truncate: boolean;
        };
        source_type: string;
      };
      id: string;
      name: 'SIMPLE_CACHE_ENTRY_WRITE_CALL';
      // Denotes the ending of the nestable async flow event SIMPLE_CACHE_ENTRY_WRITE_CALL.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SIMPLE_CACHE_ENTRY_WRITE_END {
    interface n extends Base {
      args: {
        params: {
          bytes_copied: number;
        };
        source_type: string;
      };
      id: string;
      name: 'SIMPLE_CACHE_ENTRY_WRITE_END';
      // Denotes the ending of the nestable async flow event SIMPLE_CACHE_ENTRY_WRITE_END.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SIMPLE_CACHE_ENTRY_WRITE_OPTIMISTIC {
    interface n extends Base {
      args: {
        params: {
          bytes_copied: number;
        };
        source_type: string;
      };
      id: string;
      name: 'SIMPLE_CACHE_ENTRY_WRITE_OPTIMISTIC';
      // Denotes the ending of the nestable async flow event SIMPLE_CACHE_ENTRY_WRITE_OPTIMISTIC.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SIMPLE_CACHE_ENTRY {
    interface b extends Base {
      args: {
        params: {
          entry_hash: string;
        };
        source_type: string;
      };
      id: string;
      name: 'SIMPLE_CACHE_ENTRY';
      // Denotes the beginning of the nestable async flow event SIMPLE_CACHE_ENTRY.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'SIMPLE_CACHE_ENTRY';
      // Denotes a step into the nestable async flow event SIMPLE_CACHE_ENTRY.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SingleThreadIdleTaskRunner {
    type RunTask = 
      TraceEvent.SingleThreadIdleTaskRunner.RunTask.X;
  
    namespace RunTask {
      interface X extends Base {
        args: {
          allotted_time_ms: number;
        };
        // Duration.
        dur: number;
        name: 'SingleThreadIdleTaskRunner::RunTask';
        // Denotes the end of the event RunTask.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace SingleThreadProxy {
    type DidReceiveCompositorFrameAckOnImplThread = 
      TraceEvent.SingleThreadProxy.DidReceiveCompositorFrameAckOnImplThread.X;
  
    type DoCommit = 
      TraceEvent.SingleThreadProxy.DoCommit.X;
  
    type DoComposite = 
      TraceEvent.SingleThreadProxy.DoComposite.X;
  
    type NotifyReadyToActivate = 
      TraceEvent.SingleThreadProxy.NotifyReadyToActivate.X;
  
    type NotifyReadyToDraw = 
      TraceEvent.SingleThreadProxy.NotifyReadyToDraw.X;
  
    type OnCanDrawStateChanged = 
      TraceEvent.SingleThreadProxy.OnCanDrawStateChanged.X;
  
    type PostAnimationEventsToMainThreadOnImplThread = 
      TraceEvent.SingleThreadProxy.PostAnimationEventsToMainThreadOnImplThread.X;
  
    type ScheduledActionPrepareTiles = 
      TraceEvent.SingleThreadProxy.ScheduledActionPrepareTiles.X;
  
    type ScheduledActionSendBeginMainFrame = 
      TraceEvent.SingleThreadProxy.ScheduledActionSendBeginMainFrame.X;
  
    type SetDeferMainFrameUpdate = 
      TraceEvent.SingleThreadProxy.SetDeferMainFrameUpdate.F |
      TraceEvent.SingleThreadProxy.SetDeferMainFrameUpdate.S;
  
    type SetNeedsAnimate = 
      TraceEvent.SingleThreadProxy.SetNeedsAnimate.X;
  
    type SetNeedsOneBeginImplFrameOnImplThread = 
      TraceEvent.SingleThreadProxy.SetNeedsOneBeginImplFrameOnImplThread.X;
  
    type SetNeedsPrepareTilesOnImplThread = 
      TraceEvent.SingleThreadProxy.SetNeedsPrepareTilesOnImplThread.X;
  
    type SetNeedsUpdateLayers = 
      TraceEvent.SingleThreadProxy.SetNeedsUpdateLayers.X;
  
    type SetVisible = 
      TraceEvent.SingleThreadProxy.SetVisible.X;
  
    type SingleThreadProxy = 
      TraceEvent.SingleThreadProxy.SingleThreadProxy.X;
  
    namespace DidReceiveCompositorFrameAckOnImplThread {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SingleThreadProxy::DidReceiveCompositorFrameAckOnImplThread';
        // Denotes the end of the event DidReceiveCompositorFrameAckOnImplThread.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoCommit {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SingleThreadProxy::DoCommit';
        // Denotes the end of the event DoCommit.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoComposite {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SingleThreadProxy::DoComposite';
        // Denotes the end of the event DoComposite.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace NotifyReadyToActivate {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SingleThreadProxy::NotifyReadyToActivate';
        // Denotes the end of the event NotifyReadyToActivate.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace NotifyReadyToDraw {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SingleThreadProxy::NotifyReadyToDraw';
        // Denotes the end of the event NotifyReadyToDraw.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnCanDrawStateChanged {
      interface X extends Base {
        args: {
          can_draw: boolean;
        };
        // Duration.
        dur: number;
        name: 'SingleThreadProxy::OnCanDrawStateChanged';
        // Denotes the end of the event OnCanDrawStateChanged.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PostAnimationEventsToMainThreadOnImplThread {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SingleThreadProxy::PostAnimationEventsToMainThreadOnImplThread';
        // Denotes the end of the event PostAnimationEventsToMainThreadOnImplThread.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ScheduledActionPrepareTiles {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SingleThreadProxy::ScheduledActionPrepareTiles';
        // Denotes the end of the event ScheduledActionPrepareTiles.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ScheduledActionSendBeginMainFrame {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SingleThreadProxy::ScheduledActionSendBeginMainFrame';
        // Denotes the end of the event ScheduledActionSendBeginMainFrame.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetDeferMainFrameUpdate {
      interface F extends Base {
        args: {
        
        };
        id: string;
        name: 'SingleThreadProxy::SetDeferMainFrameUpdate';
        // Denotes the ending of the async event SetDeferMainFrameUpdate.
        ph: 'F';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface S extends Base {
        args: {
        
        };
        id: string;
        name: 'SingleThreadProxy::SetDeferMainFrameUpdate';
        // Denotes the beginning of the async event SetDeferMainFrameUpdate.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetNeedsAnimate {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SingleThreadProxy::SetNeedsAnimate';
        // Denotes the end of the event SetNeedsAnimate.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetNeedsOneBeginImplFrameOnImplThread {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SingleThreadProxy::SetNeedsOneBeginImplFrameOnImplThread';
        // Denotes the end of the event SetNeedsOneBeginImplFrameOnImplThread.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetNeedsPrepareTilesOnImplThread {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SingleThreadProxy::SetNeedsPrepareTilesOnImplThread';
        // Denotes the end of the event SetNeedsPrepareTilesOnImplThread.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetNeedsUpdateLayers {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SingleThreadProxy::SetNeedsUpdateLayers';
        // Denotes the end of the event SetNeedsUpdateLayers.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetVisible {
      interface X extends Base {
        args: {
          visible: boolean;
        };
        // Duration.
        dur: number;
        name: 'SingleThreadProxy::SetVisible';
        // Denotes the end of the event SetVisible.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SingleThreadProxy {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SingleThreadProxy::SingleThreadProxy';
        // Denotes the end of the event SingleThreadProxy.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace SingleThreadTaskGraphRunner {
    type CollectCompletedTasks = 
      TraceEvent.SingleThreadTaskGraphRunner.CollectCompletedTasks.X;
  
    type RunTaskWithLockAcquired = 
      TraceEvent.SingleThreadTaskGraphRunner.RunTaskWithLockAcquired.X;
  
    type ScheduleTasks = 
      TraceEvent.SingleThreadTaskGraphRunner.ScheduleTasks.X;
  
    type WaitForTasksToFinishRunning = 
      TraceEvent.SingleThreadTaskGraphRunner.WaitForTasksToFinishRunning.X;
  
    namespace CollectCompletedTasks {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SingleThreadTaskGraphRunner::CollectCompletedTasks';
        // Denotes the end of the event CollectCompletedTasks.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RunTaskWithLockAcquired {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SingleThreadTaskGraphRunner::RunTaskWithLockAcquired';
        // Denotes the end of the event RunTaskWithLockAcquired.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ScheduleTasks {
      interface X extends Base {
        args: {
          num_edges: number;
          num_nodes: number;
        };
        // Duration.
        dur: number;
        name: 'SingleThreadTaskGraphRunner::ScheduleTasks';
        // Denotes the end of the event ScheduleTasks.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace WaitForTasksToFinishRunning {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SingleThreadTaskGraphRunner::WaitForTasksToFinishRunning';
        // Denotes the end of the event WaitForTasksToFinishRunning.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace SiteInstanceImpl {
    type GetProcess = 
      TraceEvent.SiteInstanceImpl.GetProcess.X;
  
    type LockToOrigin = 
      TraceEvent.SiteInstanceImpl.LockToOrigin.X;
  
    type SetSite = 
      TraceEvent.SiteInstanceImpl.SetSite.X;
  
    namespace GetProcess {
      interface X extends Base {
        args: {
          'process id': number;
          'site id': number;
        };
        // Duration.
        dur: number;
        name: 'SiteInstanceImpl::GetProcess';
        // Denotes the end of the event GetProcess.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace LockToOrigin {
      interface X extends Base {
        args: {
          lock: string;
          'site id': number;
        };
        // Duration.
        dur: number;
        name: 'SiteInstanceImpl::LockToOrigin';
        // Denotes the end of the event LockToOrigin.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetSite {
      interface X extends Base {
        args: {
          'site id': number;
          url: string;
        };
        // Duration.
        dur: number;
        name: 'SiteInstanceImpl::SetSite';
        // Denotes the end of the event SetSite.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace SkCanvas {
    type DrawImageSkImageSkScalarSkScalarSkPaint = 
      TraceEvent.SkCanvas.DrawImageSkImageSkScalarSkScalarSkPaint.X;
  
    type DrawOvalSkRectSkPaint = 
      TraceEvent.SkCanvas.DrawOvalSkRectSkPaint.X;
  
    type DrawPaintSkPaint = 
      TraceEvent.SkCanvas.DrawPaintSkPaint.X;
  
    type DrawPathSkPathSkPaint = 
      TraceEvent.SkCanvas.DrawPathSkPathSkPaint.X;
  
    type DrawRectSkRectSkPaint = 
      TraceEvent.SkCanvas.DrawRectSkRectSkPaint.X;
  
    type DrawRRectSkRRectSkPaint = 
      TraceEvent.SkCanvas.DrawRRectSkRRectSkPaint.X;
  
    type DrawTextBlobSkTextBlobSkScalarSkScalarSkPaint = 
      TraceEvent.SkCanvas.DrawTextBlobSkTextBlobSkScalarSkScalarSkPaint.X;
  
    namespace DrawImageRectSkImageSkRectSkRectSkPaintSkCanvas {
      type SrcRectConstraint = 
        TraceEvent.SkCanvas.DrawImageRectSkImageSkRectSkRectSkPaintSkCanvas.SrcRectConstraint.X;
    
      namespace SrcRectConstraint {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'void SkCanvas::drawImageRect(const SkImage *, const SkRect &, const SkRect &, const SkPaint *, SkCanvas::SrcRectConstraint)';
          // Denotes the end of the event SrcRectConstraint.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  
    namespace DrawImageSkImageSkScalarSkScalarSkPaint {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'void SkCanvas::drawImage(const SkImage *, SkScalar, SkScalar, const SkPaint *)';
        // Denotes the end of the event DrawImageSkImageSkScalarSkScalarSkPaint.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DrawOvalSkRectSkPaint {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'void SkCanvas::drawOval(const SkRect &, const SkPaint &)';
        // Denotes the end of the event DrawOvalSkRectSkPaint.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DrawPaintSkPaint {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'void SkCanvas::drawPaint(const SkPaint &)';
        // Denotes the end of the event DrawPaintSkPaint.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DrawPathSkPathSkPaint {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'void SkCanvas::drawPath(const SkPath &, const SkPaint &)';
        // Denotes the end of the event DrawPathSkPathSkPaint.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DrawPointsSkCanvas {
      type PointModesize_tSkPointSkPaint = 
        TraceEvent.SkCanvas.DrawPointsSkCanvas.PointModesize_tSkPointSkPaint.X;
    
      namespace PointModesize_tSkPointSkPaint {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'void SkCanvas::drawPoints(SkCanvas::PointMode, size_t, const SkPoint *, const SkPaint &)';
          // Denotes the end of the event PointModesize_tSkPointSkPaint.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  
    namespace DrawRectSkRectSkPaint {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'void SkCanvas::drawRect(const SkRect &, const SkPaint &)';
        // Denotes the end of the event DrawRectSkRectSkPaint.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DrawRRectSkRRectSkPaint {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'void SkCanvas::drawRRect(const SkRRect &, const SkPaint &)';
        // Denotes the end of the event DrawRRectSkRRectSkPaint.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DrawTextBlobSkTextBlobSkScalarSkScalarSkPaint {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'void SkCanvas::drawTextBlob(const SkTextBlob *, SkScalar, SkScalar, const SkPaint &)';
        // Denotes the end of the event DrawTextBlobSkTextBlobSkScalarSkScalarSkPaint.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace InternalSaveLayerSkCanvas {
      namespace SaveLayerRecSkCanvas {
        type SaveLayerStrategy = 
          TraceEvent.SkCanvas.InternalSaveLayerSkCanvas.SaveLayerRecSkCanvas.SaveLayerStrategy.X;
      
        namespace SaveLayerStrategy {
          interface X extends Base {
            args: {
            
            };
            // Duration.
            dur: number;
            name: 'void SkCanvas::internalSaveLayer(const SkCanvas::SaveLayerRec &, SkCanvas::SaveLayerStrategy)';
            // Denotes the end of the event SaveLayerStrategy.
            ph: 'X';
            tdur: number;
            // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
            tts: number;
          }
        }
      }
    }
  
    namespace SaveLayerSkCanvas {
      type SaveLayerRec = 
        TraceEvent.SkCanvas.SaveLayerSkCanvas.SaveLayerRec.X;
    
      namespace SaveLayerRec {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'int SkCanvas::saveLayer(const SkCanvas::SaveLayerRec &)';
          // Denotes the end of the event SaveLayerRec.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace SkGpuDevice {
    type ClearAll = 
      TraceEvent.SkGpuDevice.ClearAll.X;
  
    type DrawDevice = 
      TraceEvent.SkGpuDevice.DrawDevice.X;
  
    type DrawGlyphRunList = 
      TraceEvent.SkGpuDevice.DrawGlyphRunList.X;
  
    type DrawOval = 
      TraceEvent.SkGpuDevice.DrawOval.X;
  
    type DrawPaint = 
      TraceEvent.SkGpuDevice.DrawPaint.X;
  
    type DrawPath = 
      TraceEvent.SkGpuDevice.DrawPath.X;
  
    type DrawPoints = 
      TraceEvent.SkGpuDevice.DrawPoints.X;
  
    type DrawRect = 
      TraceEvent.SkGpuDevice.DrawRect.X;
  
    type DrawRRect = 
      TraceEvent.SkGpuDevice.DrawRRect.X;
  
    type DrawSpecial = 
      TraceEvent.SkGpuDevice.DrawSpecial.X;
  
    type DrawStrokedLine = 
      TraceEvent.SkGpuDevice.DrawStrokedLine.X;
  
    namespace ClearAll {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SkGpuDevice::clearAll';
        // Denotes the end of the event ClearAll.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DrawDevice {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SkGpuDevice::drawDevice';
        // Denotes the end of the event DrawDevice.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DrawGlyphRunList {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SkGpuDevice::drawGlyphRunList';
        // Denotes the end of the event DrawGlyphRunList.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DrawOval {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SkGpuDevice::drawOval';
        // Denotes the end of the event DrawOval.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DrawPaint {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SkGpuDevice::drawPaint';
        // Denotes the end of the event DrawPaint.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DrawPath {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SkGpuDevice::drawPath';
        // Denotes the end of the event DrawPath.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DrawPoints {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SkGpuDevice::drawPoints';
        // Denotes the end of the event DrawPoints.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DrawRect {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SkGpuDevice::drawRect';
        // Denotes the end of the event DrawRect.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DrawRRect {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SkGpuDevice::drawRRect';
        // Denotes the end of the event DrawRRect.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DrawSpecial {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SkGpuDevice::drawSpecial';
        // Denotes the end of the event DrawSpecial.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DrawStrokedLine {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SkGpuDevice::drawStrokedLine';
        // Denotes the end of the event DrawStrokedLine.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Skia_gpu {
    type GLShader = 
      TraceEvent.Skia_gpu.GLShader.I;
  
    namespace GLShader {
      interface I extends Base {
        args: {
          shader: string;
        };
        name: 'skia_gpu::GLShader';
        // Denotes an event GLShader. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Skiabudget {
    interface C extends Base {
      args: {
        free: number;
        used: number;
      };
      name: 'skia budget';
      // Denotes a counter for the event Skiabudget.
      ph: 'C';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SkipBeginImplFrameToReduceLatency {
    interface I extends Base {
      args: {
      
      };
      name: 'SkipBeginImplFrameToReduceLatency';
      // Denotes an event SkipBeginImplFrameToReduceLatency. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SkipBeginMainFrameToReduceLatency {
    interface I extends Base {
      args: {
      
      };
      name: 'SkipBeginMainFrameToReduceLatency';
      // Denotes an event SkipBeginMainFrameToReduceLatency. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SmallPathOp {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'SmallPathOp';
      // Denotes the end of the event SmallPathOp.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SOCKET_ALIVE {
    interface b extends Base {
      args: {
        params: {
          source_dependency: {
            id: number;
            type: number;
          };
        };
        source_type: string;
      };
      id: string;
      name: 'SOCKET_ALIVE';
      // Denotes the beginning of the nestable async flow event SOCKET_ALIVE.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'SOCKET_ALIVE';
      // Denotes a step into the nestable async flow event SOCKET_ALIVE.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SOCKET_BYTES_RECEIVED {
    interface n extends Base {
      args: {
        params: {
          byte_count: number;
        };
        source_type: string;
      };
      id: string;
      name: 'SOCKET_BYTES_RECEIVED';
      // Denotes the ending of the nestable async flow event SOCKET_BYTES_RECEIVED.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SOCKET_BYTES_SENT {
    interface n extends Base {
      args: {
        params: {
          byte_count: number;
        };
        source_type: string;
      };
      id: string;
      name: 'SOCKET_BYTES_SENT';
      // Denotes the ending of the nestable async flow event SOCKET_BYTES_SENT.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SOCKET_IN_USE {
    interface b extends Base {
      args: {
        params: {
          source_dependency: {
            id: number;
            type: number;
          };
        };
        source_type: string;
      };
      id: string;
      name: 'SOCKET_IN_USE';
      // Denotes the beginning of the nestable async flow event SOCKET_IN_USE.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'SOCKET_IN_USE';
      // Denotes a step into the nestable async flow event SOCKET_IN_USE.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SOCKET_POOL_BOUND_TO_CONNECT_JOB {
    interface n extends Base {
      args: {
        params: {
          source_dependency: {
            id: number;
            type: number;
          };
        };
        source_type: string;
      };
      id: string;
      name: 'SOCKET_POOL_BOUND_TO_CONNECT_JOB';
      // Denotes the ending of the nestable async flow event SOCKET_POOL_BOUND_TO_CONNECT_JOB.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SOCKET_POOL_BOUND_TO_SOCKET {
    interface n extends Base {
      args: {
        params: {
          source_dependency: {
            id: number;
            type: number;
          };
        };
        source_type: string;
      };
      id: string;
      name: 'SOCKET_POOL_BOUND_TO_SOCKET';
      // Denotes the ending of the nestable async flow event SOCKET_POOL_BOUND_TO_SOCKET.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SOCKET_POOL_CONNECT_JOB_CONNECT {
    interface b extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'SOCKET_POOL_CONNECT_JOB_CONNECT';
      // Denotes the beginning of the nestable async flow event SOCKET_POOL_CONNECT_JOB_CONNECT.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
        params: {
          net_error: number;
        };
        source_type: string;
      };
      id: string;
      name: 'SOCKET_POOL_CONNECT_JOB_CONNECT';
      // Denotes a step into the nestable async flow event SOCKET_POOL_CONNECT_JOB_CONNECT.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SOCKET_POOL_CONNECT_JOB {
    interface b extends Base {
      args: {
        params: {
          group_name: string;
        };
        source_type: string;
      };
      id: string;
      name: 'SOCKET_POOL_CONNECT_JOB';
      // Denotes the beginning of the nestable async flow event SOCKET_POOL_CONNECT_JOB.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'SOCKET_POOL_CONNECT_JOB';
      // Denotes a step into the nestable async flow event SOCKET_POOL_CONNECT_JOB.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SOCKET_POOL_REUSED_AN_EXISTING_SOCKET {
    interface n extends Base {
      args: {
        params: {
          idle_ms: number;
        };
        source_type: string;
      };
      id: string;
      name: 'SOCKET_POOL_REUSED_AN_EXISTING_SOCKET';
      // Denotes the ending of the nestable async flow event SOCKET_POOL_REUSED_AN_EXISTING_SOCKET.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SOCKET_POOL {
    interface b extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'SOCKET_POOL';
      // Denotes the beginning of the nestable async flow event SOCKET_POOL.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
        params: {
          net_error: number;
        };
        source_type: string;
      };
      id: string;
      name: 'SOCKET_POOL';
      // Denotes a step into the nestable async flow event SOCKET_POOL.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SocketPosix {
    type OnFileCanReadWithoutBlocking = 
      TraceEvent.SocketPosix.OnFileCanReadWithoutBlocking.X;
  
    namespace OnFileCanReadWithoutBlocking {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SocketPosix::OnFileCanReadWithoutBlocking';
        // Denotes the end of the event OnFileCanReadWithoutBlocking.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace SoftwareImageDecodeCache {
    type DecodeImageIfNecessary = 
      TraceEvent.SoftwareImageDecodeCache.DecodeImageIfNecessary.X;
  
    type DrawWithImageFinished = 
      TraceEvent.SoftwareImageDecodeCache.DrawWithImageFinished.X;
  
    type GetDecodedImageForDrawInternal = 
      TraceEvent.SoftwareImageDecodeCache.GetDecodedImageForDrawInternal.X;
  
    type ReduceCacheUsageUntilWithinLimit = 
      TraceEvent.SoftwareImageDecodeCache.ReduceCacheUsageUntilWithinLimit.X;
  
    type UnrefImage = 
      TraceEvent.SoftwareImageDecodeCache.UnrefImage.X;
  
    namespace DecodeImageIfNecessary {
      interface X extends Base {
        args: {
          key: string;
        };
        // Duration.
        dur: number;
        name: 'SoftwareImageDecodeCache::DecodeImageIfNecessary';
        // Denotes the end of the event DecodeImageIfNecessary.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DrawWithImageFinished {
      interface X extends Base {
        args: {
          key: string;
        };
        // Duration.
        dur: number;
        name: 'SoftwareImageDecodeCache::DrawWithImageFinished';
        // Denotes the end of the event DrawWithImageFinished.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GetDecodedImageForDrawInternal {
      interface X extends Base {
        args: {
          key: string;
        };
        // Duration.
        dur: number;
        name: 'SoftwareImageDecodeCache::GetDecodedImageForDrawInternal';
        // Denotes the end of the event GetDecodedImageForDrawInternal.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ReduceCacheUsageUntilWithinLimit {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SoftwareImageDecodeCache::ReduceCacheUsageUntilWithinLimit';
        // Denotes the end of the event ReduceCacheUsageUntilWithinLimit.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UnrefImage {
      interface X extends Base {
        args: {
          key: string;
        };
        // Duration.
        dur: number;
        name: 'SoftwareImageDecodeCache::UnrefImage';
        // Denotes the end of the event UnrefImage.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace SolidColorAnalyzer {
    type CheckIfRRectClipCoversCanvas = 
      TraceEvent.SolidColorAnalyzer.CheckIfRRectClipCoversCanvas.X;
  
    type CheckIfSolidShape = 
      TraceEvent.SolidColorAnalyzer.CheckIfSolidShape.X;
  
    namespace CheckIfRRectClipCoversCanvas {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SolidColorAnalyzer::CheckIfRRectClipCoversCanvas';
        // Denotes the end of the event CheckIfRRectClipCoversCanvas.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CheckIfSolidShape {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SolidColorAnalyzer::CheckIfSolidShape';
        // Denotes the end of the event CheckIfSolidShape.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace SpdySessionPool {
    type CreateAvailableSessionFromSocket = 
      TraceEvent.SpdySessionPool.CreateAvailableSessionFromSocket.X;
  
    namespace CreateAvailableSessionFromSocket {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SpdySessionPool::CreateAvailableSessionFromSocket';
        // Denotes the end of the event CreateAvailableSessionFromSocket.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace SpeedIndex {
    interface b extends Base {
      args: {
      
      };
      id: string;
      name: 'Speed Index';
      // Denotes the beginning of the nestable async flow event SpeedIndex.
      ph: 'b';
    }
  
    interface e extends Base {
      args: {
      
      };
      id: string;
      name: 'Speed Index';
      // Denotes a step into the nestable async flow event SpeedIndex.
      ph: 'e';
    }
  }

  namespace Spellcheck {
    namespace Mojom {
      type SpellChecker = 
        TraceEvent.Spellcheck.Mojom.SpellChecker.X;
    
      type SpellCheckHost = 
        TraceEvent.Spellcheck.Mojom.SpellCheckHost.X;
    
      namespace SpellChecker {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'spellcheck.mojom.SpellChecker';
          // Denotes the end of the event SpellChecker.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace SpellCheckHost {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'spellcheck.mojom.SpellCheckHost';
          // Denotes the end of the event SpellCheckHost.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace SSL_CONNECT {
    interface b extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'SSL_CONNECT';
      // Denotes the beginning of the nestable async flow event SSL_CONNECT.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
        params: {
          cipher_suite: number;
          is_resumed: boolean;
          next_proto: string;
          version: string;
        };
        source_type: string;
      };
      id: string;
      name: 'SSL_CONNECT';
      // Denotes a step into the nestable async flow event SSL_CONNECT.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SSL_HANDSHAKE_MESSAGE_RECEIVED {
    interface n extends Base {
      args: {
        params: {
          bytes: string;
          type: number;
        };
        source_type: string;
      };
      id: string;
      name: 'SSL_HANDSHAKE_MESSAGE_RECEIVED';
      // Denotes the ending of the nestable async flow event SSL_HANDSHAKE_MESSAGE_RECEIVED.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SSL_HANDSHAKE_MESSAGE_SENT {
    interface n extends Base {
      args: {
        params: {
          bytes: string;
          type: number;
        };
        source_type: string;
      };
      id: string;
      name: 'SSL_HANDSHAKE_MESSAGE_SENT';
      // Denotes the ending of the nestable async flow event SSL_HANDSHAKE_MESSAGE_SENT.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SSL_SOCKET_BYTES_RECEIVED {
    interface n extends Base {
      args: {
        params: {
          byte_count: number;
        };
        source_type: string;
      };
      id: string;
      name: 'SSL_SOCKET_BYTES_RECEIVED';
      // Denotes the ending of the nestable async flow event SSL_SOCKET_BYTES_RECEIVED.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SSL_SOCKET_BYTES_SENT {
    interface n extends Base {
      args: {
        params: {
          byte_count: number;
        };
        source_type: string;
      };
      id: string;
      name: 'SSL_SOCKET_BYTES_SENT';
      // Denotes the ending of the nestable async flow event SSL_SOCKET_BYTES_SENT.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SSLClientSocketImpl {
    type DoHandshakeLoop = 
      TraceEvent.SSLClientSocketImpl.DoHandshakeLoop.X;
  
    namespace DoHandshakeLoop {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SSLClientSocketImpl::DoHandshakeLoop';
        // Denotes the end of the event DoHandshakeLoop.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace SSLConnectJob {
    type DoLoop = 
      TraceEvent.SSLConnectJob.DoLoop.X;
  
    type DoSSLConnect = 
      TraceEvent.SSLConnectJob.DoSSLConnect.X;
  
    namespace DoLoop {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SSLConnectJob::DoLoop';
        // Denotes the end of the event DoLoop.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DoSSLConnect {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SSLConnectJob::DoSSLConnect';
        // Denotes the end of the event DoSSLConnect.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace StackCpuSampling {
    interface I extends Base {
      args: {
        frames: string;
        thread_id: number;
      };
      name: 'StackCpuSampling';
      // Denotes an event StackCpuSampling. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace StackSamplingProfiler {
    type StackSamplingProfiler = 
      TraceEvent.StackSamplingProfiler.StackSamplingProfiler.X;
  
    type Start = 
      TraceEvent.StackSamplingProfiler.Start.X;
  
    type Started = 
      TraceEvent.StackSamplingProfiler.Started.X;
  
    namespace StackSamplingProfiler {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'StackSamplingProfiler::StackSamplingProfiler';
        // Denotes the end of the event StackSamplingProfiler.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Start {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'StackSamplingProfiler::Start';
        // Denotes the end of the event Start.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Started {
      interface X extends Base {
        args: {
          profiler_id: number;
        };
        // Duration.
        dur: number;
        name: 'StackSamplingProfiler::Started';
        // Denotes the end of the event Started.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace StartIdlePeriod {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'StartIdlePeriod';
      // Denotes the end of the event StartIdlePeriod.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Startup_metric_utils {
    namespace Mojom {
      type StartupMetricHost = 
        TraceEvent.Startup_metric_utils.Mojom.StartupMetricHost.X;
    
      namespace StartupMetricHost {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'startup_metric_utils.mojom.StartupMetricHost';
          // Denotes the end of the event StartupMetricHost.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace StructTraits {
    namespace CompositorFrame {
      type Read = 
        TraceEvent.StructTraits.CompositorFrame.Read.X;
    
      namespace Read {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'StructTraits::CompositorFrame::Read';
          // Denotes the end of the event Read.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  
    namespace RenderPass {
      type Read = 
        TraceEvent.StructTraits.RenderPass.Read.X;
    
      namespace Read {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'StructTraits::RenderPass::Read';
          // Denotes the end of the event Read.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  
    namespace TransferableResource {
      type Read = 
        TraceEvent.StructTraits.TransferableResource.Read.X;
    
      namespace Read {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'StructTraits::TransferableResource::Read';
          // Denotes the end of the event Read.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace StyleElement {
    type ProcessStyleSheet = 
      TraceEvent.StyleElement.ProcessStyleSheet.X;
  
    namespace ProcessStyleSheet {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'StyleElement::processStyleSheet';
        // Denotes the end of the event ProcessStyleSheet.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace StyleEngine {
    type ClearResolver = 
      TraceEvent.StyleEngine.ClearResolver.X;
  
    type ScheduleInvalidationsForRuleSets = 
      TraceEvent.StyleEngine.ScheduleInvalidationsForRuleSets.X;
  
    type UpdateActiveStyleSheets = 
      TraceEvent.StyleEngine.UpdateActiveStyleSheets.X;
  
    namespace ClearResolver {
      interface X extends Base {
        args: {
          frame: string;
        };
        // Duration.
        dur: number;
        name: 'StyleEngine::clearResolver';
        // Denotes the end of the event ClearResolver.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ScheduleInvalidationsForRuleSets {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'StyleEngine::scheduleInvalidationsForRuleSets';
        // Denotes the end of the event ScheduleInvalidationsForRuleSets.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UpdateActiveStyleSheets {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'StyleEngine::updateActiveStyleSheets';
        // Denotes the end of the event UpdateActiveStyleSheets.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace StyleRecalcInvalidationTracking {
    interface I extends Base {
      args: {
        data: {
          extraData: string;
          frame: string;
          nodeId: number;
          nodeName: string;
          reason: string;
          stackTrace?: {
            columnNumber: number;
            functionName: string;
            lineNumber: number;
            scriptId: string;
            url: string;
          }[];
        };
      };
      name: 'StyleRecalcInvalidationTracking';
      // Denotes an event StyleRecalcInvalidationTracking. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SubImage {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'SubImage';
      // Denotes the end of the event SubImage.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SubmitCompositorFrame {
    type TimeElapsed = 
      TraceEvent.SubmitCompositorFrame.TimeElapsed.I;
  
    namespace TimeElapsed {
      interface I extends Base {
        args: {
          'elapsed time:': number;
        };
        name: 'SubmitCompositorFrame::TimeElapsed';
        // Denotes an event TimeElapsed. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    interface f extends Base {
      args: {
      
      };
      id: string;
      name: 'SubmitCompositorFrame';
      // Denotes the ending of the async flow event SubmitCompositorFrame.
      ph: 'f';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface s extends Base {
      args: {
      
      };
      id: string;
      name: 'SubmitCompositorFrame';
      // Denotes the beginning of the async flow event SubmitCompositorFrame.
      ph: 's';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Submitrejectedtoevictedsurface {
    interface I extends Base {
      args: {
      
      };
      name: 'Submit rejected to evicted surface';
      // Denotes an event Submitrejectedtoevictedsurface. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SubresourceFilterMsg_SetRulesetForProcess {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'SubresourceFilterMsg_SetRulesetForProcess';
      // Denotes the end of the event SubresourceFilterMsg_SetRulesetForProcess.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SubresourceFilterSafeBrowsingActivationThrottle {
    type DoesMainFrameURLSatisfyActivationConditions = 
      TraceEvent.SubresourceFilterSafeBrowsingActivationThrottle.DoesMainFrameURLSatisfyActivationConditions.X;
  
    type GetHighestPriorityConfiguration = 
      TraceEvent.SubresourceFilterSafeBrowsingActivationThrottle.GetHighestPriorityConfiguration.X;
  
    type NotifyResult = 
      TraceEvent.SubresourceFilterSafeBrowsingActivationThrottle.NotifyResult.X;
  
    namespace DoesMainFrameURLSatisfyActivationConditions {
      interface X extends Base {
        args: {
          conditions: {
            activation_list: string;
            activation_scope: string;
            priority: number;
          };
          matched_list: string;
        };
        // Duration.
        dur: number;
        name: 'SubresourceFilterSafeBrowsingActivationThrottle::DoesMainFrameURLSatisfyActivationConditions';
        // Denotes the end of the event DoesMainFrameURLSatisfyActivationConditions.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GetHighestPriorityConfiguration {
      interface X extends Base {
        args: {
          selected_config: {
            activation_conditions?: {
              activation_list: string;
              activation_scope: string;
              priority: number;
            };
            activation_level?: string;
            performance_measurement_rate?: number;
            ruleset_flavor?: string;
          };
        };
        // Duration.
        dur: number;
        name: 'SubresourceFilterSafeBrowsingActivationThrottle::GetHighestPriorityConfiguration';
        // Denotes the end of the event GetHighestPriorityConfiguration.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace NotifyResult {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SubresourceFilterSafeBrowsingActivationThrottle::NotifyResult';
        // Denotes the end of the event NotifyResult.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace SubresourceFilterSBCheck {
    interface F extends Base {
      args: {
        check_result: {
          'check_time (us)': number;
          finished: boolean;
          request_id: number;
          threat_metadata: {
            popuplation_id: string;
            subresource_filter_match: {
            
            };
            threat_pattern_type: number;
          };
          threat_type: number;
        };
      };
      id: string;
      name: 'SubresourceFilterSBCheck';
      // Denotes the ending of the async event SubresourceFilterSBCheck.
      ph: 'F';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface S extends Base {
      args: {
        check_result: {
        
        };
      };
      id: string;
      name: 'SubresourceFilterSBCheck';
      // Denotes the beginning of the async event SubresourceFilterSBCheck.
      ph: 'S';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Subthread_default_tq {
    interface C extends Base {
      args: {
        value: number;
      };
      name: 'subthread_default_tq';
      // Denotes a counter for the event Subthread_default_tq.
      ph: 'C';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Surface {
    type ActivateFrame = 
      TraceEvent.Surface.ActivateFrame.X;
  
    type OnDeadline = 
      TraceEvent.Surface.OnDeadline.X;
  
    namespace ActivateFrame {
      interface X extends Base {
        args: {
          FrameSinkId: string;
        };
        // Duration.
        dur: number;
        name: 'Surface::ActivateFrame';
        // Denotes the end of the event ActivateFrame.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnDeadline {
      interface X extends Base {
        args: {
          FrameSinkId: string;
        };
        // Duration.
        dur: number;
        name: 'Surface::OnDeadline';
        // Denotes the end of the event OnDeadline.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    interface F extends Base {
      args: {
        surface_info: string;
      };
      id: string;
      name: 'Surface';
      // Denotes the ending of the async event Surface.
      ph: 'F';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface S extends Base {
      args: {
        surface_info: string;
      };
      id: string;
      name: 'Surface';
      // Denotes the beginning of the async event Surface.
      ph: 'S';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SurfaceLayer {
    type PushPropertiesTo = 
      TraceEvent.SurfaceLayer.PushPropertiesTo.X;
  
    namespace PushPropertiesTo {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SurfaceLayer::PushPropertiesTo';
        // Denotes the end of the event PushPropertiesTo.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace SurfaceManager {
    type GarbageCollectSurfaces = 
      TraceEvent.SurfaceManager.GarbageCollectSurfaces.X;
  
    namespace GarbageCollectSurfaces {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'SurfaceManager::GarbageCollectSurfaces';
        // Denotes the end of the event GarbageCollectSurfaces.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace SwapBuffers {
    interface I extends Base {
      args: {
        GLImpl: number;
        width: number;
      };
      name: 'SwapBuffers';
      // Denotes an event SwapBuffers. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Swapskipped {
    interface I extends Base {
      args: {
      
      };
      name: 'Swap skipped.';
      // Denotes an event Swapskipped. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Swapthrottled {
    interface I extends Base {
      args: {
      
      };
      name: 'Swap throttled';
      // Denotes an event Swapthrottled. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace SyncChannel {
    type Send = 
      TraceEvent.SyncChannel.Send.f |
      TraceEvent.SyncChannel.Send.X;
  
    namespace Send {
      interface f extends Base {
        args: {
        
        };
        id: string;
        name: 'SyncChannel::Send';
        // Denotes the ending of the async flow event Send.
        ph: 'f';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface X extends Base {
        args: {
          class: number;
          line: number;
        };
        // Duration.
        dur: number;
        name: 'SyncChannel::Send';
        // Denotes the end of the event Send.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SyncContext {
      type TryToUnblockListener = 
        TraceEvent.SyncChannel.SyncContext.TryToUnblockListener.s;
    
      namespace TryToUnblockListener {
        interface s extends Base {
          args: {
          
          };
          id: string;
          name: 'SyncChannel::SyncContext::TryToUnblockListener';
          // Denotes the beginning of the async flow event TryToUnblockListener.
          ph: 's';
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace TabManager {
    type LoadNextBackgroundTabIfNeeded = 
      TraceEvent.TabManager.LoadNextBackgroundTabIfNeeded.I;
  
    namespace LoadNextBackgroundTabIfNeeded {
      interface I extends Base {
        args: {
          data: {
            background_tab_loading_mode: number;
            num_of_loading_contents: number;
            num_of_pending_navigations: number;
          };
          is_force_load_timer_running: boolean;
        };
        name: 'TabManager::LoadNextBackgroundTabIfNeeded';
        // Denotes an event LoadNextBackgroundTabIfNeeded. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace TabSwitching {
    type Latency = 
      TraceEvent.TabSwitching.Latency.F |
      TraceEvent.TabSwitching.Latency.S;
  
    namespace Latency {
      interface F extends Base {
        args: {
          latency: number;
        };
        id2: {
          local: string;
        };
        name: 'TabSwitching::Latency';
        // Denotes the ending of the async event Latency.
        ph: 'F';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface S extends Base {
        args: {
        
        };
        id2: {
          local: string;
        };
        name: 'TabSwitching::Latency';
        // Denotes the beginning of the async event Latency.
        ph: 'S';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace TabSwitchVisibilityRequest {
    interface F extends Base {
      args: {
      
      };
      id: string;
      name: 'TabSwitchVisibilityRequest';
      // Denotes the ending of the async event TabSwitchVisibilityRequest.
      ph: 'F';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface S extends Base {
      args: {
      
      };
      id: string;
      name: 'TabSwitchVisibilityRequest';
      // Denotes the beginning of the async event TabSwitchVisibilityRequest.
      ph: 'S';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace TaskGraphRunner {
    type RunTask = 
      TraceEvent.TaskGraphRunner.RunTask.X;
  
    namespace RunTask {
      interface X extends Base {
        args: {
          source_frame_number_: number;
        };
        // Duration.
        dur: number;
        name: 'TaskGraphRunner::RunTask';
        // Denotes the end of the event RunTask.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace TaskQueueManager {
    type ProcessTaskFromWorkQueue = 
      TraceEvent.TaskQueueManager.ProcessTaskFromWorkQueue.X;
  
    namespace ProcessTaskFromWorkQueue {
      interface X extends Base {
        args: {
          src_file: string;
          src_func: string;
        };
        // Duration.
        dur?: number;
        name: 'TaskQueueManager::ProcessTaskFromWorkQueue';
        // Denotes the end of the event ProcessTaskFromWorkQueue.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace TaskQueueThrottler_TaskQueueThrottled {
    interface X extends Base {
      args: {
        task_queue: string;
      };
      // Duration.
      dur: number;
      name: 'TaskQueueThrottler_TaskQueueThrottled';
      // Denotes the end of the event TaskQueueThrottler_TaskQueueThrottled.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace TaskQueueThrottler_TaskQueueUnthrottled {
    interface X extends Base {
      args: {
        task_queue: string;
      };
      // Duration.
      dur: number;
      name: 'TaskQueueThrottler_TaskQueueUnthrottled';
      // Denotes the end of the event TaskQueueThrottler_TaskQueueUnthrottled.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace TaskQueueThrottler {
    type MaybeSchedulePumpThrottledTasks = 
      TraceEvent.TaskQueueThrottler.MaybeSchedulePumpThrottledTasks.X;
  
    type OnQueueNextWakeUpChanged = 
      TraceEvent.TaskQueueThrottler.OnQueueNextWakeUpChanged.X;
  
    type PumpThrottledTasks = 
      TraceEvent.TaskQueueThrottler.PumpThrottledTasks.X;
  
    namespace MaybeSchedulePumpThrottledTasks {
      interface X extends Base {
        args: {
          delay_till_next_pump_ms: number;
        };
        // Duration.
        dur: number;
        name: 'TaskQueueThrottler::MaybeSchedulePumpThrottledTasks';
        // Denotes the end of the event MaybeSchedulePumpThrottledTasks.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnQueueNextWakeUpChanged {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'TaskQueueThrottler::OnQueueNextWakeUpChanged';
        // Denotes the end of the event OnQueueNextWakeUpChanged.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PumpThrottledTasks {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'TaskQueueThrottler::PumpThrottledTasks';
        // Denotes the end of the event PumpThrottledTasks.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace TaskSchedulerPostTask {
    interface X extends Base {
      args: {
      
      };
      bind_id: string;
      // Duration.
      dur: number;
      flow_in?: boolean;
      flow_out?: boolean;
      id: string;
      name: 'TaskScheduler PostTask';
      // Denotes the end of the event TaskSchedulerPostTask.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace TaskSchedulerRunTask {
    interface X extends Base {
      args: {
        src_file: string;
        src_func: string;
      };
      // Duration.
      dur?: number;
      name: 'TaskScheduler RunTask';
      // Denotes the end of the event TaskSchedulerRunTask.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace TaskSetFinishedTaskImpl {
    type RunOnWorkerThread = 
      TraceEvent.TaskSetFinishedTaskImpl.RunOnWorkerThread.X;
  
    namespace RunOnWorkerThread {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'TaskSetFinishedTaskImpl::RunOnWorkerThread';
        // Denotes the end of the event RunOnWorkerThread.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace TaskTracker {
    type RunTask = 
      TraceEvent.TaskTracker.RunTask.X;
  
    namespace RunTask {
      interface X extends Base {
        args: {
          task_info: {
            execution_mode: string;
            sequence_token?: number;
            task_priority: string;
          };
        };
        // Duration.
        dur?: number;
        name: 'TaskTracker::RunTask';
        // Denotes the end of the event RunTask.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace TCP_CLIENT_SOCKET_POOL_REQUESTED_SOCKET {
    interface n extends Base {
      args: {
        params: {
          group: string;
        };
        source_type: string;
      };
      id: string;
      name: 'TCP_CLIENT_SOCKET_POOL_REQUESTED_SOCKET';
      // Denotes the ending of the nestable async flow event TCP_CLIENT_SOCKET_POOL_REQUESTED_SOCKET.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace TCP_CONNECT_ATTEMPT {
    interface b extends Base {
      args: {
        params: {
          address: string;
        };
        source_type: string;
      };
      id: string;
      name: 'TCP_CONNECT_ATTEMPT';
      // Denotes the beginning of the nestable async flow event TCP_CONNECT_ATTEMPT.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'TCP_CONNECT_ATTEMPT';
      // Denotes a step into the nestable async flow event TCP_CONNECT_ATTEMPT.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace TCP_CONNECT {
    interface b extends Base {
      args: {
        params: {
          address_list: {
            '0': string;
            '1': string;
            '2': string;
            '3': string;
            '4': string;
            '5': string;
            '6': string;
            '7': string;
            '8': string;
            '9': string;
            '10': string;
            '11': string;
            '12': string;
            '13': string;
            '14': string;
            '15': string;
            '16'?: string;
            '17'?: string;
          }[];
          canonical_name: string;
        };
        source_type: string;
      };
      id: string;
      name: 'TCP_CONNECT';
      // Denotes the beginning of the nestable async flow event TCP_CONNECT.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
        params: {
          source_address: string;
        };
        source_type: string;
      };
      id: string;
      name: 'TCP_CONNECT';
      // Denotes a step into the nestable async flow event TCP_CONNECT.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace TessellatingPathOp {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'TessellatingPathOp';
      // Denotes the end of the event TessellatingPathOp.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Textfield {
    type PaintTextAndCursor = 
      TraceEvent.Textfield.PaintTextAndCursor.X;
  
    namespace PaintTextAndCursor {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Textfield::PaintTextAndCursor';
        // Denotes the end of the event PaintTextAndCursor.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace TextureManager {
    type ValidateAndDoTexSubImage = 
      TraceEvent.TextureManager.ValidateAndDoTexSubImage.X;
  
    namespace ValidateAndDoTexSubImage {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'TextureManager::ValidateAndDoTexSubImage';
        // Denotes the end of the event ValidateAndDoTexSubImage.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace TextureOp {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'TextureOp';
      // Denotes the end of the event TextureOp.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Thread_name {
    interface M extends Base {
      args: {
        name: string;
      };
      name: 'thread_name';
      // Denotes metadata for the event Thread_name.
      ph: 'M';
    }
  }

  namespace Thread_sort_index {
    interface M extends Base {
      args: {
        sort_index: number;
      };
      name: 'thread_sort_index';
      // Denotes metadata for the event Thread_sort_index.
      ph: 'M';
    }
  }

  namespace ThreadControllerImpl {
    type DoWork = 
      TraceEvent.ThreadControllerImpl.DoWork.X;
  
    type RunTask = 
      TraceEvent.ThreadControllerImpl.RunTask.X;
  
    namespace DoWork {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur?: number;
        name: 'ThreadControllerImpl::DoWork';
        // Denotes the end of the event DoWork.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RunTask {
      interface X extends Base {
        args: {
          src_file?: string;
          src_func?: string;
        };
        bind_id?: string;
        // Duration.
        dur?: number;
        flow_in?: boolean;
        id?: string;
        name: 'ThreadControllerImpl::RunTask';
        // Denotes the end of the event RunTask.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ScheduleWork {
      type PostTask = 
        TraceEvent.ThreadControllerImpl.ScheduleWork.PostTask.X;
    
      namespace PostTask {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'ThreadControllerImpl::ScheduleWork::PostTask';
          // Denotes the end of the event PostTask.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace ThreadProxy {
    type BeginMainFrame = 
      TraceEvent.ThreadProxy.BeginMainFrame.B |
      TraceEvent.ThreadProxy.BeginMainFrame.E;
  
    type ScheduledActionSendBeginMainFrame = 
      TraceEvent.ThreadProxy.ScheduledActionSendBeginMainFrame.B |
      TraceEvent.ThreadProxy.ScheduledActionSendBeginMainFrame.E;
  
    namespace BeginMainFrame {
      interface B extends Base {
        args: {
          begin_frame_id: number;
        };
        name: 'ThreadProxy::BeginMainFrame';
        // Denotes the beginning of the event BeginMainFrame.
        ph: 'B';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface E extends Base {
        args: {
        
        };
        name: 'ThreadProxy::BeginMainFrame';
        // Denotes the ending of the event BeginMainFrame.
        ph: 'E';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ScheduledActionSendBeginMainFrame {
      interface B extends Base {
        args: {
          begin_frame_id: number;
        };
        name: 'ThreadProxy::ScheduledActionSendBeginMainFrame';
        // Denotes the beginning of the event ScheduledActionSendBeginMainFrame.
        ph: 'B';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface E extends Base {
        args: {
        
        };
        name: 'ThreadProxy::ScheduledActionSendBeginMainFrame';
        // Denotes the ending of the event ScheduledActionSendBeginMainFrame.
        ph: 'E';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ThreadState {
    type HeapEstimatedSizeKB = 
      TraceEvent.ThreadState.HeapEstimatedSizeKB.C;
  
    type HeapGrowingRate = 
      TraceEvent.ThreadState.HeapGrowingRate.C;
  
    type PartitionAllocEstimatedSizeKB = 
      TraceEvent.ThreadState.PartitionAllocEstimatedSizeKB.C;
  
    type PartitionAllocGrowingRate = 
      TraceEvent.ThreadState.PartitionAllocGrowingRate.C;
  
    type PerformIdleLazySweep = 
      TraceEvent.ThreadState.PerformIdleLazySweep.X;
  
    namespace HeapEstimatedSizeKB {
      interface C extends Base {
        args: {
          value: number;
        };
        name: 'ThreadState::heapEstimatedSizeKB';
        // Denotes a counter for the event HeapEstimatedSizeKB.
        ph: 'C';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace HeapGrowingRate {
      interface C extends Base {
        args: {
          value: number;
        };
        name: 'ThreadState::heapGrowingRate';
        // Denotes a counter for the event HeapGrowingRate.
        ph: 'C';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PartitionAllocEstimatedSizeKB {
      interface C extends Base {
        args: {
          value: number;
        };
        name: 'ThreadState::partitionAllocEstimatedSizeKB';
        // Denotes a counter for the event PartitionAllocEstimatedSizeKB.
        ph: 'C';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PartitionAllocGrowingRate {
      interface C extends Base {
        args: {
          value: number;
        };
        name: 'ThreadState::partitionAllocGrowingRate';
        // Denotes a counter for the event PartitionAllocGrowingRate.
        ph: 'C';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PerformIdleLazySweep {
      interface X extends Base {
        args: {
          idleDeltaInSeconds: number;
        };
        // Duration.
        dur: number;
        name: 'ThreadState::performIdleLazySweep';
        // Denotes the end of the event PerformIdleLazySweep.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace TileManager {
    type AssignGpuMemorytileviolatesmemorypolicy = 
      TraceEvent.TileManager.AssignGpuMemorytileviolatesmemorypolicy.I;
  
    type AssignGpuMemoryToTiles = 
      TraceEvent.TileManager.AssignGpuMemoryToTiles.B |
      TraceEvent.TileManager.AssignGpuMemoryToTiles.E;
  
    type CheckForCompletedTasks = 
      TraceEvent.TileManager.CheckForCompletedTasks.X;
  
    type CheckForCompletedTasksFinished = 
      TraceEvent.TileManager.CheckForCompletedTasksFinished.I;
  
    type CheckPendingGpuWorkAndIssueSignals = 
      TraceEvent.TileManager.CheckPendingGpuWorkAndIssueSignals.X;
  
    type CreateRasterTask = 
      TraceEvent.TileManager.CreateRasterTask.X;
  
    type DidFinishRunningAllTileTasks = 
      TraceEvent.TileManager.DidFinishRunningAllTileTasks.X;
  
    type DidFinishRunningTileTasksRequiredForActivation = 
      TraceEvent.TileManager.DidFinishRunningTileTasksRequiredForActivation.X;
  
    type DidFinishRunningTileTasksRequiredForDraw = 
      TraceEvent.TileManager.DidFinishRunningTileTasksRequiredForDraw.X;
  
    type FlushAndIssueSignals = 
      TraceEvent.TileManager.FlushAndIssueSignals.X;
  
    type IsReadyToActivate = 
      TraceEvent.TileManager.IsReadyToActivate.X;
  
    type IsReadyToDraw = 
      TraceEvent.TileManager.IsReadyToDraw.X;
  
    type IssueSignalsalltiletaskscompleted = 
      TraceEvent.TileManager.IssueSignalsalltiletaskscompleted.X;
  
    type IssueSignalsreadytoactivate = 
      TraceEvent.TileManager.IssueSignalsreadytoactivate.X;
  
    type IssueSignalsreadytodraw = 
      TraceEvent.TileManager.IssueSignalsreadytodraw.X;
  
    type PrepareTiles = 
      TraceEvent.TileManager.PrepareTiles.X;
  
    type ScheduleTasks = 
      TraceEvent.TileManager.ScheduleTasks.X;
  
    namespace AssignGpuMemorytileviolatesmemorypolicy {
      interface I extends Base {
        args: {
        
        };
        name: 'TileManager::AssignGpuMemory tile violates memory policy';
        // Denotes an event AssignGpuMemorytileviolatesmemorypolicy. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace AssignGpuMemoryToTiles {
      interface B extends Base {
        args: {
        
        };
        name: 'TileManager::AssignGpuMemoryToTiles';
        // Denotes the beginning of the event AssignGpuMemoryToTiles.
        ph: 'B';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface E extends Base {
        args: {
          all_tiles_that_need_to_be_rasterized_are_scheduled: boolean;
          had_enough_memory_to_schedule_tiles_needed_now: boolean;
        };
        name: 'TileManager::AssignGpuMemoryToTiles';
        // Denotes the ending of the event AssignGpuMemoryToTiles.
        ph: 'E';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CheckForCompletedTasks {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'TileManager::CheckForCompletedTasks';
        // Denotes the end of the event CheckForCompletedTasks.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CheckForCompletedTasksFinished {
      interface I extends Base {
        args: {
          stats: {
            canceled_count: number;
            completed_count: number;
          };
        };
        name: 'TileManager::CheckForCompletedTasksFinished';
        // Denotes an event CheckForCompletedTasksFinished. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CheckPendingGpuWorkAndIssueSignals {
      interface X extends Base {
        args: {
          pending_gpu_work_tiles: number;
          tree_priority: string;
        };
        // Duration.
        dur: number;
        name: 'TileManager::CheckPendingGpuWorkAndIssueSignals';
        // Denotes the end of the event CheckPendingGpuWorkAndIssueSignals.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CreateRasterTask {
      interface X extends Base {
        args: {
          Tile?: number;
        };
        // Duration.
        dur: number;
        name: 'TileManager::CreateRasterTask';
        // Denotes the end of the event CreateRasterTask.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidFinishRunningAllTileTasks {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'TileManager::DidFinishRunningAllTileTasks';
        // Denotes the end of the event DidFinishRunningAllTileTasks.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidFinishRunningTileTasksRequiredForActivation {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'TileManager::DidFinishRunningTileTasksRequiredForActivation';
        // Denotes the end of the event DidFinishRunningTileTasksRequiredForActivation.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidFinishRunningTileTasksRequiredForDraw {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'TileManager::DidFinishRunningTileTasksRequiredForDraw';
        // Denotes the end of the event DidFinishRunningTileTasksRequiredForDraw.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace FlushAndIssueSignals {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'TileManager::FlushAndIssueSignals';
        // Denotes the end of the event FlushAndIssueSignals.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace IsReadyToActivate {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'TileManager::IsReadyToActivate';
        // Denotes the end of the event IsReadyToActivate.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace IsReadyToDraw {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'TileManager::IsReadyToDraw';
        // Denotes the end of the event IsReadyToDraw.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace IssueSignalsalltiletaskscompleted {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'TileManager::IssueSignals - all tile tasks completed';
        // Denotes the end of the event IssueSignalsalltiletaskscompleted.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace IssueSignalsreadytoactivate {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'TileManager::IssueSignals - ready to activate';
        // Denotes the end of the event IssueSignalsreadytoactivate.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace IssueSignalsreadytodraw {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'TileManager::IssueSignals - ready to draw';
        // Denotes the end of the event IssueSignalsreadytodraw.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PrepareTiles {
      interface X extends Base {
        args: {
          prepare_tiles_id: number;
        };
        // Duration.
        dur: number;
        name: 'TileManager::PrepareTiles';
        // Denotes the end of the event PrepareTiles.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ScheduleTasks {
      interface X extends Base {
        args: {
          count: number;
        };
        // Duration.
        dur: number;
        name: 'TileManager::ScheduleTasks';
        // Denotes the end of the event ScheduleTasks.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace TileTaskManagerImpl {
    type CheckForCompletedTasks = 
      TraceEvent.TileTaskManagerImpl.CheckForCompletedTasks.X;
  
    type ScheduleTasks = 
      TraceEvent.TileTaskManagerImpl.ScheduleTasks.X;
  
    type Shutdown = 
      TraceEvent.TileTaskManagerImpl.Shutdown.X;
  
    namespace CheckForCompletedTasks {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'TileTaskManagerImpl::CheckForCompletedTasks';
        // Denotes the end of the event CheckForCompletedTasks.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ScheduleTasks {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'TileTaskManagerImpl::ScheduleTasks';
        // Denotes the end of the event ScheduleTasks.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Shutdown {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'TileTaskManagerImpl::Shutdown';
        // Denotes the end of the event Shutdown.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace TimeoutMonitor {
    type Restart = 
      TraceEvent.TimeoutMonitor.Restart.I;
  
    type Start = 
      TraceEvent.TimeoutMonitor.Start.I;
  
    type Stop = 
      TraceEvent.TimeoutMonitor.Stop.I;
  
    type TimeOutHandler = 
      TraceEvent.TimeoutMonitor.TimeOutHandler.X;
  
    namespace Restart {
      interface I extends Base {
        args: {
        
        };
        name: 'TimeoutMonitor::Restart';
        // Denotes an event Restart. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Start {
      interface I extends Base {
        args: {
        
        };
        name: 'TimeoutMonitor::Start';
        // Denotes an event Start. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Stop {
      interface I extends Base {
        args: {
        
        };
        name: 'TimeoutMonitor::Stop';
        // Denotes an event Stop. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace TimeOutHandler {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'TimeoutMonitor::TimeOutHandler';
        // Denotes the end of the event TimeOutHandler.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    interface F extends Base {
      args: {
        result: string;
      };
      id: string;
      name: 'TimeoutMonitor';
      // Denotes the ending of the async event TimeoutMonitor.
      ph: 'F';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface S extends Base {
      args: {
      
      };
      id: string;
      name: 'TimeoutMonitor';
      // Denotes the beginning of the async event TimeoutMonitor.
      ph: 'S';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace TimerBase {
    type Run = 
      TraceEvent.TimerBase.Run.X;
  
    namespace Run {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'TimerBase::run';
        // Denotes the end of the event Run.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace TimerFire {
    interface X extends Base {
      args: {
        data: {
          frame: string;
          timerId: number;
        };
      };
      // Duration.
      dur: number;
      name: 'TimerFire';
      // Denotes the end of the event TimerFire.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace TimerInstall {
    interface I extends Base {
      args: {
        data: {
          frame: string;
          singleShot: boolean;
          stackTrace?: {
            columnNumber: number;
            functionName: string;
            lineNumber: number;
            scriptId: string;
            url: string;
          }[];
          timeout: number;
          timerId: number;
        };
      };
      name: 'TimerInstall';
      // Denotes an event TimerInstall. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace TimerRemove {
    interface I extends Base {
      args: {
        data: {
          frame: string;
          stackTrace?: {
            columnNumber: number;
            functionName: string;
            lineNumber: number;
            scriptId: string;
            url: string;
          }[];
          timerId: number;
        };
      };
      name: 'TimerRemove';
      // Denotes an event TimerRemove. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace TimeStamp {
    interface I extends Base {
      args: {
        data: {
          frame: string;
          message: string;
        };
      };
      name: 'TimeStamp';
      // Denotes an event TimeStamp. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace TimeToDomReady {
    interface b extends Base {
      args: {
      
      };
      id: string;
      name: 'timeToDomReady';
      // Denotes the beginning of the nestable async flow event TimeToDomReady.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
      
      };
      id: string;
      name: 'timeToDomReady';
      // Denotes a step into the nestable async flow event TimeToDomReady.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace TimeToInteractive {
    interface b extends Base {
      args: {
      
      };
      id: string;
      name: 'timeToInteractive';
      // Denotes the beginning of the nestable async flow event TimeToInteractive.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
      
      };
      id: string;
      name: 'timeToInteractive';
      // Denotes a step into the nestable async flow event TimeToInteractive.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace TimeToZonesAndDomReady {
    interface b extends Base {
      args: {
      
      };
      id: string;
      name: 'timeToZonesAndDomReady';
      // Denotes the beginning of the nestable async flow event TimeToZonesAndDomReady.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
      
      };
      id: string;
      name: 'timeToZonesAndDomReady';
      // Denotes a step into the nestable async flow event TimeToZonesAndDomReady.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace TimeToZonesComplete {
    interface b extends Base {
      args: {
      
      };
      id: string;
      name: 'timeToZonesComplete';
      // Denotes the beginning of the nestable async flow event TimeToZonesComplete.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
      
      };
      id: string;
      name: 'timeToZonesComplete';
      // Denotes a step into the nestable async flow event TimeToZonesComplete.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace TopLevel {
    interface O extends Base {
      args: {
        snapshot: {
        
        };
      };
      id: string;
      name: 'TopLevel';
      // Denotes a snapshot object of the event TopLevel.
      ph: 'O';
      scope: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ToSpaceUpdatingItem {
    type ProcessVisitAll = 
      TraceEvent.ToSpaceUpdatingItem.ProcessVisitAll.X;
  
    namespace ProcessVisitAll {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ToSpaceUpdatingItem::ProcessVisitAll';
        // Denotes the end of the event ProcessVisitAll.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Trace_buffer_overflowed {
    interface M extends Base {
      args: {
        overflowed_at_ts: number;
      };
      name: 'trace_buffer_overflowed';
      // Denotes metadata for the event Trace_buffer_overflowed.
      ph: 'M';
    }
  }

  namespace Tracing {
    namespace Mojom {
      type Agent = 
        TraceEvent.Tracing.Mojom.Agent.X;
    
      type AgentRegistry = 
        TraceEvent.Tracing.Mojom.AgentRegistry.X;
    
      type Coordinator = 
        TraceEvent.Tracing.Mojom.Coordinator.X;
    
      type PerfettoService = 
        TraceEvent.Tracing.Mojom.PerfettoService.X;
    
      type ProducerHost = 
        TraceEvent.Tracing.Mojom.ProducerHost.X;
    
      namespace Agent {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur?: number;
          name: 'tracing.mojom.Agent';
          // Denotes the end of the event Agent.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace AgentRegistry {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'tracing.mojom.AgentRegistry';
          // Denotes the end of the event AgentRegistry.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace Coordinator {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'tracing.mojom.Coordinator';
          // Denotes the end of the event Coordinator.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace PerfettoService {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'tracing.mojom.PerfettoService';
          // Denotes the end of the event PerfettoService.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace ProducerHost {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'tracing.mojom.ProducerHost';
          // Denotes the end of the event ProducerHost.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace TracingHostMsg_ChildSupportsTracing {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'TracingHostMsg_ChildSupportsTracing';
      // Denotes the end of the event TracingHostMsg_ChildSupportsTracing.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace TracingMsg_SetTracingProcessId {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'TracingMsg_SetTracingProcessId';
      // Denotes the end of the event TracingMsg_SetTracingProcessId.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace TracingSessionIdForWorker {
    interface I extends Base {
      args: {
        data: {
          frame: string;
          url: string;
          workerId: string;
          workerThreadId: number;
        };
      };
      name: 'TracingSessionIdForWorker';
      // Denotes an event TracingSessionIdForWorker. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace TracingStartedInBrowser {
    interface I extends Base {
      args: {
        data: {
          frameTreeNodeId: number;
          frames: {
            frame: string;
            name: string;
            processId: number;
            url: string;
          }[];
          persistentIds: boolean;
        };
      };
      name: 'TracingStartedInBrowser';
      // Denotes an event TracingStartedInBrowser. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace TracingStartedInPage {
    interface I extends Base {
      args: {
        data: {
          page: string;
          sessionId: string;
        };
      };
      name: 'TracingStartedInPage';
      // Denotes an event TracingStartedInPage. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace TransferBuffer {
    type Free = 
      TraceEvent.TransferBuffer.Free.X;
  
    namespace Free {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'TransferBuffer::Free';
        // Denotes the end of the event Free.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace TransfersBytesPendingOnDisk {
    interface C extends Base {
      args: {
        value: number;
      };
      name: 'TransfersBytesPendingOnDisk';
      // Denotes a counter for the event TransfersBytesPendingOnDisk.
      ph: 'C';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace TransfersPendingOnDisk {
    interface C extends Base {
      args: {
        value: number;
      };
      name: 'TransfersPendingOnDisk';
      // Denotes a counter for the event TransfersPendingOnDisk.
      ph: 'C';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Translate {
    namespace Mojom {
      type ContentTranslateDriver = 
        TraceEvent.Translate.Mojom.ContentTranslateDriver.X;
    
      namespace ContentTranslateDriver {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'translate.mojom.ContentTranslateDriver';
          // Denotes the end of the event ContentTranslateDriver.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace TransportConnectJob {
    type DoResolveHostComplete = 
      TraceEvent.TransportConnectJob.DoResolveHostComplete.X;
  
    namespace DoResolveHostComplete {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'TransportConnectJob::DoResolveHostComplete';
        // Denotes the end of the event DoResolveHostComplete.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace TreeSynchronizer {
    type SynchronizeTrees = 
      TraceEvent.TreeSynchronizer.SynchronizeTrees.X;
  
    namespace PushLayerPropertiesTo {
      type Impl = 
        TraceEvent.TreeSynchronizer.PushLayerPropertiesTo.Impl.X;
    
      type Main = 
        TraceEvent.TreeSynchronizer.PushLayerPropertiesTo.Main.X;
    
      namespace Impl {
        interface X extends Base {
          args: {
            layer_count: number;
          };
          // Duration.
          dur: number;
          name: 'TreeSynchronizer::PushLayerPropertiesTo.Impl';
          // Denotes the end of the event Impl.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace Main {
        interface X extends Base {
          args: {
            layer_count: number;
          };
          // Duration.
          dur: number;
          name: 'TreeSynchronizer::PushLayerPropertiesTo.Main';
          // Denotes the end of the event Main.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  
    namespace SynchronizeTrees {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'TreeSynchronizer::SynchronizeTrees';
        // Denotes the end of the event SynchronizeTrees.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace TrianglesDrawn {
    interface C extends Base {
      args: {
        value: number;
      };
      name: 'Triangles Drawn';
      // Denotes a counter for the event TrianglesDrawn.
      ph: 'C';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace UDP_BYTES_RECEIVED {
    interface n extends Base {
      args: {
        params: {
          address: string;
          byte_count: number;
        };
        source_type: string;
      };
      id: string;
      name: 'UDP_BYTES_RECEIVED';
      // Denotes the ending of the nestable async flow event UDP_BYTES_RECEIVED.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace UDP_BYTES_SENT {
    interface n extends Base {
      args: {
        params: {
          byte_count: number;
        };
        source_type: string;
      };
      id: string;
      name: 'UDP_BYTES_SENT';
      // Denotes the ending of the nestable async flow event UDP_BYTES_SENT.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace UDP_CONNECT {
    interface b extends Base {
      args: {
        params: {
          address: string;
        };
        source_type: string;
      };
      id: string;
      name: 'UDP_CONNECT';
      // Denotes the beginning of the nestable async flow event UDP_CONNECT.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'UDP_CONNECT';
      // Denotes a step into the nestable async flow event UDP_CONNECT.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace UDP_LOCAL_ADDRESS {
    interface n extends Base {
      args: {
        params: {
          address: string;
        };
        source_type: string;
      };
      id: string;
      name: 'UDP_LOCAL_ADDRESS';
      // Denotes the ending of the nestable async flow event UDP_LOCAL_ADDRESS.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace UDPSocketPosix {
    namespace ReadWatcher {
      type OnFileCanReadWithoutBlocking = 
        TraceEvent.UDPSocketPosix.ReadWatcher.OnFileCanReadWithoutBlocking.X;
    
      namespace OnFileCanReadWithoutBlocking {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'UDPSocketPosix::ReadWatcher::OnFileCanReadWithoutBlocking';
          // Denotes the end of the event OnFileCanReadWithoutBlocking.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace Ukm {
    namespace Mojom {
      type UkmRecorderInterface = 
        TraceEvent.Ukm.Mojom.UkmRecorderInterface.X;
    
      namespace UkmRecorderInterface {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'ukm.mojom.UkmRecorderInterface';
          // Denotes the end of the event UkmRecorderInterface.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace Unknowninterface {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'unknown interface';
      // Denotes the end of the event Unknowninterface.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace UnloadEventEnd {
    interface R extends Base {
      args: {
        frame: string;
      };
      name: 'unloadEventEnd';
      // Denotes a mark of the event UnloadEventEnd.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace UnloadEventStart {
    interface R extends Base {
      args: {
        frame: string;
      };
      name: 'unloadEventStart';
      // Denotes a mark of the event UnloadEventStart.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace UpdateCounters {
    interface I extends Base {
      args: {
        data: {
          documents: number;
          jsEventListeners: number;
          jsHeapSizeUsed: number;
          nodes: number;
        };
      };
      name: 'UpdateCounters';
      // Denotes an event UpdateCounters. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace UpdateLayer {
    interface B extends Base {
      args: {
        layerId: number;
        layerTreeId: number;
      };
      name: 'UpdateLayer';
      // Denotes the beginning of the event UpdateLayer.
      ph: 'B';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface E extends Base {
      args: {
      
      };
      name: 'UpdateLayer';
      // Denotes the ending of the event UpdateLayer.
      ph: 'E';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace UpdateLayerTree {
    interface X extends Base {
      args: {
        data: {
          frame: string;
        };
      };
      // Duration.
      dur: number;
      name: 'UpdateLayerTree';
      // Denotes the end of the event UpdateLayerTree.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace UpdateLayoutTree {
    interface B extends Base {
      args: {
        beginData: {
          frame: string;
          stackTrace?: {
            columnNumber: number;
            functionName: string;
            lineNumber: number;
            scriptId: string;
            url: string;
          }[];
        };
      };
      name: 'UpdateLayoutTree';
      // Denotes the beginning of the event UpdateLayoutTree.
      ph: 'B';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface E extends Base {
      args: {
        elementCount: number;
      };
      name: 'UpdateLayoutTree';
      // Denotes the ending of the event UpdateLayoutTree.
      ph: 'E';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace UpdateLongIdlePeriodStateAfterIdleTask {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'UpdateLongIdlePeriodStateAfterIdleTask';
      // Denotes the end of the event UpdateLongIdlePeriodStateAfterIdleTask.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace UpdateStateFromAnimationDrivers {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'UpdateStateFromAnimationDrivers';
      // Denotes the end of the event UpdateStateFromAnimationDrivers.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace UPLOAD_DATA_STREAM_INIT {
    interface b extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'UPLOAD_DATA_STREAM_INIT';
      // Denotes the beginning of the nestable async flow event UPLOAD_DATA_STREAM_INIT.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
        params: {
          is_chunked: boolean;
          net_error: number;
          total_size: number;
        };
        source_type: string;
      };
      id: string;
      name: 'UPLOAD_DATA_STREAM_INIT';
      // Denotes a step into the nestable async flow event UPLOAD_DATA_STREAM_INIT.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace UPLOAD_DATA_STREAM_READ {
    interface b extends Base {
      args: {
        params: {
          current_position: number;
        };
        source_type: string;
      };
      id: string;
      name: 'UPLOAD_DATA_STREAM_READ';
      // Denotes the beginning of the nestable async flow event UPLOAD_DATA_STREAM_READ.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'UPLOAD_DATA_STREAM_READ';
      // Denotes a step into the nestable async flow event UPLOAD_DATA_STREAM_READ.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace URL_REQUEST_DELEGATE_RECEIVED_REDIRECT {
    interface b extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'URL_REQUEST_DELEGATE_RECEIVED_REDIRECT';
      // Denotes the beginning of the nestable async flow event URL_REQUEST_DELEGATE_RECEIVED_REDIRECT.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'URL_REQUEST_DELEGATE_RECEIVED_REDIRECT';
      // Denotes a step into the nestable async flow event URL_REQUEST_DELEGATE_RECEIVED_REDIRECT.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace URL_REQUEST_DELEGATE_RESPONSE_STARTED {
    interface b extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'URL_REQUEST_DELEGATE_RESPONSE_STARTED';
      // Denotes the beginning of the nestable async flow event URL_REQUEST_DELEGATE_RESPONSE_STARTED.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
        params: string;
        source_type: string;
      };
      id: string;
      name: 'URL_REQUEST_DELEGATE_RESPONSE_STARTED';
      // Denotes a step into the nestable async flow event URL_REQUEST_DELEGATE_RESPONSE_STARTED.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace URL_REQUEST_FAKE_RESPONSE_HEADERS_CREATED {
    interface n extends Base {
      args: {
        params: {
          headers: {
            '0': string;
            '1': string;
            '2': string;
            '3': string;
            '4': string;
            '5': string;
            '6': string;
            '7': string;
            '8': string;
            '9': string;
            '10': string;
            '11': string;
            '12': string;
            '13': string;
            '14': string;
            '15': string;
            '16': string;
            '17': string;
            '18': string;
            '19': string;
            '20': string;
            '21': string;
            '22': string;
            '23': string;
            '24': string;
            '25': string;
            '26': string;
            '27': string;
            '28': string;
            '29': string;
          }[];
        };
        source_type: string;
      };
      id: string;
      name: 'URL_REQUEST_FAKE_RESPONSE_HEADERS_CREATED';
      // Denotes the ending of the nestable async flow event URL_REQUEST_FAKE_RESPONSE_HEADERS_CREATED.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace URL_REQUEST_FILTERS_SET {
    interface n extends Base {
      args: {
        params: {
          filters: string;
        };
        source_type: string;
      };
      id: string;
      name: 'URL_REQUEST_FILTERS_SET';
      // Denotes the ending of the nestable async flow event URL_REQUEST_FILTERS_SET.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace URL_REQUEST_JOB_BYTES_READ {
    interface n extends Base {
      args: {
        params: {
          byte_count: number;
        };
        source_type: string;
      };
      id: string;
      name: 'URL_REQUEST_JOB_BYTES_READ';
      // Denotes the ending of the nestable async flow event URL_REQUEST_JOB_BYTES_READ.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace URL_REQUEST_JOB_FILTERED_BYTES_READ {
    interface n extends Base {
      args: {
        params: {
          byte_count: number;
        };
        source_type: string;
      };
      id: string;
      name: 'URL_REQUEST_JOB_FILTERED_BYTES_READ';
      // Denotes the ending of the nestable async flow event URL_REQUEST_JOB_FILTERED_BYTES_READ.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace URL_REQUEST_REDIRECT_JOB {
    interface n extends Base {
      args: {
        params: {
          reason: string;
        };
        source_type: string;
      };
      id: string;
      name: 'URL_REQUEST_REDIRECT_JOB';
      // Denotes the ending of the nestable async flow event URL_REQUEST_REDIRECT_JOB.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace URL_REQUEST_REDIRECTED {
    interface n extends Base {
      args: {
        params: {
          location: string;
        };
        source_type: string;
      };
      id: string;
      name: 'URL_REQUEST_REDIRECTED';
      // Denotes the ending of the nestable async flow event URL_REQUEST_REDIRECTED.
      ph: 'n';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace URL_REQUEST_START_JOB {
    interface b extends Base {
      args: {
        params: {
          load_flags: number;
          method: string;
          privacy_mode: number;
          upload_id?: string;
          url: string;
        };
        source_type: string;
      };
      id: string;
      name: 'URL_REQUEST_START_JOB';
      // Denotes the beginning of the nestable async flow event URL_REQUEST_START_JOB.
      ph: 'b';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface e extends Base {
      args: {
        params: {
          net_error: number;
        };
        source_type: string;
      };
      id: string;
      name: 'URL_REQUEST_START_JOB';
      // Denotes a step into the nestable async flow event URL_REQUEST_START_JOB.
      ph: 'e';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace UrlPatternIndexMatcher {
    type FindMatch = 
      TraceEvent.UrlPatternIndexMatcher.FindMatch.X;
  
    namespace FindMatch {
      interface X extends Base {
        args: {
          pattern: string;
        };
        // Duration.
        dur: number;
        name: 'UrlPatternIndexMatcher::FindMatch';
        // Denotes the end of the event FindMatch.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace URLRequestHttpJob {
    type OnReadCompleted = 
      TraceEvent.URLRequestHttpJob.OnReadCompleted.X;
  
    type OnStartCompleted = 
      TraceEvent.URLRequestHttpJob.OnStartCompleted.X;
  
    namespace OnReadCompleted {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'URLRequestHttpJob::OnReadCompleted';
        // Denotes the end of the event OnReadCompleted.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnStartCompleted {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'URLRequestHttpJob::OnStartCompleted';
        // Denotes the end of the event OnStartCompleted.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace UserEvent {
    interface I extends Base {
      args: {
        action: string;
      };
      name: 'UserEvent';
      // Denotes an event UserEvent. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Usingexistingdeadline {
    interface I extends Base {
      args: {
      
      };
      name: 'Using existing deadline';
      // Denotes an event Usingexistingdeadline. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Usingnewdeadline {
    interface X extends Base {
      args: {
        delta: number;
        desired_deadline: number;
      };
      // Duration.
      dur: number;
      name: 'Using new deadline';
      // Denotes the end of the event Usingnewdeadline.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace V8_tq {
    interface C extends Base {
      args: {
        value: number;
      };
      name: 'v8_tq';
      // Denotes a counter for the event V8_tq.
      ph: 'C';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace V8 {
    type Builtin_ArrayConcat = 
      TraceEvent.V8.Builtin_ArrayConcat.X;
  
    type Builtin_ArrayPop = 
      TraceEvent.V8.Builtin_ArrayPop.X;
  
    type Builtin_ArrayPush = 
      TraceEvent.V8.Builtin_ArrayPush.X;
  
    type Builtin_ArrayShift = 
      TraceEvent.V8.Builtin_ArrayShift.X;
  
    type Builtin_ArrayUnshift = 
      TraceEvent.V8.Builtin_ArrayUnshift.X;
  
    type Builtin_BooleanConstructor = 
      TraceEvent.V8.Builtin_BooleanConstructor.X;
  
    type Builtin_ConsoleLog = 
      TraceEvent.V8.Builtin_ConsoleLog.X;
  
    type Builtin_ConsoleWarn = 
      TraceEvent.V8.Builtin_ConsoleWarn.X;
  
    type Builtin_DateConstructor = 
      TraceEvent.V8.Builtin_DateConstructor.X;
  
    type Builtin_DateNow = 
      TraceEvent.V8.Builtin_DateNow.X;
  
    type Builtin_DatePrototypeSetTime = 
      TraceEvent.V8.Builtin_DatePrototypeSetTime.X;
  
    type Builtin_DatePrototypeToUTCString = 
      TraceEvent.V8.Builtin_DatePrototypeToUTCString.X;
  
    type Builtin_ErrorConstructor = 
      TraceEvent.V8.Builtin_ErrorConstructor.X;
  
    type Builtin_FunctionConstructor = 
      TraceEvent.V8.Builtin_FunctionConstructor.X;
  
    type Builtin_FunctionPrototypeBind = 
      TraceEvent.V8.Builtin_FunctionPrototypeBind.X;
  
    type Builtin_FunctionPrototypeToString = 
      TraceEvent.V8.Builtin_FunctionPrototypeToString.X;
  
    type Builtin_GlobalDecodeURI = 
      TraceEvent.V8.Builtin_GlobalDecodeURI.X;
  
    type Builtin_GlobalDecodeURIComponent = 
      TraceEvent.V8.Builtin_GlobalDecodeURIComponent.X;
  
    type Builtin_GlobalEncodeURIComponent = 
      TraceEvent.V8.Builtin_GlobalEncodeURIComponent.X;
  
    type Builtin_GlobalEval = 
      TraceEvent.V8.Builtin_GlobalEval.X;
  
    type Builtin_HandleApiCall = 
      TraceEvent.V8.Builtin_HandleApiCall.X;
  
    type Builtin_JsonParse = 
      TraceEvent.V8.Builtin_JsonParse.X;
  
    type Builtin_JsonStringify = 
      TraceEvent.V8.Builtin_JsonStringify.X;
  
    type Builtin_MapPrototypeClear = 
      TraceEvent.V8.Builtin_MapPrototypeClear.X;
  
    type Builtin_NumberPrototypeToFixed = 
      TraceEvent.V8.Builtin_NumberPrototypeToFixed.X;
  
    type Builtin_NumberPrototypeToString = 
      TraceEvent.V8.Builtin_NumberPrototypeToString.X;
  
    type Builtin_ObjectDefineGetter = 
      TraceEvent.V8.Builtin_ObjectDefineGetter.X;
  
    type Builtin_ObjectDefineProperties = 
      TraceEvent.V8.Builtin_ObjectDefineProperties.X;
  
    type Builtin_ObjectDefineProperty = 
      TraceEvent.V8.Builtin_ObjectDefineProperty.X;
  
    type Builtin_ObjectFreeze = 
      TraceEvent.V8.Builtin_ObjectFreeze.X;
  
    type Builtin_ObjectGetPrototypeOf = 
      TraceEvent.V8.Builtin_ObjectGetPrototypeOf.X;
  
    type Builtin_ObjectLookupGetter = 
      TraceEvent.V8.Builtin_ObjectLookupGetter.X;
  
    type Builtin_ObjectPrototypeGetProto = 
      TraceEvent.V8.Builtin_ObjectPrototypeGetProto.X;
  
    type Builtin_ObjectPrototypePropertyIsEnumerable = 
      TraceEvent.V8.Builtin_ObjectPrototypePropertyIsEnumerable.X;
  
    type Builtin_ObjectPrototypeSetProto = 
      TraceEvent.V8.Builtin_ObjectPrototypeSetProto.X;
  
    type Builtin_ObjectSetPrototypeOf = 
      TraceEvent.V8.Builtin_ObjectSetPrototypeOf.X;
  
    type Builtin_RegExpPrototypeToString = 
      TraceEvent.V8.Builtin_RegExpPrototypeToString.X;
  
    type Builtin_SetPrototypeClear = 
      TraceEvent.V8.Builtin_SetPrototypeClear.X;
  
    type Builtin_StringPrototypeEndsWith = 
      TraceEvent.V8.Builtin_StringPrototypeEndsWith.X;
  
    type Builtin_StringPrototypeLastIndexOf = 
      TraceEvent.V8.Builtin_StringPrototypeLastIndexOf.X;
  
    type Builtin_StringPrototypeStartsWith = 
      TraceEvent.V8.Builtin_StringPrototypeStartsWith.X;
  
    type Builtin_StringPrototypeToUpperCaseIntl = 
      TraceEvent.V8.Builtin_StringPrototypeToUpperCaseIntl.X;
  
    type CallFunction = 
      TraceEvent.V8.CallFunction.X;
  
    type Compile = 
      TraceEvent.V8.Compile.B |
      TraceEvent.V8.Compile.E |
      TraceEvent.V8.Compile.X;
  
    type CompileCode = 
      TraceEvent.V8.CompileCode.X;
  
    type CompileCodeBackground = 
      TraceEvent.V8.CompileCodeBackground.X;
  
    type CompileEval = 
      TraceEvent.V8.CompileEval.X;
  
    type CompileIgnition = 
      TraceEvent.V8.CompileIgnition.X;
  
    type CompileIgnitionFinalization = 
      TraceEvent.V8.CompileIgnitionFinalization.X;
  
    type CompileScript = 
      TraceEvent.V8.CompileScript.X;
  
    type CompileStreamedScript = 
      TraceEvent.V8.CompileStreamedScript.X;
  
    type DeoptimizeCode = 
      TraceEvent.V8.DeoptimizeCode.X;
  
    type ExternalCallback = 
      TraceEvent.V8.ExternalCallback.B |
      TraceEvent.V8.ExternalCallback.E;
  
    type GC_BACKGROUND_ARRAY_BUFFER_FREE = 
      TraceEvent.V8.GC_BACKGROUND_ARRAY_BUFFER_FREE.X;
  
    type GC_BACKGROUND_STORE_BUFFER = 
      TraceEvent.V8.GC_BACKGROUND_STORE_BUFFER.X;
  
    type GC_BACKGROUND_UNMAPPER = 
      TraceEvent.V8.GC_BACKGROUND_UNMAPPER.X;
  
    type GC_HEAP_EMBEDDER_TRACING_EPILOGUE = 
      TraceEvent.V8.GC_HEAP_EMBEDDER_TRACING_EPILOGUE.X;
  
    type GC_HEAP_EPILOGUE_REDUCE_NEW_SPACE = 
      TraceEvent.V8.GC_HEAP_EPILOGUE_REDUCE_NEW_SPACE.X;
  
    type GC_HEAP_EPILOGUE = 
      TraceEvent.V8.GC_HEAP_EPILOGUE.X;
  
    type GC_HEAP_EXTERNAL_EPILOGUE = 
      TraceEvent.V8.GC_HEAP_EXTERNAL_EPILOGUE.X;
  
    type GC_HEAP_EXTERNAL_PROLOGUE = 
      TraceEvent.V8.GC_HEAP_EXTERNAL_PROLOGUE.X;
  
    type GC_HEAP_EXTERNAL_WEAK_GLOBAL_HANDLES = 
      TraceEvent.V8.GC_HEAP_EXTERNAL_WEAK_GLOBAL_HANDLES.X;
  
    type GC_HEAP_PROLOGUE = 
      TraceEvent.V8.GC_HEAP_PROLOGUE.X;
  
    type GC_MC_BACKGROUND_EVACUATE_COPY = 
      TraceEvent.V8.GC_MC_BACKGROUND_EVACUATE_COPY.X;
  
    type GC_MC_BACKGROUND_EVACUATE_UPDATE_POINTERS = 
      TraceEvent.V8.GC_MC_BACKGROUND_EVACUATE_UPDATE_POINTERS.X;
  
    type GC_MC_BACKGROUND_MARKING = 
      TraceEvent.V8.GC_MC_BACKGROUND_MARKING.X;
  
    type GC_MC_BACKGROUND_SWEEPING = 
      TraceEvent.V8.GC_MC_BACKGROUND_SWEEPING.X;
  
    type GC_MC_CLEAR_FLUSHABLE_BYTECODE = 
      TraceEvent.V8.GC_MC_CLEAR_FLUSHABLE_BYTECODE.X;
  
    type GC_MC_CLEAR_FLUSHED_JS_FUNCTIONS = 
      TraceEvent.V8.GC_MC_CLEAR_FLUSHED_JS_FUNCTIONS.X;
  
    type GC_MC_CLEAR_MAPS = 
      TraceEvent.V8.GC_MC_CLEAR_MAPS.X;
  
    type GC_MC_CLEAR_STRING_TABLE = 
      TraceEvent.V8.GC_MC_CLEAR_STRING_TABLE.X;
  
    type GC_MC_CLEAR_WEAK_COLLECTIONS = 
      TraceEvent.V8.GC_MC_CLEAR_WEAK_COLLECTIONS.X;
  
    type GC_MC_CLEAR_WEAK_LISTS = 
      TraceEvent.V8.GC_MC_CLEAR_WEAK_LISTS.X;
  
    type GC_MC_CLEAR_WEAK_REFERENCES = 
      TraceEvent.V8.GC_MC_CLEAR_WEAK_REFERENCES.X;
  
    type GC_MC_CLEAR = 
      TraceEvent.V8.GC_MC_CLEAR.X;
  
    type GC_MC_EPILOGUE = 
      TraceEvent.V8.GC_MC_EPILOGUE.X;
  
    type GC_MC_EVACUATE_CLEAN_UP = 
      TraceEvent.V8.GC_MC_EVACUATE_CLEAN_UP.X;
  
    type GC_MC_EVACUATE_COPY = 
      TraceEvent.V8.GC_MC_EVACUATE_COPY.X;
  
    type GC_MC_EVACUATE_EPILOGUE = 
      TraceEvent.V8.GC_MC_EVACUATE_EPILOGUE.X;
  
    type GC_MC_EVACUATE_PROLOGUE = 
      TraceEvent.V8.GC_MC_EVACUATE_PROLOGUE.X;
  
    type GC_MC_EVACUATE_REBALANCE = 
      TraceEvent.V8.GC_MC_EVACUATE_REBALANCE.X;
  
    type GC_MC_EVACUATE_UPDATE_POINTERS_SLOTS_MAIN = 
      TraceEvent.V8.GC_MC_EVACUATE_UPDATE_POINTERS_SLOTS_MAIN.X;
  
    type GC_MC_EVACUATE_UPDATE_POINTERS_SLOTS_MAP_SPACE = 
      TraceEvent.V8.GC_MC_EVACUATE_UPDATE_POINTERS_SLOTS_MAP_SPACE.X;
  
    type GC_MC_EVACUATE_UPDATE_POINTERS_TO_NEW_ROOTS = 
      TraceEvent.V8.GC_MC_EVACUATE_UPDATE_POINTERS_TO_NEW_ROOTS.X;
  
    type GC_MC_EVACUATE_UPDATE_POINTERS_WEAK = 
      TraceEvent.V8.GC_MC_EVACUATE_UPDATE_POINTERS_WEAK.X;
  
    type GC_MC_EVACUATE_UPDATE_POINTERS = 
      TraceEvent.V8.GC_MC_EVACUATE_UPDATE_POINTERS.X;
  
    type GC_MC_EVACUATE = 
      TraceEvent.V8.GC_MC_EVACUATE.X;
  
    type GC_MC_FINISH = 
      TraceEvent.V8.GC_MC_FINISH.X;
  
    type GC_MC_INCREMENTAL_EMBEDDER_PROLOGUE = 
      TraceEvent.V8.GC_MC_INCREMENTAL_EMBEDDER_PROLOGUE.X;
  
    type GC_MC_INCREMENTAL_EMBEDDER_TRACING = 
      TraceEvent.V8.GC_MC_INCREMENTAL_EMBEDDER_TRACING.X;
  
    type GC_MC_INCREMENTAL_EXTERNAL_EPILOGUE = 
      TraceEvent.V8.GC_MC_INCREMENTAL_EXTERNAL_EPILOGUE.X;
  
    type GC_MC_INCREMENTAL_EXTERNAL_PROLOGUE = 
      TraceEvent.V8.GC_MC_INCREMENTAL_EXTERNAL_PROLOGUE.X;
  
    type GC_MC_INCREMENTAL_FINALIZE_BODY = 
      TraceEvent.V8.GC_MC_INCREMENTAL_FINALIZE_BODY.X;
  
    type GC_MC_INCREMENTAL_FINALIZE = 
      TraceEvent.V8.GC_MC_INCREMENTAL_FINALIZE.X;
  
    type GC_MC_INCREMENTAL_LAYOUT_CHANGE = 
      TraceEvent.V8.GC_MC_INCREMENTAL_LAYOUT_CHANGE.X;
  
    type GC_MC_INCREMENTAL_START = 
      TraceEvent.V8.GC_MC_INCREMENTAL_START.X;
  
    type GC_MC_INCREMENTAL_SWEEPING = 
      TraceEvent.V8.GC_MC_INCREMENTAL_SWEEPING.X;
  
    type GC_MC_INCREMENTAL = 
      TraceEvent.V8.GC_MC_INCREMENTAL.X;
  
    type GC_MC_MARK_EMBEDDER_TRACING_CLOSURE = 
      TraceEvent.V8.GC_MC_MARK_EMBEDDER_TRACING_CLOSURE.X;
  
    type GC_MC_MARK_EMBEDDER_TRACING = 
      TraceEvent.V8.GC_MC_MARK_EMBEDDER_TRACING.X;
  
    type GC_MC_MARK_FINISH_INCREMENTAL = 
      TraceEvent.V8.GC_MC_MARK_FINISH_INCREMENTAL.X;
  
    type GC_MC_MARK_MAIN = 
      TraceEvent.V8.GC_MC_MARK_MAIN.X;
  
    type GC_MC_MARK_ROOTS = 
      TraceEvent.V8.GC_MC_MARK_ROOTS.X;
  
    type GC_MC_MARK_WEAK_CLOSURE_EPHEMERON_MARKING = 
      TraceEvent.V8.GC_MC_MARK_WEAK_CLOSURE_EPHEMERON_MARKING.X;
  
    type GC_MC_MARK_WEAK_CLOSURE_EPHEMERON = 
      TraceEvent.V8.GC_MC_MARK_WEAK_CLOSURE_EPHEMERON.X;
  
    type GC_MC_MARK_WEAK_CLOSURE_HARMONY = 
      TraceEvent.V8.GC_MC_MARK_WEAK_CLOSURE_HARMONY.X;
  
    type GC_MC_MARK_WEAK_CLOSURE_WEAK_HANDLES = 
      TraceEvent.V8.GC_MC_MARK_WEAK_CLOSURE_WEAK_HANDLES.X;
  
    type GC_MC_MARK_WEAK_CLOSURE_WEAK_ROOTS = 
      TraceEvent.V8.GC_MC_MARK_WEAK_CLOSURE_WEAK_ROOTS.X;
  
    type GC_MC_MARK_WEAK_CLOSURE = 
      TraceEvent.V8.GC_MC_MARK_WEAK_CLOSURE.X;
  
    type GC_MC_MARK = 
      TraceEvent.V8.GC_MC_MARK.X;
  
    type GC_MC_PROLOGUE = 
      TraceEvent.V8.GC_MC_PROLOGUE.X;
  
    type GC_MC_SWEEP = 
      TraceEvent.V8.GC_MC_SWEEP.X;
  
    type GC_Objects_Stats = 
      TraceEvent.V8.GC_Objects_Stats.I;
  
    type GC_SCAVENGER_BACKGROUND_SCAVENGE_PARALLEL = 
      TraceEvent.V8.GC_SCAVENGER_BACKGROUND_SCAVENGE_PARALLEL.X;
  
    type GC_SCAVENGER_PROCESS_ARRAY_BUFFERS = 
      TraceEvent.V8.GC_SCAVENGER_PROCESS_ARRAY_BUFFERS.X;
  
    type GC_SCAVENGER_SCAVENGE_FINALIZE = 
      TraceEvent.V8.GC_SCAVENGER_SCAVENGE_FINALIZE.X;
  
    type GC_SCAVENGER_SCAVENGE_PARALLEL = 
      TraceEvent.V8.GC_SCAVENGER_SCAVENGE_PARALLEL.X;
  
    type GC_SCAVENGER_SCAVENGE_ROOTS = 
      TraceEvent.V8.GC_SCAVENGER_SCAVENGE_ROOTS.X;
  
    type GC_SCAVENGER_SCAVENGE_UPDATE_REFS = 
      TraceEvent.V8.GC_SCAVENGER_SCAVENGE_UPDATE_REFS.X;
  
    type GC_SCAVENGER_SCAVENGE_WEAK_GLOBAL_HANDLES_IDENTIFY = 
      TraceEvent.V8.GC_SCAVENGER_SCAVENGE_WEAK_GLOBAL_HANDLES_IDENTIFY.X;
  
    type GC_SCAVENGER_SCAVENGE_WEAK_GLOBAL_HANDLES_PROCESS = 
      TraceEvent.V8.GC_SCAVENGER_SCAVENGE_WEAK_GLOBAL_HANDLES_PROCESS.X;
  
    type GC_SCAVENGER_SCAVENGE = 
      TraceEvent.V8.GC_SCAVENGER_SCAVENGE.X;
  
    type GCCompactor = 
      TraceEvent.V8.GCCompactor.X;
  
    type GCFinalizeMC = 
      TraceEvent.V8.GCFinalizeMC.X;
  
    type GCFinalizeMCReduceMemory = 
      TraceEvent.V8.GCFinalizeMCReduceMemory.X;
  
    type GCIdleNotification = 
      TraceEvent.V8.GCIdleNotification.X;
  
    type GCIncrementalMarking = 
      TraceEvent.V8.GCIncrementalMarking.X;
  
    type GCIncrementalMarkingFinalize = 
      TraceEvent.V8.GCIncrementalMarkingFinalize.X;
  
    type GCIncrementalMarkingLayoutChange = 
      TraceEvent.V8.GCIncrementalMarkingLayoutChange.X;
  
    type GCIncrementalMarkingStart = 
      TraceEvent.V8.GCIncrementalMarkingStart.X;
  
    type GCMarkCompactorMarkingSummary = 
      TraceEvent.V8.GCMarkCompactorMarkingSummary.I;
  
    type GCMarkCompactorSummary = 
      TraceEvent.V8.GCMarkCompactorSummary.I;
  
    type GCPhantomHandleProcessingCallback = 
      TraceEvent.V8.GCPhantomHandleProcessingCallback.X;
  
    type GCScavenger = 
      TraceEvent.V8.GCScavenger.X;
  
    type HandleInterrupts = 
      TraceEvent.V8.HandleInterrupts.X;
  
    type ICStats = 
      TraceEvent.V8.ICStats.I;
  
    type InvokeApiInterruptCallbacks = 
      TraceEvent.V8.InvokeApiInterruptCallbacks.X;
  
    type NewContext = 
      TraceEvent.V8.NewContext.B |
      TraceEvent.V8.NewContext.E;
  
    type NewInstance = 
      TraceEvent.V8.NewInstance.X;
  
    type OptimizeCode = 
      TraceEvent.V8.OptimizeCode.X;
  
    type ParseFunction = 
      TraceEvent.V8.ParseFunction.X;
  
    type ParseOnBackground = 
      TraceEvent.V8.ParseOnBackground.X;
  
    type ParseProgram = 
      TraceEvent.V8.ParseProgram.X;
  
    type PreParse = 
      TraceEvent.V8.PreParse.X;
  
    type RecompileConcurrent = 
      TraceEvent.V8.RecompileConcurrent.X;
  
    type RecompileSynchronous = 
      TraceEvent.V8.RecompileSynchronous.X;
  
    type Run = 
      TraceEvent.V8.Run.X;
  
    type Runtime_Runtime_AddDictionaryProperty = 
      TraceEvent.V8.Runtime_Runtime_AddDictionaryProperty.X;
  
    type Runtime_Runtime_AllocateInNewSpace = 
      TraceEvent.V8.Runtime_Runtime_AllocateInNewSpace.X;
  
    type Runtime_Runtime_AllocateInTargetSpace = 
      TraceEvent.V8.Runtime_Runtime_AllocateInTargetSpace.X;
  
    type Runtime_Runtime_AllocateSeqTwoByteString = 
      TraceEvent.V8.Runtime_Runtime_AllocateSeqTwoByteString.X;
  
    type Runtime_Runtime_ArrayIndexOf = 
      TraceEvent.V8.Runtime_Runtime_ArrayIndexOf.X;
  
    type Runtime_Runtime_ArraySpeciesConstructor = 
      TraceEvent.V8.Runtime_Runtime_ArraySpeciesConstructor.X;
  
    type Runtime_Runtime_CompileLazy = 
      TraceEvent.V8.Runtime_Runtime_CompileLazy.X;
  
    type Runtime_Runtime_CompileOptimized_Concurrent = 
      TraceEvent.V8.Runtime_Runtime_CompileOptimized_Concurrent.X;
  
    type Runtime_Runtime_CompleteInobjectSlackTrackingForMap = 
      TraceEvent.V8.Runtime_Runtime_CompleteInobjectSlackTrackingForMap.X;
  
    type Runtime_Runtime_CreateArrayLiteral = 
      TraceEvent.V8.Runtime_Runtime_CreateArrayLiteral.X;
  
    type Runtime_Runtime_CreateArrayLiteralWithoutAllocationSite = 
      TraceEvent.V8.Runtime_Runtime_CreateArrayLiteralWithoutAllocationSite.X;
  
    type Runtime_Runtime_CreateDataProperty = 
      TraceEvent.V8.Runtime_Runtime_CreateDataProperty.X;
  
    type Runtime_Runtime_CreateJSGeneratorObject = 
      TraceEvent.V8.Runtime_Runtime_CreateJSGeneratorObject.X;
  
    type Runtime_Runtime_CreateListFromArrayLike = 
      TraceEvent.V8.Runtime_Runtime_CreateListFromArrayLike.X;
  
    type Runtime_Runtime_CreateObjectLiteral = 
      TraceEvent.V8.Runtime_Runtime_CreateObjectLiteral.X;
  
    type Runtime_Runtime_CreateObjectLiteralWithoutAllocationSite = 
      TraceEvent.V8.Runtime_Runtime_CreateObjectLiteralWithoutAllocationSite.X;
  
    type Runtime_Runtime_CreateRegExpLiteral = 
      TraceEvent.V8.Runtime_Runtime_CreateRegExpLiteral.X;
  
    type Runtime_Runtime_DateCurrentTime = 
      TraceEvent.V8.Runtime_Runtime_DateCurrentTime.X;
  
    type Runtime_Runtime_DeclareEvalFunction = 
      TraceEvent.V8.Runtime_Runtime_DeclareEvalFunction.X;
  
    type Runtime_Runtime_DeclareGlobals = 
      TraceEvent.V8.Runtime_Runtime_DeclareGlobals.X;
  
    type Runtime_Runtime_DefineAccessorPropertyUnchecked = 
      TraceEvent.V8.Runtime_Runtime_DefineAccessorPropertyUnchecked.X;
  
    type Runtime_Runtime_DefineClass = 
      TraceEvent.V8.Runtime_Runtime_DefineClass.X;
  
    type Runtime_Runtime_DefineDataPropertyInLiteral = 
      TraceEvent.V8.Runtime_Runtime_DefineDataPropertyInLiteral.X;
  
    type Runtime_Runtime_DeleteProperty = 
      TraceEvent.V8.Runtime_Runtime_DeleteProperty.X;
  
    type Runtime_Runtime_ElementsTransitionAndStoreIC_Miss = 
      TraceEvent.V8.Runtime_Runtime_ElementsTransitionAndStoreIC_Miss.X;
  
    type Runtime_Runtime_ForInEnumerate = 
      TraceEvent.V8.Runtime_Runtime_ForInEnumerate.X;
  
    type Runtime_Runtime_GetOwnPropertyDescriptor = 
      TraceEvent.V8.Runtime_Runtime_GetOwnPropertyDescriptor.X;
  
    type Runtime_Runtime_GetProperty = 
      TraceEvent.V8.Runtime_Runtime_GetProperty.X;
  
    type Runtime_Runtime_HasInPrototypeChain = 
      TraceEvent.V8.Runtime_Runtime_HasInPrototypeChain.X;
  
    type Runtime_Runtime_HasProperty = 
      TraceEvent.V8.Runtime_Runtime_HasProperty.X;
  
    type Runtime_Runtime_Interrupt = 
      TraceEvent.V8.Runtime_Runtime_Interrupt.X;
  
    type Runtime_Runtime_KeyedLoadIC_Miss = 
      TraceEvent.V8.Runtime_Runtime_KeyedLoadIC_Miss.X;
  
    type Runtime_Runtime_KeyedStoreIC_Miss = 
      TraceEvent.V8.Runtime_Runtime_KeyedStoreIC_Miss.X;
  
    type Runtime_Runtime_KeyedStoreIC_Slow = 
      TraceEvent.V8.Runtime_Runtime_KeyedStoreIC_Slow.X;
  
    type Runtime_Runtime_LoadAccessorProperty = 
      TraceEvent.V8.Runtime_Runtime_LoadAccessorProperty.X;
  
    type Runtime_Runtime_LoadCallbackProperty = 
      TraceEvent.V8.Runtime_Runtime_LoadCallbackProperty.X;
  
    type Runtime_Runtime_LoadElementWithInterceptor = 
      TraceEvent.V8.Runtime_Runtime_LoadElementWithInterceptor.X;
  
    type Runtime_Runtime_LoadGlobalIC_Miss = 
      TraceEvent.V8.Runtime_Runtime_LoadGlobalIC_Miss.X;
  
    type Runtime_Runtime_LoadGlobalIC_Slow = 
      TraceEvent.V8.Runtime_Runtime_LoadGlobalIC_Slow.X;
  
    type Runtime_Runtime_LoadIC_Miss = 
      TraceEvent.V8.Runtime_Runtime_LoadIC_Miss.X;
  
    type Runtime_Runtime_LoadLookupSlot = 
      TraceEvent.V8.Runtime_Runtime_LoadLookupSlot.X;
  
    type Runtime_Runtime_LoadLookupSlotForCall = 
      TraceEvent.V8.Runtime_Runtime_LoadLookupSlotForCall.X;
  
    type Runtime_Runtime_LoadLookupSlotInsideTypeof = 
      TraceEvent.V8.Runtime_Runtime_LoadLookupSlotInsideTypeof.X;
  
    type Runtime_Runtime_LoadPropertyWithInterceptor = 
      TraceEvent.V8.Runtime_Runtime_LoadPropertyWithInterceptor.X;
  
    type Runtime_Runtime_MapGrow = 
      TraceEvent.V8.Runtime_Runtime_MapGrow.X;
  
    type Runtime_Runtime_MapShrink = 
      TraceEvent.V8.Runtime_Runtime_MapShrink.X;
  
    type Runtime_Runtime_NewArray = 
      TraceEvent.V8.Runtime_Runtime_NewArray.X;
  
    type Runtime_Runtime_NewClosure_Tenured = 
      TraceEvent.V8.Runtime_Runtime_NewClosure_Tenured.X;
  
    type Runtime_Runtime_NewClosure = 
      TraceEvent.V8.Runtime_Runtime_NewClosure.X;
  
    type Runtime_Runtime_NewObject = 
      TraceEvent.V8.Runtime_Runtime_NewObject.X;
  
    type Runtime_Runtime_NewScriptContext = 
      TraceEvent.V8.Runtime_Runtime_NewScriptContext.X;
  
    type Runtime_Runtime_NotifyDeoptimized = 
      TraceEvent.V8.Runtime_Runtime_NotifyDeoptimized.X;
  
    type Runtime_Runtime_NumberToString = 
      TraceEvent.V8.Runtime_Runtime_NumberToString.X;
  
    type Runtime_Runtime_ObjectCreate = 
      TraceEvent.V8.Runtime_Runtime_ObjectCreate.X;
  
    type Runtime_Runtime_ObjectEntries = 
      TraceEvent.V8.Runtime_Runtime_ObjectEntries.X;
  
    type Runtime_Runtime_ObjectGetOwnPropertyNames = 
      TraceEvent.V8.Runtime_Runtime_ObjectGetOwnPropertyNames.X;
  
    type Runtime_Runtime_ObjectHasOwnProperty = 
      TraceEvent.V8.Runtime_Runtime_ObjectHasOwnProperty.X;
  
    type Runtime_Runtime_ObjectKeys = 
      TraceEvent.V8.Runtime_Runtime_ObjectKeys.X;
  
    type Runtime_Runtime_OrdinaryHasInstance = 
      TraceEvent.V8.Runtime_Runtime_OrdinaryHasInstance.X;
  
    type Runtime_Runtime_PrepareElementsForSort = 
      TraceEvent.V8.Runtime_Runtime_PrepareElementsForSort.X;
  
    type Runtime_Runtime_PushBlockContext = 
      TraceEvent.V8.Runtime_Runtime_PushBlockContext.X;
  
    type Runtime_Runtime_PushCatchContext = 
      TraceEvent.V8.Runtime_Runtime_PushCatchContext.X;
  
    type Runtime_Runtime_PushWithContext = 
      TraceEvent.V8.Runtime_Runtime_PushWithContext.X;
  
    type Runtime_Runtime_RegExpExec = 
      TraceEvent.V8.Runtime_Runtime_RegExpExec.X;
  
    type Runtime_Runtime_RegExpExecMultiple = 
      TraceEvent.V8.Runtime_Runtime_RegExpExecMultiple.X;
  
    type Runtime_Runtime_RegExpInitializeAndCompile = 
      TraceEvent.V8.Runtime_Runtime_RegExpInitializeAndCompile.X;
  
    type Runtime_Runtime_RegExpReplace = 
      TraceEvent.V8.Runtime_Runtime_RegExpReplace.X;
  
    type Runtime_Runtime_ResolvePossiblyDirectEval = 
      TraceEvent.V8.Runtime_Runtime_ResolvePossiblyDirectEval.X;
  
    type Runtime_Runtime_RunMicrotaskCallback = 
      TraceEvent.V8.Runtime_Runtime_RunMicrotaskCallback.X;
  
    type Runtime_Runtime_SetGrow = 
      TraceEvent.V8.Runtime_Runtime_SetGrow.X;
  
    type Runtime_Runtime_SetKeyedProperty = 
      TraceEvent.V8.Runtime_Runtime_SetKeyedProperty.X;
  
    type Runtime_Runtime_SetNamedProperty = 
      TraceEvent.V8.Runtime_Runtime_SetNamedProperty.X;
  
    type Runtime_Runtime_ShrinkPropertyDictionary = 
      TraceEvent.V8.Runtime_Runtime_ShrinkPropertyDictionary.X;
  
    type Runtime_Runtime_StackGuard = 
      TraceEvent.V8.Runtime_Runtime_StackGuard.X;
  
    type Runtime_Runtime_StoreCallbackProperty = 
      TraceEvent.V8.Runtime_Runtime_StoreCallbackProperty.X;
  
    type Runtime_Runtime_StoreGlobalIC_Miss = 
      TraceEvent.V8.Runtime_Runtime_StoreGlobalIC_Miss.X;
  
    type Runtime_Runtime_StoreGlobalIC_Slow = 
      TraceEvent.V8.Runtime_Runtime_StoreGlobalIC_Slow.X;
  
    type Runtime_Runtime_StoreIC_Miss = 
      TraceEvent.V8.Runtime_Runtime_StoreIC_Miss.X;
  
    type Runtime_Runtime_StoreInArrayLiteralIC_Miss = 
      TraceEvent.V8.Runtime_Runtime_StoreInArrayLiteralIC_Miss.X;
  
    type Runtime_Runtime_StoreLookupSlot_Sloppy = 
      TraceEvent.V8.Runtime_Runtime_StoreLookupSlot_Sloppy.X;
  
    type Runtime_Runtime_StoreLookupSlot_Strict = 
      TraceEvent.V8.Runtime_Runtime_StoreLookupSlot_Strict.X;
  
    type Runtime_Runtime_StringAdd = 
      TraceEvent.V8.Runtime_Runtime_StringAdd.X;
  
    type Runtime_Runtime_StringBuilderConcat = 
      TraceEvent.V8.Runtime_Runtime_StringBuilderConcat.X;
  
    type Runtime_Runtime_StringCharCodeAt = 
      TraceEvent.V8.Runtime_Runtime_StringCharCodeAt.X;
  
    type Runtime_Runtime_StringEqual = 
      TraceEvent.V8.Runtime_Runtime_StringEqual.X;
  
    type Runtime_Runtime_StringIncludes = 
      TraceEvent.V8.Runtime_Runtime_StringIncludes.X;
  
    type Runtime_Runtime_StringIndexOfUnchecked = 
      TraceEvent.V8.Runtime_Runtime_StringIndexOfUnchecked.X;
  
    type Runtime_Runtime_StringLessThan = 
      TraceEvent.V8.Runtime_Runtime_StringLessThan.X;
  
    type Runtime_Runtime_StringParseFloat = 
      TraceEvent.V8.Runtime_Runtime_StringParseFloat.X;
  
    type Runtime_Runtime_StringParseInt = 
      TraceEvent.V8.Runtime_Runtime_StringParseInt.X;
  
    type Runtime_Runtime_StringSplit = 
      TraceEvent.V8.Runtime_Runtime_StringSplit.X;
  
    type Runtime_Runtime_StringSubstring = 
      TraceEvent.V8.Runtime_Runtime_StringSubstring.X;
  
    type Runtime_Runtime_StringToArray = 
      TraceEvent.V8.Runtime_Runtime_StringToArray.X;
  
    type Runtime_Runtime_StringToLowerCaseIntl = 
      TraceEvent.V8.Runtime_Runtime_StringToLowerCaseIntl.X;
  
    type Runtime_Runtime_StringToNumber = 
      TraceEvent.V8.Runtime_Runtime_StringToNumber.X;
  
    type Runtime_Runtime_Throw = 
      TraceEvent.V8.Runtime_Runtime_Throw.X;
  
    type Runtime_Runtime_ThrowCalledNonCallable = 
      TraceEvent.V8.Runtime_Runtime_ThrowCalledNonCallable.X;
  
    type Runtime_Runtime_ThrowConstructedNonConstructable = 
      TraceEvent.V8.Runtime_Runtime_ThrowConstructedNonConstructable.X;
  
    type Runtime_Runtime_ToString = 
      TraceEvent.V8.Runtime_Runtime_ToString.X;
  
    type Runtime_Runtime_TransitionElementsKind = 
      TraceEvent.V8.Runtime_Runtime_TransitionElementsKind.X;
  
    type Runtime_Runtime_UnwindAndFindExceptionHandler = 
      TraceEvent.V8.Runtime_Runtime_UnwindAndFindExceptionHandler.X;
  
    type RuntimeStats = 
      TraceEvent.V8.RuntimeStats.I;
  
    type ScriptCompiler = 
      TraceEvent.V8.ScriptCompiler.B |
      TraceEvent.V8.ScriptCompiler.E;
  
    type StackGuard = 
      TraceEvent.V8.StackGuard.X;
  
    type Task = 
      TraceEvent.V8.Task.B |
      TraceEvent.V8.Task.E;
  
    namespace Builtin_ArrayConcat {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Builtin_ArrayConcat';
        // Denotes the end of the event Builtin_ArrayConcat.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Builtin_ArrayPop {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Builtin_ArrayPop';
        // Denotes the end of the event Builtin_ArrayPop.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Builtin_ArrayPush {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Builtin_ArrayPush';
        // Denotes the end of the event Builtin_ArrayPush.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Builtin_ArrayShift {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Builtin_ArrayShift';
        // Denotes the end of the event Builtin_ArrayShift.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Builtin_ArrayUnshift {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Builtin_ArrayUnshift';
        // Denotes the end of the event Builtin_ArrayUnshift.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Builtin_BooleanConstructor {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Builtin_BooleanConstructor';
        // Denotes the end of the event Builtin_BooleanConstructor.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Builtin_ConsoleLog {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Builtin_ConsoleLog';
        // Denotes the end of the event Builtin_ConsoleLog.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Builtin_ConsoleWarn {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Builtin_ConsoleWarn';
        // Denotes the end of the event Builtin_ConsoleWarn.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Builtin_DateConstructor {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Builtin_DateConstructor';
        // Denotes the end of the event Builtin_DateConstructor.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Builtin_DateNow {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Builtin_DateNow';
        // Denotes the end of the event Builtin_DateNow.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Builtin_DatePrototypeSetTime {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Builtin_DatePrototypeSetTime';
        // Denotes the end of the event Builtin_DatePrototypeSetTime.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Builtin_DatePrototypeToUTCString {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Builtin_DatePrototypeToUTCString';
        // Denotes the end of the event Builtin_DatePrototypeToUTCString.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Builtin_ErrorConstructor {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Builtin_ErrorConstructor';
        // Denotes the end of the event Builtin_ErrorConstructor.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Builtin_FunctionConstructor {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Builtin_FunctionConstructor';
        // Denotes the end of the event Builtin_FunctionConstructor.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Builtin_FunctionPrototypeBind {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Builtin_FunctionPrototypeBind';
        // Denotes the end of the event Builtin_FunctionPrototypeBind.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Builtin_FunctionPrototypeToString {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Builtin_FunctionPrototypeToString';
        // Denotes the end of the event Builtin_FunctionPrototypeToString.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Builtin_GlobalDecodeURI {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Builtin_GlobalDecodeURI';
        // Denotes the end of the event Builtin_GlobalDecodeURI.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Builtin_GlobalDecodeURIComponent {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Builtin_GlobalDecodeURIComponent';
        // Denotes the end of the event Builtin_GlobalDecodeURIComponent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Builtin_GlobalEncodeURIComponent {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Builtin_GlobalEncodeURIComponent';
        // Denotes the end of the event Builtin_GlobalEncodeURIComponent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Builtin_GlobalEval {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Builtin_GlobalEval';
        // Denotes the end of the event Builtin_GlobalEval.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Builtin_HandleApiCall {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Builtin_HandleApiCall';
        // Denotes the end of the event Builtin_HandleApiCall.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Builtin_JsonParse {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Builtin_JsonParse';
        // Denotes the end of the event Builtin_JsonParse.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Builtin_JsonStringify {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Builtin_JsonStringify';
        // Denotes the end of the event Builtin_JsonStringify.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Builtin_MapPrototypeClear {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Builtin_MapPrototypeClear';
        // Denotes the end of the event Builtin_MapPrototypeClear.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Builtin_NumberPrototypeToFixed {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Builtin_NumberPrototypeToFixed';
        // Denotes the end of the event Builtin_NumberPrototypeToFixed.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Builtin_NumberPrototypeToString {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Builtin_NumberPrototypeToString';
        // Denotes the end of the event Builtin_NumberPrototypeToString.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Builtin_ObjectDefineGetter {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Builtin_ObjectDefineGetter';
        // Denotes the end of the event Builtin_ObjectDefineGetter.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Builtin_ObjectDefineProperties {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Builtin_ObjectDefineProperties';
        // Denotes the end of the event Builtin_ObjectDefineProperties.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Builtin_ObjectDefineProperty {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Builtin_ObjectDefineProperty';
        // Denotes the end of the event Builtin_ObjectDefineProperty.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Builtin_ObjectFreeze {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Builtin_ObjectFreeze';
        // Denotes the end of the event Builtin_ObjectFreeze.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Builtin_ObjectGetPrototypeOf {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Builtin_ObjectGetPrototypeOf';
        // Denotes the end of the event Builtin_ObjectGetPrototypeOf.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Builtin_ObjectLookupGetter {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Builtin_ObjectLookupGetter';
        // Denotes the end of the event Builtin_ObjectLookupGetter.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Builtin_ObjectPrototypeGetProto {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Builtin_ObjectPrototypeGetProto';
        // Denotes the end of the event Builtin_ObjectPrototypeGetProto.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Builtin_ObjectPrototypePropertyIsEnumerable {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Builtin_ObjectPrototypePropertyIsEnumerable';
        // Denotes the end of the event Builtin_ObjectPrototypePropertyIsEnumerable.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Builtin_ObjectPrototypeSetProto {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Builtin_ObjectPrototypeSetProto';
        // Denotes the end of the event Builtin_ObjectPrototypeSetProto.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Builtin_ObjectSetPrototypeOf {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Builtin_ObjectSetPrototypeOf';
        // Denotes the end of the event Builtin_ObjectSetPrototypeOf.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Builtin_RegExpPrototypeToString {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Builtin_RegExpPrototypeToString';
        // Denotes the end of the event Builtin_RegExpPrototypeToString.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Builtin_SetPrototypeClear {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Builtin_SetPrototypeClear';
        // Denotes the end of the event Builtin_SetPrototypeClear.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Builtin_StringPrototypeEndsWith {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Builtin_StringPrototypeEndsWith';
        // Denotes the end of the event Builtin_StringPrototypeEndsWith.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Builtin_StringPrototypeLastIndexOf {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Builtin_StringPrototypeLastIndexOf';
        // Denotes the end of the event Builtin_StringPrototypeLastIndexOf.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Builtin_StringPrototypeStartsWith {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Builtin_StringPrototypeStartsWith';
        // Denotes the end of the event Builtin_StringPrototypeStartsWith.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Builtin_StringPrototypeToUpperCaseIntl {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Builtin_StringPrototypeToUpperCaseIntl';
        // Denotes the end of the event Builtin_StringPrototypeToUpperCaseIntl.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CallFunction {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur?: number;
        name: 'v8.callFunction';
        // Denotes the end of the event CallFunction.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Compile {
      interface B extends Base {
        args: {
          fileName: string;
        };
        name: 'v8.compile';
        // Denotes the beginning of the event Compile.
        ph: 'B';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface E extends Base {
        args: {
          data: {
            cacheConsumeOptions?: string;
            cacheProduceOptions?: string;
            cacheRejected?: boolean;
            columnNumber: number;
            consumedCacheSize?: number;
            lineNumber: number;
            notStreamedReason?: string;
            producedCacheSize?: number;
            streamed: boolean;
            url: string;
          };
        };
        name: 'v8.compile';
        // Denotes the ending of the event Compile.
        ph: 'E';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface X extends Base {
        args: {
          data?: {
            columnNumber: number;
            lineNumber: number;
            url: string;
          };
          fileName?: string;
        };
        // Duration.
        dur?: number;
        name: 'v8.compile';
        // Denotes the end of the event Compile.
        ph: 'X';
        tdur?: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CompileCode {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.CompileCode';
        // Denotes the end of the event CompileCode.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CompileCodeBackground {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.CompileCodeBackground';
        // Denotes the end of the event CompileCodeBackground.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CompileEval {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.CompileEval';
        // Denotes the end of the event CompileEval.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CompileIgnition {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.CompileIgnition';
        // Denotes the end of the event CompileIgnition.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CompileIgnitionFinalization {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.CompileIgnitionFinalization';
        // Denotes the end of the event CompileIgnitionFinalization.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CompileScript {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.CompileScript';
        // Denotes the end of the event CompileScript.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CompileStreamedScript {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.CompileStreamedScript';
        // Denotes the end of the event CompileStreamedScript.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DeoptimizeCode {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.DeoptimizeCode';
        // Denotes the end of the event DeoptimizeCode.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ExternalCallback {
      interface B extends Base {
        args: {
        
        };
        name: 'V8.ExternalCallback';
        // Denotes the beginning of the event ExternalCallback.
        ph: 'B';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface E extends Base {
        args: {
        
        };
        name: 'V8.ExternalCallback';
        // Denotes the ending of the event ExternalCallback.
        ph: 'E';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_BACKGROUND_ARRAY_BUFFER_FREE {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_BACKGROUND_ARRAY_BUFFER_FREE';
        // Denotes the end of the event GC_BACKGROUND_ARRAY_BUFFER_FREE.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_BACKGROUND_STORE_BUFFER {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_BACKGROUND_STORE_BUFFER';
        // Denotes the end of the event GC_BACKGROUND_STORE_BUFFER.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_BACKGROUND_UNMAPPER {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_BACKGROUND_UNMAPPER';
        // Denotes the end of the event GC_BACKGROUND_UNMAPPER.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_HEAP_EMBEDDER_TRACING_EPILOGUE {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_HEAP_EMBEDDER_TRACING_EPILOGUE';
        // Denotes the end of the event GC_HEAP_EMBEDDER_TRACING_EPILOGUE.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_HEAP_EPILOGUE_REDUCE_NEW_SPACE {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_HEAP_EPILOGUE_REDUCE_NEW_SPACE';
        // Denotes the end of the event GC_HEAP_EPILOGUE_REDUCE_NEW_SPACE.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_HEAP_EPILOGUE {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_HEAP_EPILOGUE';
        // Denotes the end of the event GC_HEAP_EPILOGUE.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_HEAP_EXTERNAL_EPILOGUE {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_HEAP_EXTERNAL_EPILOGUE';
        // Denotes the end of the event GC_HEAP_EXTERNAL_EPILOGUE.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_HEAP_EXTERNAL_PROLOGUE {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_HEAP_EXTERNAL_PROLOGUE';
        // Denotes the end of the event GC_HEAP_EXTERNAL_PROLOGUE.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_HEAP_EXTERNAL_WEAK_GLOBAL_HANDLES {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_HEAP_EXTERNAL_WEAK_GLOBAL_HANDLES';
        // Denotes the end of the event GC_HEAP_EXTERNAL_WEAK_GLOBAL_HANDLES.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_HEAP_PROLOGUE {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_HEAP_PROLOGUE';
        // Denotes the end of the event GC_HEAP_PROLOGUE.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_BACKGROUND_EVACUATE_COPY {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_BACKGROUND_EVACUATE_COPY';
        // Denotes the end of the event GC_MC_BACKGROUND_EVACUATE_COPY.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_BACKGROUND_EVACUATE_UPDATE_POINTERS {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_BACKGROUND_EVACUATE_UPDATE_POINTERS';
        // Denotes the end of the event GC_MC_BACKGROUND_EVACUATE_UPDATE_POINTERS.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_BACKGROUND_MARKING {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_BACKGROUND_MARKING';
        // Denotes the end of the event GC_MC_BACKGROUND_MARKING.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_BACKGROUND_SWEEPING {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_BACKGROUND_SWEEPING';
        // Denotes the end of the event GC_MC_BACKGROUND_SWEEPING.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_CLEAR_FLUSHABLE_BYTECODE {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_CLEAR_FLUSHABLE_BYTECODE';
        // Denotes the end of the event GC_MC_CLEAR_FLUSHABLE_BYTECODE.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_CLEAR_FLUSHED_JS_FUNCTIONS {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_CLEAR_FLUSHED_JS_FUNCTIONS';
        // Denotes the end of the event GC_MC_CLEAR_FLUSHED_JS_FUNCTIONS.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_CLEAR_MAPS {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_CLEAR_MAPS';
        // Denotes the end of the event GC_MC_CLEAR_MAPS.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_CLEAR_STRING_TABLE {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_CLEAR_STRING_TABLE';
        // Denotes the end of the event GC_MC_CLEAR_STRING_TABLE.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_CLEAR_WEAK_COLLECTIONS {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_CLEAR_WEAK_COLLECTIONS';
        // Denotes the end of the event GC_MC_CLEAR_WEAK_COLLECTIONS.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_CLEAR_WEAK_LISTS {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_CLEAR_WEAK_LISTS';
        // Denotes the end of the event GC_MC_CLEAR_WEAK_LISTS.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_CLEAR_WEAK_REFERENCES {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_CLEAR_WEAK_REFERENCES';
        // Denotes the end of the event GC_MC_CLEAR_WEAK_REFERENCES.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_CLEAR {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_CLEAR';
        // Denotes the end of the event GC_MC_CLEAR.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_EPILOGUE {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_EPILOGUE';
        // Denotes the end of the event GC_MC_EPILOGUE.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_EVACUATE_CLEAN_UP {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_EVACUATE_CLEAN_UP';
        // Denotes the end of the event GC_MC_EVACUATE_CLEAN_UP.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_EVACUATE_COPY {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_EVACUATE_COPY';
        // Denotes the end of the event GC_MC_EVACUATE_COPY.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_EVACUATE_EPILOGUE {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_EVACUATE_EPILOGUE';
        // Denotes the end of the event GC_MC_EVACUATE_EPILOGUE.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_EVACUATE_PROLOGUE {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_EVACUATE_PROLOGUE';
        // Denotes the end of the event GC_MC_EVACUATE_PROLOGUE.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_EVACUATE_REBALANCE {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_EVACUATE_REBALANCE';
        // Denotes the end of the event GC_MC_EVACUATE_REBALANCE.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_EVACUATE_UPDATE_POINTERS_SLOTS_MAIN {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_EVACUATE_UPDATE_POINTERS_SLOTS_MAIN';
        // Denotes the end of the event GC_MC_EVACUATE_UPDATE_POINTERS_SLOTS_MAIN.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_EVACUATE_UPDATE_POINTERS_SLOTS_MAP_SPACE {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_EVACUATE_UPDATE_POINTERS_SLOTS_MAP_SPACE';
        // Denotes the end of the event GC_MC_EVACUATE_UPDATE_POINTERS_SLOTS_MAP_SPACE.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_EVACUATE_UPDATE_POINTERS_TO_NEW_ROOTS {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_EVACUATE_UPDATE_POINTERS_TO_NEW_ROOTS';
        // Denotes the end of the event GC_MC_EVACUATE_UPDATE_POINTERS_TO_NEW_ROOTS.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_EVACUATE_UPDATE_POINTERS_WEAK {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_EVACUATE_UPDATE_POINTERS_WEAK';
        // Denotes the end of the event GC_MC_EVACUATE_UPDATE_POINTERS_WEAK.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_EVACUATE_UPDATE_POINTERS {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_EVACUATE_UPDATE_POINTERS';
        // Denotes the end of the event GC_MC_EVACUATE_UPDATE_POINTERS.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_EVACUATE {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_EVACUATE';
        // Denotes the end of the event GC_MC_EVACUATE.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_FINISH {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_FINISH';
        // Denotes the end of the event GC_MC_FINISH.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_INCREMENTAL_EMBEDDER_PROLOGUE {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_INCREMENTAL_EMBEDDER_PROLOGUE';
        // Denotes the end of the event GC_MC_INCREMENTAL_EMBEDDER_PROLOGUE.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_INCREMENTAL_EMBEDDER_TRACING {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_INCREMENTAL_EMBEDDER_TRACING';
        // Denotes the end of the event GC_MC_INCREMENTAL_EMBEDDER_TRACING.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_INCREMENTAL_EXTERNAL_EPILOGUE {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_INCREMENTAL_EXTERNAL_EPILOGUE';
        // Denotes the end of the event GC_MC_INCREMENTAL_EXTERNAL_EPILOGUE.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_INCREMENTAL_EXTERNAL_PROLOGUE {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_INCREMENTAL_EXTERNAL_PROLOGUE';
        // Denotes the end of the event GC_MC_INCREMENTAL_EXTERNAL_PROLOGUE.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_INCREMENTAL_FINALIZE_BODY {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_INCREMENTAL_FINALIZE_BODY';
        // Denotes the end of the event GC_MC_INCREMENTAL_FINALIZE_BODY.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_INCREMENTAL_FINALIZE {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_INCREMENTAL_FINALIZE';
        // Denotes the end of the event GC_MC_INCREMENTAL_FINALIZE.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_INCREMENTAL_LAYOUT_CHANGE {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_INCREMENTAL_LAYOUT_CHANGE';
        // Denotes the end of the event GC_MC_INCREMENTAL_LAYOUT_CHANGE.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_INCREMENTAL_START {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_INCREMENTAL_START';
        // Denotes the end of the event GC_MC_INCREMENTAL_START.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_INCREMENTAL_SWEEPING {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_INCREMENTAL_SWEEPING';
        // Denotes the end of the event GC_MC_INCREMENTAL_SWEEPING.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_INCREMENTAL {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_INCREMENTAL';
        // Denotes the end of the event GC_MC_INCREMENTAL.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_MARK_EMBEDDER_TRACING_CLOSURE {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_MARK_EMBEDDER_TRACING_CLOSURE';
        // Denotes the end of the event GC_MC_MARK_EMBEDDER_TRACING_CLOSURE.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_MARK_EMBEDDER_TRACING {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_MARK_EMBEDDER_TRACING';
        // Denotes the end of the event GC_MC_MARK_EMBEDDER_TRACING.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_MARK_FINISH_INCREMENTAL {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_MARK_FINISH_INCREMENTAL';
        // Denotes the end of the event GC_MC_MARK_FINISH_INCREMENTAL.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_MARK_MAIN {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_MARK_MAIN';
        // Denotes the end of the event GC_MC_MARK_MAIN.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_MARK_ROOTS {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_MARK_ROOTS';
        // Denotes the end of the event GC_MC_MARK_ROOTS.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_MARK_WEAK_CLOSURE_EPHEMERON_MARKING {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_MARK_WEAK_CLOSURE_EPHEMERON_MARKING';
        // Denotes the end of the event GC_MC_MARK_WEAK_CLOSURE_EPHEMERON_MARKING.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_MARK_WEAK_CLOSURE_EPHEMERON {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_MARK_WEAK_CLOSURE_EPHEMERON';
        // Denotes the end of the event GC_MC_MARK_WEAK_CLOSURE_EPHEMERON.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_MARK_WEAK_CLOSURE_HARMONY {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_MARK_WEAK_CLOSURE_HARMONY';
        // Denotes the end of the event GC_MC_MARK_WEAK_CLOSURE_HARMONY.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_MARK_WEAK_CLOSURE_WEAK_HANDLES {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_MARK_WEAK_CLOSURE_WEAK_HANDLES';
        // Denotes the end of the event GC_MC_MARK_WEAK_CLOSURE_WEAK_HANDLES.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_MARK_WEAK_CLOSURE_WEAK_ROOTS {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_MARK_WEAK_CLOSURE_WEAK_ROOTS';
        // Denotes the end of the event GC_MC_MARK_WEAK_CLOSURE_WEAK_ROOTS.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_MARK_WEAK_CLOSURE {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_MARK_WEAK_CLOSURE';
        // Denotes the end of the event GC_MC_MARK_WEAK_CLOSURE.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_MARK {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_MARK';
        // Denotes the end of the event GC_MC_MARK.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_PROLOGUE {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_PROLOGUE';
        // Denotes the end of the event GC_MC_PROLOGUE.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_MC_SWEEP {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_MC_SWEEP';
        // Denotes the end of the event GC_MC_SWEEP.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_Objects_Stats {
      interface I extends Base {
        args: {
          dead: string;
          live: string;
        };
        name: 'V8.GC_Objects_Stats';
        // Denotes an event GC_Objects_Stats. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_SCAVENGER_BACKGROUND_SCAVENGE_PARALLEL {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_SCAVENGER_BACKGROUND_SCAVENGE_PARALLEL';
        // Denotes the end of the event GC_SCAVENGER_BACKGROUND_SCAVENGE_PARALLEL.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_SCAVENGER_PROCESS_ARRAY_BUFFERS {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_SCAVENGER_PROCESS_ARRAY_BUFFERS';
        // Denotes the end of the event GC_SCAVENGER_PROCESS_ARRAY_BUFFERS.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_SCAVENGER_SCAVENGE_FINALIZE {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_SCAVENGER_SCAVENGE_FINALIZE';
        // Denotes the end of the event GC_SCAVENGER_SCAVENGE_FINALIZE.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_SCAVENGER_SCAVENGE_PARALLEL {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_SCAVENGER_SCAVENGE_PARALLEL';
        // Denotes the end of the event GC_SCAVENGER_SCAVENGE_PARALLEL.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_SCAVENGER_SCAVENGE_ROOTS {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_SCAVENGER_SCAVENGE_ROOTS';
        // Denotes the end of the event GC_SCAVENGER_SCAVENGE_ROOTS.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_SCAVENGER_SCAVENGE_UPDATE_REFS {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_SCAVENGER_SCAVENGE_UPDATE_REFS';
        // Denotes the end of the event GC_SCAVENGER_SCAVENGE_UPDATE_REFS.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_SCAVENGER_SCAVENGE_WEAK_GLOBAL_HANDLES_IDENTIFY {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_SCAVENGER_SCAVENGE_WEAK_GLOBAL_HANDLES_IDENTIFY';
        // Denotes the end of the event GC_SCAVENGER_SCAVENGE_WEAK_GLOBAL_HANDLES_IDENTIFY.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_SCAVENGER_SCAVENGE_WEAK_GLOBAL_HANDLES_PROCESS {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_SCAVENGER_SCAVENGE_WEAK_GLOBAL_HANDLES_PROCESS';
        // Denotes the end of the event GC_SCAVENGER_SCAVENGE_WEAK_GLOBAL_HANDLES_PROCESS.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GC_SCAVENGER_SCAVENGE {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GC_SCAVENGER_SCAVENGE';
        // Denotes the end of the event GC_SCAVENGER_SCAVENGE.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GCCompactor {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GCCompactor';
        // Denotes the end of the event GCCompactor.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GCFinalizeMC {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GCFinalizeMC';
        // Denotes the end of the event GCFinalizeMC.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GCFinalizeMCReduceMemory {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GCFinalizeMCReduceMemory';
        // Denotes the end of the event GCFinalizeMCReduceMemory.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GCIdleNotification {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GCIdleNotification';
        // Denotes the end of the event GCIdleNotification.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GCIncrementalMarking {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GCIncrementalMarking';
        // Denotes the end of the event GCIncrementalMarking.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GCIncrementalMarkingFinalize {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GCIncrementalMarkingFinalize';
        // Denotes the end of the event GCIncrementalMarkingFinalize.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GCIncrementalMarkingLayoutChange {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GCIncrementalMarkingLayoutChange';
        // Denotes the end of the event GCIncrementalMarkingLayoutChange.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GCIncrementalMarkingStart {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GCIncrementalMarkingStart';
        // Denotes the end of the event GCIncrementalMarkingStart.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GCMarkCompactorMarkingSummary {
      interface I extends Base {
        args: {
          background_duration: number;
          duration: number;
        };
        name: 'V8.GCMarkCompactorMarkingSummary';
        // Denotes an event GCMarkCompactorMarkingSummary. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GCMarkCompactorSummary {
      interface I extends Base {
        args: {
          background_duration: number;
          duration: number;
        };
        name: 'V8.GCMarkCompactorSummary';
        // Denotes an event GCMarkCompactorSummary. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GCPhantomHandleProcessingCallback {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GCPhantomHandleProcessingCallback';
        // Denotes the end of the event GCPhantomHandleProcessingCallback.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace GCScavenger {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.GCScavenger';
        // Denotes the end of the event GCScavenger.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace HandleInterrupts {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.HandleInterrupts';
        // Denotes the end of the event HandleInterrupts.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ICStats {
      interface I extends Base {
        args: {
          'ic-stats': {
            data: {
              dict: number;
              functionName: string;
              instanceType: string;
              lineNum: number;
              map: string;
              offset: number;
              own: number;
              scriptName: string;
              state: string;
              type: string;
            }[];
          };
        };
        name: 'V8.ICStats';
        // Denotes an event ICStats. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace InvokeApiInterruptCallbacks {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.InvokeApiInterruptCallbacks';
        // Denotes the end of the event InvokeApiInterruptCallbacks.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace NewContext {
      interface B extends Base {
        args: {
        
        };
        name: 'V8.NewContext';
        // Denotes the beginning of the event NewContext.
        ph: 'B';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface E extends Base {
        args: {
          'runtime-call-stats': {
            API_Context_New?: {
            
            }[];
            API_FunctionTemplate_New?: {
            
            }[];
            API_ObjectTemplate_New?: {
            
            }[];
            API_Object_SetPrivate?: {
            
            }[];
            API_Persistent_New?: {
            
            }[];
            API_String_NewFromUtf8?: {
            
            }[];
            API_String_WriteUtf8?: {
            
            }[];
            AccessorGetterCallback?: {
            
            }[];
            AllocateInNewSpace?: {
            
            }[];
            CompileAnalyse?: {
            
            }[];
            CompileFunction?: {
            
            }[];
            CompileIgnition?: {
            
            }[];
            CompileIgnitionFinalization?: {
            
            }[];
            CompileLazy?: {
            
            }[];
            CompileRewriteReturnResult?: {
            
            }[];
            CompileScopeAnalysis?: {
            
            }[];
            CompileScript?: {
            
            }[];
            CreateArrayLiteralWithoutAllocationSite?: {
            
            }[];
            CreateObjectLiteralWithoutAllocationSite?: {
            
            }[];
            DeclareGlobals?: {
            
            }[];
            DeserializeContext?: {
            
            }[];
            FunctionCallback?: {
            
            }[];
            FunctionPrototypeGetter?: {
            
            }[];
            GC_Custom_SlowAllocateRaw?: {
            
            }[];
            Genesis?: {
            
            }[];
            HandleApiCall?: {
            
            }[];
            Invoke?: {
            
            }[];
            InvokeApiInterruptCallbacks?: {
            
            }[];
            JS_Execution?: {
            
            }[];
            KeyedStoreIC_Miss?: {
            
            }[];
            KeyedStoreIC_Slow?: {
            
            }[];
            KeyedStoreIC_StoreFastElementStub?: {
            
            }[];
            LoadGlobalIC_Miss?: {
            
            }[];
            LoadIC_FunctionPrototypeStub?: {
            
            }[];
            LoadIC_LoadConstantDH?: {
            
            }[];
            LoadIC_LoadConstantFromPrototypeDH?: {
            
            }[];
            LoadIC_LoadNativeDataPropertyDH?: {
            
            }[];
            LoadIC_LoadNonexistentDH?: {
            
            }[];
            LoadIC_Premonomorphic?: {
            
            }[];
            Map_SetPrototype?: {
            
            }[];
            Map_TransitionToDataProperty?: {
            
            }[];
            NewClosure?: {
            
            }[];
            NewClosure_Tenured?: {
            
            }[];
            ParseFunction?: {
            
            }[];
            ParseFunctionLiteral?: {
            
            }[];
            ParseProgram?: {
            
            }[];
            PreParseWithVariableResolution?: {
            
            }[];
            PrototypeMap_TransitionToAccessorProperty?: {
            
            }[];
            PrototypeMap_TransitionToDataProperty?: {
            
            }[];
            SetKeyedProperty?: {
            
            }[];
            SetNamedProperty?: {
            
            }[];
            StackGuard?: {
            
            }[];
            StoreGlobalIC_Miss?: {
            
            }[];
            StoreIC_Miss?: {
            
            }[];
            StoreIC_Premonomorphic?: {
            
            }[];
          };
        };
        name: 'V8.NewContext';
        // Denotes the ending of the event NewContext.
        ph: 'E';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace NewInstance {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'v8.newInstance';
        // Denotes the end of the event NewInstance.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OptimizeCode {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.OptimizeCode';
        // Denotes the end of the event OptimizeCode.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ParseFunction {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.ParseFunction';
        // Denotes the end of the event ParseFunction.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ParseOnBackground {
      interface X extends Base {
        args: {
          data: {
            requestId: string;
            url: string;
          };
        };
        bind_id?: string;
        // Duration.
        dur?: number;
        flow_in?: boolean;
        flow_out?: boolean;
        id?: string;
        name: 'v8.parseOnBackground';
        // Denotes the end of the event ParseOnBackground.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ParseProgram {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.ParseProgram';
        // Denotes the end of the event ParseProgram.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PreParse {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur?: number;
        name: 'V8.PreParse';
        // Denotes the end of the event PreParse.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RecompileConcurrent {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.RecompileConcurrent';
        // Denotes the end of the event RecompileConcurrent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RecompileSynchronous {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.RecompileSynchronous';
        // Denotes the end of the event RecompileSynchronous.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Run {
      interface X extends Base {
        args: {
          fileName?: string;
        };
        // Duration.
        dur: number;
        name: 'v8.run';
        // Denotes the end of the event Run.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_AddDictionaryProperty {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_AddDictionaryProperty';
        // Denotes the end of the event Runtime_Runtime_AddDictionaryProperty.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_AllocateInNewSpace {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_AllocateInNewSpace';
        // Denotes the end of the event Runtime_Runtime_AllocateInNewSpace.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_AllocateInTargetSpace {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_AllocateInTargetSpace';
        // Denotes the end of the event Runtime_Runtime_AllocateInTargetSpace.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_AllocateSeqTwoByteString {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_AllocateSeqTwoByteString';
        // Denotes the end of the event Runtime_Runtime_AllocateSeqTwoByteString.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_ArrayIndexOf {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_ArrayIndexOf';
        // Denotes the end of the event Runtime_Runtime_ArrayIndexOf.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_ArraySpeciesConstructor {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_ArraySpeciesConstructor';
        // Denotes the end of the event Runtime_Runtime_ArraySpeciesConstructor.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_CompileLazy {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_CompileLazy';
        // Denotes the end of the event Runtime_Runtime_CompileLazy.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_CompileOptimized_Concurrent {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_CompileOptimized_Concurrent';
        // Denotes the end of the event Runtime_Runtime_CompileOptimized_Concurrent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_CompleteInobjectSlackTrackingForMap {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_CompleteInobjectSlackTrackingForMap';
        // Denotes the end of the event Runtime_Runtime_CompleteInobjectSlackTrackingForMap.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_CreateArrayLiteral {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_CreateArrayLiteral';
        // Denotes the end of the event Runtime_Runtime_CreateArrayLiteral.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_CreateArrayLiteralWithoutAllocationSite {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_CreateArrayLiteralWithoutAllocationSite';
        // Denotes the end of the event Runtime_Runtime_CreateArrayLiteralWithoutAllocationSite.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_CreateDataProperty {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_CreateDataProperty';
        // Denotes the end of the event Runtime_Runtime_CreateDataProperty.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_CreateJSGeneratorObject {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_CreateJSGeneratorObject';
        // Denotes the end of the event Runtime_Runtime_CreateJSGeneratorObject.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_CreateListFromArrayLike {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_CreateListFromArrayLike';
        // Denotes the end of the event Runtime_Runtime_CreateListFromArrayLike.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_CreateObjectLiteral {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_CreateObjectLiteral';
        // Denotes the end of the event Runtime_Runtime_CreateObjectLiteral.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_CreateObjectLiteralWithoutAllocationSite {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_CreateObjectLiteralWithoutAllocationSite';
        // Denotes the end of the event Runtime_Runtime_CreateObjectLiteralWithoutAllocationSite.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_CreateRegExpLiteral {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_CreateRegExpLiteral';
        // Denotes the end of the event Runtime_Runtime_CreateRegExpLiteral.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_DateCurrentTime {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_DateCurrentTime';
        // Denotes the end of the event Runtime_Runtime_DateCurrentTime.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_DeclareEvalFunction {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_DeclareEvalFunction';
        // Denotes the end of the event Runtime_Runtime_DeclareEvalFunction.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_DeclareGlobals {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_DeclareGlobals';
        // Denotes the end of the event Runtime_Runtime_DeclareGlobals.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_DefineAccessorPropertyUnchecked {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_DefineAccessorPropertyUnchecked';
        // Denotes the end of the event Runtime_Runtime_DefineAccessorPropertyUnchecked.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_DefineClass {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_DefineClass';
        // Denotes the end of the event Runtime_Runtime_DefineClass.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_DefineDataPropertyInLiteral {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_DefineDataPropertyInLiteral';
        // Denotes the end of the event Runtime_Runtime_DefineDataPropertyInLiteral.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_DeleteProperty {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_DeleteProperty';
        // Denotes the end of the event Runtime_Runtime_DeleteProperty.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_ElementsTransitionAndStoreIC_Miss {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_ElementsTransitionAndStoreIC_Miss';
        // Denotes the end of the event Runtime_Runtime_ElementsTransitionAndStoreIC_Miss.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_ForInEnumerate {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_ForInEnumerate';
        // Denotes the end of the event Runtime_Runtime_ForInEnumerate.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_GetOwnPropertyDescriptor {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_GetOwnPropertyDescriptor';
        // Denotes the end of the event Runtime_Runtime_GetOwnPropertyDescriptor.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_GetProperty {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_GetProperty';
        // Denotes the end of the event Runtime_Runtime_GetProperty.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_HasInPrototypeChain {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_HasInPrototypeChain';
        // Denotes the end of the event Runtime_Runtime_HasInPrototypeChain.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_HasProperty {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_HasProperty';
        // Denotes the end of the event Runtime_Runtime_HasProperty.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_Interrupt {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_Interrupt';
        // Denotes the end of the event Runtime_Runtime_Interrupt.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_KeyedLoadIC_Miss {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_KeyedLoadIC_Miss';
        // Denotes the end of the event Runtime_Runtime_KeyedLoadIC_Miss.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_KeyedStoreIC_Miss {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_KeyedStoreIC_Miss';
        // Denotes the end of the event Runtime_Runtime_KeyedStoreIC_Miss.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_KeyedStoreIC_Slow {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_KeyedStoreIC_Slow';
        // Denotes the end of the event Runtime_Runtime_KeyedStoreIC_Slow.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_LoadAccessorProperty {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_LoadAccessorProperty';
        // Denotes the end of the event Runtime_Runtime_LoadAccessorProperty.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_LoadCallbackProperty {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_LoadCallbackProperty';
        // Denotes the end of the event Runtime_Runtime_LoadCallbackProperty.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_LoadElementWithInterceptor {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_LoadElementWithInterceptor';
        // Denotes the end of the event Runtime_Runtime_LoadElementWithInterceptor.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_LoadGlobalIC_Miss {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_LoadGlobalIC_Miss';
        // Denotes the end of the event Runtime_Runtime_LoadGlobalIC_Miss.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_LoadGlobalIC_Slow {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_LoadGlobalIC_Slow';
        // Denotes the end of the event Runtime_Runtime_LoadGlobalIC_Slow.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_LoadIC_Miss {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur?: number;
        name: 'V8.Runtime_Runtime_LoadIC_Miss';
        // Denotes the end of the event Runtime_Runtime_LoadIC_Miss.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_LoadLookupSlot {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_LoadLookupSlot';
        // Denotes the end of the event Runtime_Runtime_LoadLookupSlot.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_LoadLookupSlotForCall {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_LoadLookupSlotForCall';
        // Denotes the end of the event Runtime_Runtime_LoadLookupSlotForCall.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_LoadLookupSlotInsideTypeof {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_LoadLookupSlotInsideTypeof';
        // Denotes the end of the event Runtime_Runtime_LoadLookupSlotInsideTypeof.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_LoadPropertyWithInterceptor {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_LoadPropertyWithInterceptor';
        // Denotes the end of the event Runtime_Runtime_LoadPropertyWithInterceptor.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_MapGrow {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_MapGrow';
        // Denotes the end of the event Runtime_Runtime_MapGrow.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_MapShrink {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_MapShrink';
        // Denotes the end of the event Runtime_Runtime_MapShrink.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_NewArray {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_NewArray';
        // Denotes the end of the event Runtime_Runtime_NewArray.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_NewClosure_Tenured {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_NewClosure_Tenured';
        // Denotes the end of the event Runtime_Runtime_NewClosure_Tenured.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_NewClosure {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_NewClosure';
        // Denotes the end of the event Runtime_Runtime_NewClosure.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_NewObject {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_NewObject';
        // Denotes the end of the event Runtime_Runtime_NewObject.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_NewScriptContext {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_NewScriptContext';
        // Denotes the end of the event Runtime_Runtime_NewScriptContext.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_NotifyDeoptimized {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_NotifyDeoptimized';
        // Denotes the end of the event Runtime_Runtime_NotifyDeoptimized.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_NumberToString {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_NumberToString';
        // Denotes the end of the event Runtime_Runtime_NumberToString.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_ObjectCreate {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_ObjectCreate';
        // Denotes the end of the event Runtime_Runtime_ObjectCreate.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_ObjectEntries {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_ObjectEntries';
        // Denotes the end of the event Runtime_Runtime_ObjectEntries.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_ObjectGetOwnPropertyNames {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_ObjectGetOwnPropertyNames';
        // Denotes the end of the event Runtime_Runtime_ObjectGetOwnPropertyNames.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_ObjectHasOwnProperty {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_ObjectHasOwnProperty';
        // Denotes the end of the event Runtime_Runtime_ObjectHasOwnProperty.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_ObjectKeys {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_ObjectKeys';
        // Denotes the end of the event Runtime_Runtime_ObjectKeys.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_OrdinaryHasInstance {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_OrdinaryHasInstance';
        // Denotes the end of the event Runtime_Runtime_OrdinaryHasInstance.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_PrepareElementsForSort {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_PrepareElementsForSort';
        // Denotes the end of the event Runtime_Runtime_PrepareElementsForSort.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_PushBlockContext {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_PushBlockContext';
        // Denotes the end of the event Runtime_Runtime_PushBlockContext.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_PushCatchContext {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_PushCatchContext';
        // Denotes the end of the event Runtime_Runtime_PushCatchContext.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_PushWithContext {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_PushWithContext';
        // Denotes the end of the event Runtime_Runtime_PushWithContext.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_RegExpExec {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_RegExpExec';
        // Denotes the end of the event Runtime_Runtime_RegExpExec.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_RegExpExecMultiple {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_RegExpExecMultiple';
        // Denotes the end of the event Runtime_Runtime_RegExpExecMultiple.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_RegExpInitializeAndCompile {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_RegExpInitializeAndCompile';
        // Denotes the end of the event Runtime_Runtime_RegExpInitializeAndCompile.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_RegExpReplace {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_RegExpReplace';
        // Denotes the end of the event Runtime_Runtime_RegExpReplace.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_ResolvePossiblyDirectEval {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_ResolvePossiblyDirectEval';
        // Denotes the end of the event Runtime_Runtime_ResolvePossiblyDirectEval.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_RunMicrotaskCallback {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_RunMicrotaskCallback';
        // Denotes the end of the event Runtime_Runtime_RunMicrotaskCallback.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_SetGrow {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_SetGrow';
        // Denotes the end of the event Runtime_Runtime_SetGrow.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_SetKeyedProperty {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_SetKeyedProperty';
        // Denotes the end of the event Runtime_Runtime_SetKeyedProperty.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_SetNamedProperty {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_SetNamedProperty';
        // Denotes the end of the event Runtime_Runtime_SetNamedProperty.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_ShrinkPropertyDictionary {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_ShrinkPropertyDictionary';
        // Denotes the end of the event Runtime_Runtime_ShrinkPropertyDictionary.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_StackGuard {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_StackGuard';
        // Denotes the end of the event Runtime_Runtime_StackGuard.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_StoreCallbackProperty {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_StoreCallbackProperty';
        // Denotes the end of the event Runtime_Runtime_StoreCallbackProperty.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_StoreGlobalIC_Miss {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_StoreGlobalIC_Miss';
        // Denotes the end of the event Runtime_Runtime_StoreGlobalIC_Miss.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_StoreGlobalIC_Slow {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_StoreGlobalIC_Slow';
        // Denotes the end of the event Runtime_Runtime_StoreGlobalIC_Slow.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_StoreIC_Miss {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_StoreIC_Miss';
        // Denotes the end of the event Runtime_Runtime_StoreIC_Miss.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_StoreInArrayLiteralIC_Miss {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_StoreInArrayLiteralIC_Miss';
        // Denotes the end of the event Runtime_Runtime_StoreInArrayLiteralIC_Miss.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_StoreLookupSlot_Sloppy {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_StoreLookupSlot_Sloppy';
        // Denotes the end of the event Runtime_Runtime_StoreLookupSlot_Sloppy.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_StoreLookupSlot_Strict {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_StoreLookupSlot_Strict';
        // Denotes the end of the event Runtime_Runtime_StoreLookupSlot_Strict.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_StringAdd {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_StringAdd';
        // Denotes the end of the event Runtime_Runtime_StringAdd.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_StringBuilderConcat {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_StringBuilderConcat';
        // Denotes the end of the event Runtime_Runtime_StringBuilderConcat.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_StringCharCodeAt {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_StringCharCodeAt';
        // Denotes the end of the event Runtime_Runtime_StringCharCodeAt.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_StringEqual {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_StringEqual';
        // Denotes the end of the event Runtime_Runtime_StringEqual.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_StringIncludes {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_StringIncludes';
        // Denotes the end of the event Runtime_Runtime_StringIncludes.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_StringIndexOfUnchecked {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_StringIndexOfUnchecked';
        // Denotes the end of the event Runtime_Runtime_StringIndexOfUnchecked.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_StringLessThan {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_StringLessThan';
        // Denotes the end of the event Runtime_Runtime_StringLessThan.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_StringParseFloat {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_StringParseFloat';
        // Denotes the end of the event Runtime_Runtime_StringParseFloat.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_StringParseInt {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_StringParseInt';
        // Denotes the end of the event Runtime_Runtime_StringParseInt.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_StringSplit {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_StringSplit';
        // Denotes the end of the event Runtime_Runtime_StringSplit.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_StringSubstring {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_StringSubstring';
        // Denotes the end of the event Runtime_Runtime_StringSubstring.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_StringToArray {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_StringToArray';
        // Denotes the end of the event Runtime_Runtime_StringToArray.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_StringToLowerCaseIntl {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_StringToLowerCaseIntl';
        // Denotes the end of the event Runtime_Runtime_StringToLowerCaseIntl.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_StringToNumber {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_StringToNumber';
        // Denotes the end of the event Runtime_Runtime_StringToNumber.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_Throw {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_Throw';
        // Denotes the end of the event Runtime_Runtime_Throw.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_ThrowCalledNonCallable {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_ThrowCalledNonCallable';
        // Denotes the end of the event Runtime_Runtime_ThrowCalledNonCallable.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_ThrowConstructedNonConstructable {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_ThrowConstructedNonConstructable';
        // Denotes the end of the event Runtime_Runtime_ThrowConstructedNonConstructable.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_ToString {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_ToString';
        // Denotes the end of the event Runtime_Runtime_ToString.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_TransitionElementsKind {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_TransitionElementsKind';
        // Denotes the end of the event Runtime_Runtime_TransitionElementsKind.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Runtime_Runtime_UnwindAndFindExceptionHandler {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.Runtime_Runtime_UnwindAndFindExceptionHandler';
        // Denotes the end of the event Runtime_Runtime_UnwindAndFindExceptionHandler.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace RuntimeStats {
      interface I extends Base {
        args: {
          'runtime-call-stats': {
            CompileBackgroundAnalyse?: {
            
            }[];
            CompileBackgroundCompileTask?: {
            
            }[];
            CompileBackgroundIgnition?: {
            
            }[];
            CompileBackgroundRewriteReturnResult?: {
            
            }[];
            CompileBackgroundScopeAnalysis?: {
            
            }[];
            CompileBackgroundScript?: {
            
            }[];
            GetMoreDataCallback?: {
            
            }[];
            ParseBackgroundFunctionLiteral?: {
            
            }[];
            ParseBackgroundProgram?: {
            
            }[];
            PreParseBackgroundWithVariableResolution?: {
            
            }[];
            RecompileConcurrent?: {
            
            }[];
          };
        };
        name: 'V8.RuntimeStats';
        // Denotes an event RuntimeStats. There are no begining/ending phases.
        ph: 'I';
        s: string;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ScriptCompiler {
      interface B extends Base {
        args: {
        
        };
        name: 'V8.ScriptCompiler';
        // Denotes the beginning of the event ScriptCompiler.
        ph: 'B';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface E extends Base {
        args: {
          'runtime-call-stats'?: {
            API_ScriptCompiler_CompileUnbound?: {
            
            }[];
            CompileAnalyse?: {
            
            }[];
            CompileIgnition?: {
            
            }[];
            CompileIgnitionFinalization?: {
            
            }[];
            CompileRewriteReturnResult?: {
            
            }[];
            CompileScopeAnalysis?: {
            
            }[];
            CompileScript?: {
            
            }[];
            GC_Custom_SlowAllocateRaw?: {
            
            }[];
            ParseArrowFunctionLiteral?: {
            
            }[];
            ParseFunctionLiteral?: {
            
            }[];
            ParseProgram?: {
            
            }[];
            PreParseArrowFunctionLiteral?: {
            
            }[];
            PreParseWithVariableResolution?: {
            
            }[];
          };
        };
        name: 'V8.ScriptCompiler';
        // Denotes the ending of the event ScriptCompiler.
        ph: 'E';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace StackGuard {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'V8.StackGuard';
        // Denotes the end of the event StackGuard.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Task {
      interface B extends Base {
        args: {
        
        };
        name: 'V8.Task';
        // Denotes the beginning of the event Task.
        ph: 'B';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface E extends Base {
        args: {
          'runtime-call-stats': {
            GCEpilogueCallback?: {
            
            }[];
            GCPrologueCallback?: {
            
            }[];
            GC_BACKGROUND_ARRAY_BUFFER_FREE?: {
            
            }[];
            GC_BACKGROUND_STORE_BUFFER?: {
            
            }[];
            GC_BACKGROUND_UNMAPPER?: {
            
            }[];
            GC_HEAP_EMBEDDER_TRACING_EPILOGUE?: {
            
            }[];
            GC_HEAP_EPILOGUE?: {
            
            }[];
            GC_HEAP_EPILOGUE_REDUCE_NEW_SPACE?: {
            
            }[];
            GC_HEAP_EXTERNAL_EPILOGUE?: {
            
            }[];
            GC_HEAP_EXTERNAL_PROLOGUE?: {
            
            }[];
            GC_HEAP_EXTERNAL_WEAK_GLOBAL_HANDLES?: {
            
            }[];
            GC_HEAP_PROLOGUE?: {
            
            }[];
            GC_MC_BACKGROUND_EVACUATE_COPY?: {
            
            }[];
            GC_MC_BACKGROUND_EVACUATE_UPDATE_POINTERS?: {
            
            }[];
            GC_MC_BACKGROUND_MARKING?: {
            
            }[];
            GC_MC_BACKGROUND_SWEEPING?: {
            
            }[];
            GC_MC_CLEAR?: {
            
            }[];
            GC_MC_CLEAR_FLUSHABLE_BYTECODE?: {
            
            }[];
            GC_MC_CLEAR_FLUSHED_JS_FUNCTIONS?: {
            
            }[];
            GC_MC_CLEAR_MAPS?: {
            
            }[];
            GC_MC_CLEAR_STRING_TABLE?: {
            
            }[];
            GC_MC_CLEAR_WEAK_COLLECTIONS?: {
            
            }[];
            GC_MC_CLEAR_WEAK_LISTS?: {
            
            }[];
            GC_MC_CLEAR_WEAK_REFERENCES?: {
            
            }[];
            GC_MC_EPILOGUE?: {
            
            }[];
            GC_MC_EVACUATE?: {
            
            }[];
            GC_MC_EVACUATE_CLEAN_UP?: {
            
            }[];
            GC_MC_EVACUATE_COPY?: {
            
            }[];
            GC_MC_EVACUATE_EPILOGUE?: {
            
            }[];
            GC_MC_EVACUATE_PROLOGUE?: {
            
            }[];
            GC_MC_EVACUATE_REBALANCE?: {
            
            }[];
            GC_MC_EVACUATE_UPDATE_POINTERS?: {
            
            }[];
            GC_MC_EVACUATE_UPDATE_POINTERS_SLOTS_MAIN?: {
            
            }[];
            GC_MC_EVACUATE_UPDATE_POINTERS_SLOTS_MAP_SPACE?: {
            
            }[];
            GC_MC_EVACUATE_UPDATE_POINTERS_TO_NEW_ROOTS?: {
            
            }[];
            GC_MC_EVACUATE_UPDATE_POINTERS_WEAK?: {
            
            }[];
            GC_MC_FINISH?: {
            
            }[];
            GC_MC_INCREMENTAL?: {
            
            }[];
            GC_MC_INCREMENTAL_EMBEDDER_PROLOGUE?: {
            
            }[];
            GC_MC_INCREMENTAL_EMBEDDER_TRACING?: {
            
            }[];
            GC_MC_INCREMENTAL_EXTERNAL_EPILOGUE?: {
            
            }[];
            GC_MC_INCREMENTAL_EXTERNAL_PROLOGUE?: {
            
            }[];
            GC_MC_INCREMENTAL_FINALIZE?: {
            
            }[];
            GC_MC_INCREMENTAL_FINALIZE_BODY?: {
            
            }[];
            GC_MC_INCREMENTAL_SWEEPING?: {
            
            }[];
            GC_MC_MARK?: {
            
            }[];
            GC_MC_MARK_EMBEDDER_TRACING?: {
            
            }[];
            GC_MC_MARK_EMBEDDER_TRACING_CLOSURE?: {
            
            }[];
            GC_MC_MARK_FINISH_INCREMENTAL?: {
            
            }[];
            GC_MC_MARK_MAIN?: {
            
            }[];
            GC_MC_MARK_ROOTS?: {
            
            }[];
            GC_MC_MARK_WEAK_CLOSURE?: {
            
            }[];
            GC_MC_MARK_WEAK_CLOSURE_EPHEMERON?: {
            
            }[];
            GC_MC_MARK_WEAK_CLOSURE_EPHEMERON_MARKING?: {
            
            }[];
            GC_MC_MARK_WEAK_CLOSURE_HARMONY?: {
            
            }[];
            GC_MC_MARK_WEAK_CLOSURE_WEAK_HANDLES?: {
            
            }[];
            GC_MC_MARK_WEAK_CLOSURE_WEAK_ROOTS?: {
            
            }[];
            GC_MC_PROLOGUE?: {
            
            }[];
            GC_MC_SWEEP?: {
            
            }[];
            GC_MC_SWEEP_CODE?: {
            
            }[];
            GC_MC_SWEEP_MAP?: {
            
            }[];
            GC_MC_SWEEP_OLD?: {
            
            }[];
            GC_SCAVENGER_BACKGROUND_SCAVENGE_PARALLEL?: {
            
            }[];
            GC_SCAVENGER_PROCESS_ARRAY_BUFFERS?: {
            
            }[];
            GC_SCAVENGER_SCAVENGE?: {
            
            }[];
            GC_SCAVENGER_SCAVENGE_FINALIZE?: {
            
            }[];
            GC_SCAVENGER_SCAVENGE_PARALLEL?: {
            
            }[];
            GC_SCAVENGER_SCAVENGE_ROOTS?: {
            
            }[];
            GC_SCAVENGER_SCAVENGE_UPDATE_REFS?: {
            
            }[];
            GC_SCAVENGER_SCAVENGE_WEAK_GLOBAL_HANDLES_IDENTIFY?: {
            
            }[];
            GC_SCAVENGER_SCAVENGE_WEAK_GLOBAL_HANDLES_PROCESS?: {
            
            }[];
          };
        };
        name: 'V8.Task';
        // Denotes the ending of the event Task.
        ph: 'E';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace V8ContextSnapshot {
    type InstallRuntimeEnabled = 
      TraceEvent.V8ContextSnapshot.InstallRuntimeEnabled.X;
  
    namespace InstallRuntimeEnabled {
      interface X extends Base {
        args: {
          IsMainFrame: boolean;
        };
        // Duration.
        dur: number;
        name: 'V8ContextSnapshot::InstallRuntimeEnabled';
        // Denotes the end of the event InstallRuntimeEnabled.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace VerifiedRulesetDealer {
    type GetRuleset = 
      TraceEvent.VerifiedRulesetDealer.GetRuleset.X;
  
    namespace GetRuleset {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'VerifiedRulesetDealer::GetRuleset';
        // Denotes the end of the event GetRuleset.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace View {
    type Layout = 
      TraceEvent.View.Layout.X;
  
    type Layoutbounds_changed = 
      TraceEvent.View.Layoutbounds_changed.X;
  
    type Layoutset_bounds = 
      TraceEvent.View.Layoutset_bounds.X;
  
    type OnPaint = 
      TraceEvent.View.OnPaint.X;
  
    type OnPaintBackground = 
      TraceEvent.View.OnPaintBackground.X;
  
    type OnPaintBorder = 
      TraceEvent.View.OnPaintBorder.X;
  
    type Paint = 
      TraceEvent.View.Paint.X;
  
    type PaintChildren = 
      TraceEvent.View.PaintChildren.X;
  
    namespace Layout {
      interface X extends Base {
        args: {
          class: string;
        };
        // Duration.
        dur: number;
        name: 'View::Layout';
        // Denotes the end of the event Layout.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Layoutbounds_changed {
      interface X extends Base {
        args: {
          class: string;
        };
        // Duration.
        dur: number;
        name: 'View::Layout(bounds_changed)';
        // Denotes the end of the event Layoutbounds_changed.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Layoutset_bounds {
      interface X extends Base {
        args: {
          class: string;
        };
        // Duration.
        dur: number;
        name: 'View::Layout(set_bounds)';
        // Denotes the end of the event Layoutset_bounds.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnPaint {
      interface X extends Base {
        args: {
          class: string;
        };
        // Duration.
        dur: number;
        name: 'View::OnPaint';
        // Denotes the end of the event OnPaint.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnPaintBackground {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'View::OnPaintBackground';
        // Denotes the end of the event OnPaintBackground.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace OnPaintBorder {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'View::OnPaintBorder';
        // Denotes the end of the event OnPaintBorder.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Paint {
      interface X extends Base {
        args: {
          class: string;
        };
        // Duration.
        dur: number;
        name: 'View::Paint';
        // Denotes the end of the event Paint.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace PaintChildren {
      interface X extends Base {
        args: {
          class: string;
        };
        // Duration.
        dur: number;
        name: 'View::PaintChildren';
        // Denotes the end of the event PaintChildren.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ViewHostMsg_DidContentsPreferredSizeChange {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ViewHostMsg_DidContentsPreferredSizeChange';
      // Denotes the end of the event ViewHostMsg_DidContentsPreferredSizeChange.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ViewHostMsg_DocumentAvailableInMainFrame {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ViewHostMsg_DocumentAvailableInMainFrame';
      // Denotes the end of the event ViewHostMsg_DocumentAvailableInMainFrame.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ViewHostMsg_UpdateZoomLimits {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ViewHostMsg_UpdateZoomLimits';
      // Denotes the end of the event ViewHostMsg_UpdateZoomLimits.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ViewMsg_EnablePreferredSizeChangedMode {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'ViewMsg_EnablePreferredSizeChangedMode';
      // Denotes the end of the event ViewMsg_EnablePreferredSizeChangedMode.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace VirtualboolGrRenderTargetOpList {
    type OnExecuteGrOpFlushState = 
      TraceEvent.VirtualboolGrRenderTargetOpList.OnExecuteGrOpFlushState.X;
  
    namespace OnExecuteGrOpFlushState {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'virtual bool GrRenderTargetOpList::onExecute(GrOpFlushState *)';
        // Denotes the end of the event OnExecuteGrOpFlushState.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace VirtualGrOp {
    namespace CombineResultnamespace {
      namespace FillRectOp {
        type OnCombineIfPossibleGrOpGrCaps = 
          TraceEvent.VirtualGrOp.CombineResultnamespace.FillRectOp.OnCombineIfPossibleGrOpGrCaps.X;
      
        namespace OnCombineIfPossibleGrOpGrCaps {
          interface X extends Base {
            args: {
            
            };
            // Duration.
            dur: number;
            name: 'virtual GrOp::CombineResult (anonymous namespace)::FillRectOp::onCombineIfPossible(GrOp *, const GrCaps &)';
            // Denotes the end of the event OnCombineIfPossibleGrOpGrCaps.
            ph: 'X';
            tdur: number;
            // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
            tts: number;
          }
        }
      }
    
      namespace TextureOp {
        type OnCombineIfPossibleGrOpGrCaps = 
          TraceEvent.VirtualGrOp.CombineResultnamespace.TextureOp.OnCombineIfPossibleGrOpGrCaps.X;
      
        namespace OnCombineIfPossibleGrOpGrCaps {
          interface X extends Base {
            args: {
            
            };
            // Duration.
            dur: number;
            name: 'virtual GrOp::CombineResult (anonymous namespace)::TextureOp::onCombineIfPossible(GrOp *, const GrCaps &)';
            // Denotes the end of the event OnCombineIfPossibleGrOpGrCaps.
            ph: 'X';
            tdur: number;
            // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
            tts: number;
          }
        }
      }
    }
  }

  namespace Virtualnamespace {
    namespace FillRectOp {
      namespace OnPrepareDrawsGrMeshDrawOp {
        type Target = 
          TraceEvent.Virtualnamespace.FillRectOp.OnPrepareDrawsGrMeshDrawOp.Target.X;
      
        namespace Target {
          interface X extends Base {
            args: {
            
            };
            // Duration.
            dur: number;
            name: 'virtual void (anonymous namespace)::FillRectOp::onPrepareDraws(GrMeshDrawOp::Target *)';
            // Denotes the end of the event Target.
            ph: 'X';
            tdur: number;
            // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
            tts: number;
          }
        }
      }
    }
  
    namespace TextureOp {
      namespace OnPrepareDrawsGrMeshDrawOp {
        type Target = 
          TraceEvent.Virtualnamespace.TextureOp.OnPrepareDrawsGrMeshDrawOp.Target.X;
      
        namespace Target {
          interface X extends Base {
            args: {
            
            };
            // Duration.
            dur: number;
            name: 'virtual void (anonymous namespace)::TextureOp::onPrepareDraws(GrMeshDrawOp::Target *)';
            // Denotes the end of the event Target.
            ph: 'X';
            tdur: number;
            // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
            tts: number;
          }
        }
      }
    }
  }

  namespace VisibleUnits {
    type CanonicalPosition = 
      TraceEvent.VisibleUnits.CanonicalPosition.X;
  
    type MostBackwardCaretPosition = 
      TraceEvent.VisibleUnits.MostBackwardCaretPosition.X;
  
    type MostForwardCaretPosition = 
      TraceEvent.VisibleUnits.MostForwardCaretPosition.X;
  
    namespace CanonicalPosition {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'VisibleUnits::canonicalPosition';
        // Denotes the end of the event CanonicalPosition.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace MostBackwardCaretPosition {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'VisibleUnits::mostBackwardCaretPosition';
        // Denotes the end of the event MostBackwardCaretPosition.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace MostForwardCaretPosition {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'VisibleUnits::mostForwardCaretPosition';
        // Denotes the end of the event MostForwardCaretPosition.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Visitedlink {
    namespace Mojom {
      type VisitedLinkNotificationSink = 
        TraceEvent.Visitedlink.Mojom.VisitedLinkNotificationSink.X;
    
      namespace VisitedLinkNotificationSink {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'visitedlink.mojom.VisitedLinkNotificationSink';
          // Denotes the end of the event VisitedLinkNotificationSink.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace VisuallyComplete100 {
    interface b extends Base {
      args: {
      
      };
      id: string;
      name: 'Visually Complete 100%';
      // Denotes the beginning of the nestable async flow event VisuallyComplete100.
      ph: 'b';
    }
  
    interface e extends Base {
      args: {
      
      };
      id: string;
      name: 'Visually Complete 100%';
      // Denotes a step into the nestable async flow event VisuallyComplete100.
      ph: 'e';
    }
  }

  namespace VisualViewport {
    type MainFrameDidChangeSize = 
      TraceEvent.VisualViewport.MainFrameDidChangeSize.X;
  
    type SetSize = 
      TraceEvent.VisualViewport.SetSize.X;
  
    namespace MainFrameDidChangeSize {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'VisualViewport::mainFrameDidChangeSize';
        // Denotes the end of the event MainFrameDidChangeSize.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetSize {
      interface X extends Base {
        args: {
          height: number;
          width: number;
        };
        // Duration.
        dur: number;
        name: 'VisualViewport::setSize';
        // Denotes the end of the event SetSize.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Viz {
    type BeginFrameArgs = 
      TraceEvent.Viz.BeginFrameArgs.s;
  
    type SharedQuadState = 
      TraceEvent.Viz.SharedQuadState.D;
  
    namespace BeginFrameArgs {
      interface s extends Base {
        args: {
        
        };
        id: string;
        name: 'viz::BeginFrameArgs';
        // Denotes the beginning of the async flow event BeginFrameArgs.
        ph: 's';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace Mojom {
      type CompositingModeReporter = 
        TraceEvent.Viz.Mojom.CompositingModeReporter.X;
    
      type CompositorFrameSink = 
        TraceEvent.Viz.Mojom.CompositorFrameSink.X;
    
      type CompositorFrameSinkClient = 
        TraceEvent.Viz.Mojom.CompositorFrameSinkClient.X;
    
      type DisplayClient = 
        TraceEvent.Viz.Mojom.DisplayClient.X;
    
      type FrameSinkManager = 
        TraceEvent.Viz.Mojom.FrameSinkManager.X;
    
      type FrameSinkManagerClient = 
        TraceEvent.Viz.Mojom.FrameSinkManagerClient.X;
    
      type GpuHost = 
        TraceEvent.Viz.Mojom.GpuHost.X;
    
      type GpuService = 
        TraceEvent.Viz.Mojom.GpuService.X;
    
      namespace CompositingModeReporter {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'viz.mojom.CompositingModeReporter';
          // Denotes the end of the event CompositingModeReporter.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace CompositorFrameSink {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'viz.mojom.CompositorFrameSink';
          // Denotes the end of the event CompositorFrameSink.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace CompositorFrameSinkClient {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur?: number;
          name: 'viz.mojom.CompositorFrameSinkClient';
          // Denotes the end of the event CompositorFrameSinkClient.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace DisplayClient {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'viz.mojom.DisplayClient';
          // Denotes the end of the event DisplayClient.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace FrameSinkManager {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'viz.mojom.FrameSinkManager';
          // Denotes the end of the event FrameSinkManager.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace FrameSinkManagerClient {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'viz.mojom.FrameSinkManagerClient';
          // Denotes the end of the event FrameSinkManagerClient.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace GpuHost {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'viz.mojom.GpuHost';
          // Denotes the end of the event GpuHost.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace GpuService {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'viz.mojom.GpuService';
          // Denotes the end of the event GpuService.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  
    namespace SharedQuadState {
      interface D extends Base {
        args: {
        
        };
        id: string;
        name: 'viz::SharedQuadState';
        // Denotes a delete object of the event SharedQuadState.
        ph: 'D';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace WaitingfornextBeginFrame {
    interface I extends Base {
      args: {
      
      };
      name: 'Waiting for next BeginFrame';
      // Denotes an event WaitingfornextBeginFrame. There are no begining/ending phases.
      ph: 'I';
      s: string;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Web_cache {
    namespace Mojom {
      type WebCache = 
        TraceEvent.Web_cache.Mojom.WebCache.X;
    
      namespace WebCache {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'web_cache.mojom.WebCache';
          // Denotes the end of the event WebCache.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace WebContentsImpl {
    type CreateRenderFrameForRenderManager = 
      TraceEvent.WebContentsImpl.CreateRenderFrameForRenderManager.X;
  
    type CreateRenderViewForRenderManager = 
      TraceEvent.WebContentsImpl.CreateRenderViewForRenderManager.X;
  
    type CreateWithOpener = 
      TraceEvent.WebContentsImpl.CreateWithOpener.X;
  
    type DidFinishNavigation = 
      TraceEvent.WebContentsImpl.DidFinishNavigation.X;
  
    type DidStartNavigation = 
      TraceEvent.WebContentsImpl.DidStartNavigation.X;
  
    type ReadyToCommitNavigation = 
      TraceEvent.WebContentsImpl.ReadyToCommitNavigation.X;
  
    namespace CreateRenderFrameForRenderManager {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::CreateRenderFrameForRenderManager';
        // Denotes the end of the event CreateRenderFrameForRenderManager.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CreateRenderViewForRenderManager {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::CreateRenderViewForRenderManager';
        // Denotes the end of the event CreateRenderViewForRenderManager.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CreateWithOpener {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::CreateWithOpener';
        // Denotes the end of the event CreateWithOpener.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidFinishNavigation {
      interface X extends Base {
        args: {
          navigation_handle: string;
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::DidFinishNavigation';
        // Denotes the end of the event DidFinishNavigation.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace DidStartNavigation {
      interface X extends Base {
        args: {
          navigation_handle: string;
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::DidStartNavigation';
        // Denotes the end of the event DidStartNavigation.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace ReadyToCommitNavigation {
      interface X extends Base {
        args: {
          navigation_handle: string;
        };
        // Duration.
        dur: number;
        name: 'WebContentsImpl::ReadyToCommitNavigation';
        // Denotes the end of the event ReadyToCommitNavigation.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace WebContentsImplLoading {
    interface F extends Base {
      args: {
        URL: string;
      };
      id: string;
      name: 'WebContentsImpl Loading';
      // Denotes the ending of the async event WebContentsImplLoading.
      ph: 'F';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface S extends Base {
      args: {
        'Main FrameTreeNode id': number;
        URL: string;
      };
      id: string;
      name: 'WebContentsImpl Loading';
      // Denotes the beginning of the async event WebContentsImplLoading.
      ph: 'S';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace WebFrameWidgetImpl {
    type BeginFrame = 
      TraceEvent.WebFrameWidgetImpl.BeginFrame.X;
  
    type UpdateAllLifecyclePhases = 
      TraceEvent.WebFrameWidgetImpl.UpdateAllLifecyclePhases.X;
  
    namespace BeginFrame {
      interface X extends Base {
        args: {
          frameTime: number;
        };
        // Duration.
        dur: number;
        name: 'WebFrameWidgetImpl::beginFrame';
        // Denotes the end of the event BeginFrame.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UpdateAllLifecyclePhases {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WebFrameWidgetImpl::updateAllLifecyclePhases';
        // Denotes the end of the event UpdateAllLifecyclePhases.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace WebLocalFrameImpl {
    type CreateChildframe = 
      TraceEvent.WebLocalFrameImpl.CreateChildframe.X;
  
    type CreateFrameView = 
      TraceEvent.WebLocalFrameImpl.CreateFrameView.X;
  
    namespace CreateChildframe {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WebLocalFrameImpl::createChildframe';
        // Denotes the end of the event CreateChildframe.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace CreateFrameView {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WebLocalFrameImpl::createFrameView';
        // Denotes the end of the event CreateFrameView.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace WebScopedVirtualTimePauser {
    type PauseVirtualTime = 
      TraceEvent.WebScopedVirtualTimePauser.PauseVirtualTime.b |
      TraceEvent.WebScopedVirtualTimePauser.PauseVirtualTime.e;
  
    namespace PauseVirtualTime {
      interface b extends Base {
        args: {
          name: string;
        };
        id: string;
        name: 'WebScopedVirtualTimePauser::PauseVirtualTime';
        // Denotes the beginning of the nestable async flow event PauseVirtualTime.
        ph: 'b';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    
      interface e extends Base {
        args: {
        
        };
        id: string;
        name: 'WebScopedVirtualTimePauser::PauseVirtualTime';
        // Denotes a step into the nestable async flow event PauseVirtualTime.
        ph: 'e';
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace WebURLLoaderImpl {
    type LoadAsynchronously = 
      TraceEvent.WebURLLoaderImpl.LoadAsynchronously.X;
  
    namespace Context {
      type Cancel = 
        TraceEvent.WebURLLoaderImpl.Context.Cancel.X;
    
      type OnCompletedRequest = 
        TraceEvent.WebURLLoaderImpl.Context.OnCompletedRequest.X;
    
      type OnReceivedData = 
        TraceEvent.WebURLLoaderImpl.Context.OnReceivedData.X;
    
      type OnReceivedRedirect = 
        TraceEvent.WebURLLoaderImpl.Context.OnReceivedRedirect.X;
    
      type OnReceivedResponse = 
        TraceEvent.WebURLLoaderImpl.Context.OnReceivedResponse.X;
    
      type Start = 
        TraceEvent.WebURLLoaderImpl.Context.Start.X;
    
      namespace Cancel {
        interface X extends Base {
          args: {
          
          };
          bind_id: string;
          // Duration.
          dur: number;
          flow_in: boolean;
          id: string;
          name: 'WebURLLoaderImpl::Context::Cancel';
          // Denotes the end of the event Cancel.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace OnCompletedRequest {
        interface X extends Base {
          args: {
          
          };
          bind_id: string;
          // Duration.
          dur: number;
          flow_in: boolean;
          id: string;
          name: 'WebURLLoaderImpl::Context::OnCompletedRequest';
          // Denotes the end of the event OnCompletedRequest.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace OnReceivedData {
        interface X extends Base {
          args: {
          
          };
          bind_id: string;
          // Duration.
          dur: number;
          flow_in: boolean;
          flow_out: boolean;
          id: string;
          name: 'WebURLLoaderImpl::Context::OnReceivedData';
          // Denotes the end of the event OnReceivedData.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace OnReceivedRedirect {
        interface X extends Base {
          args: {
          
          };
          bind_id: string;
          // Duration.
          dur: number;
          flow_in: boolean;
          flow_out: boolean;
          id: string;
          name: 'WebURLLoaderImpl::Context::OnReceivedRedirect';
          // Denotes the end of the event OnReceivedRedirect.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace OnReceivedResponse {
        interface X extends Base {
          args: {
          
          };
          bind_id: string;
          // Duration.
          dur: number;
          flow_in: boolean;
          flow_out: boolean;
          id: string;
          name: 'WebURLLoaderImpl::Context::OnReceivedResponse';
          // Denotes the end of the event OnReceivedResponse.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    
      namespace Start {
        interface X extends Base {
          args: {
          
          };
          bind_id: string;
          // Duration.
          dur: number;
          flow_out: boolean;
          id: string;
          name: 'WebURLLoaderImpl::Context::Start';
          // Denotes the end of the event Start.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  
    namespace LoadAsynchronously {
      interface X extends Base {
        args: {
        
        };
        bind_id: string;
        // Duration.
        dur: number;
        flow_out: boolean;
        id: string;
        name: 'WebURLLoaderImpl::loadAsynchronously';
        // Denotes the end of the event LoadAsynchronously.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace WebViewImpl {
    type BeginFrame = 
      TraceEvent.WebViewImpl.BeginFrame.X;
  
    type HandleInputEvent = 
      TraceEvent.WebViewImpl.HandleInputEvent.X;
  
    type HandleKeyEvent = 
      TraceEvent.WebViewImpl.HandleKeyEvent.X;
  
    type SetIsAcceleratedCompositingActivetrue = 
      TraceEvent.WebViewImpl.SetIsAcceleratedCompositingActivetrue.X;
  
    type UpdateAllLifecyclePhases = 
      TraceEvent.WebViewImpl.UpdateAllLifecyclePhases.X;
  
    namespace BeginFrame {
      interface X extends Base {
        args: {
          frameTime: number;
        };
        // Duration.
        dur: number;
        name: 'WebViewImpl::beginFrame';
        // Denotes the end of the event BeginFrame.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace HandleInputEvent {
      interface X extends Base {
        args: {
          type: string;
        };
        // Duration.
        dur: number;
        name: 'WebViewImpl::handleInputEvent';
        // Denotes the end of the event HandleInputEvent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace HandleKeyEvent {
      interface X extends Base {
        args: {
          text: string;
          type: string;
        };
        // Duration.
        dur: number;
        name: 'WebViewImpl::handleKeyEvent';
        // Denotes the end of the event HandleKeyEvent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace SetIsAcceleratedCompositingActivetrue {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WebViewImpl::setIsAcceleratedCompositingActive(true)';
        // Denotes the end of the event SetIsAcceleratedCompositingActivetrue.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  
    namespace UpdateAllLifecyclePhases {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WebViewImpl::updateAllLifecyclePhases';
        // Denotes the end of the event UpdateAllLifecyclePhases.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace Widget {
    type Init = 
      TraceEvent.Widget.Init.X;
  
    namespace Init {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'Widget::Init';
        // Denotes the end of the event Init.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace WidgetHostMsg_Close_ACK {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'WidgetHostMsg_Close_ACK';
      // Denotes the end of the event WidgetHostMsg_Close_ACK.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace WidgetHostMsg_DidCommitAndDrawCompositorFrame {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'WidgetHostMsg_DidCommitAndDrawCompositorFrame';
      // Denotes the end of the event WidgetHostMsg_DidCommitAndDrawCompositorFrame.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace WidgetHostMsg_DidFirstVisuallyNonEmptyPaint {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'WidgetHostMsg_DidFirstVisuallyNonEmptyPaint';
      // Denotes the end of the event WidgetHostMsg_DidFirstVisuallyNonEmptyPaint.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace WidgetHostMsg_FrameSwapMessages {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'WidgetHostMsg_FrameSwapMessages';
      // Denotes the end of the event WidgetHostMsg_FrameSwapMessages.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace WidgetHostMsg_HasTouchEventHandlers {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'WidgetHostMsg_HasTouchEventHandlers';
      // Denotes the end of the event WidgetHostMsg_HasTouchEventHandlers.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace WidgetHostMsg_SelectionBoundsChanged {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'WidgetHostMsg_SelectionBoundsChanged';
      // Denotes the end of the event WidgetHostMsg_SelectionBoundsChanged.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace WidgetHostMsg_TextInputStateChanged {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'WidgetHostMsg_TextInputStateChanged';
      // Denotes the end of the event WidgetHostMsg_TextInputStateChanged.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace WidgetHostMsg_UpdateScreenRects_ACK {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'WidgetHostMsg_UpdateScreenRects_ACK';
      // Denotes the end of the event WidgetHostMsg_UpdateScreenRects_ACK.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace WidgetInputHandlerImpl {
    type DispatchEvent = 
      TraceEvent.WidgetInputHandlerImpl.DispatchEvent.X;
  
    namespace DispatchEvent {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'WidgetInputHandlerImpl::DispatchEvent';
        // Denotes the end of the event DispatchEvent.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace WidgetMsg_SetActive {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'WidgetMsg_SetActive';
      // Denotes the end of the event WidgetMsg_SetActive.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace WidgetMsg_SetInheritedEffectiveTouchAction {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'WidgetMsg_SetInheritedEffectiveTouchAction';
      // Denotes the end of the event WidgetMsg_SetInheritedEffectiveTouchAction.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace WidgetMsg_SetIsInert {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'WidgetMsg_SetIsInert';
      // Denotes the end of the event WidgetMsg_SetIsInert.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace WidgetMsg_SetViewportIntersection {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'WidgetMsg_SetViewportIntersection';
      // Denotes the end of the event WidgetMsg_SetViewportIntersection.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace WidgetMsg_SynchronizeVisualProperties {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'WidgetMsg_SynchronizeVisualProperties';
      // Denotes the end of the event WidgetMsg_SynchronizeVisualProperties.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace WidgetMsg_UpdateRenderThrottlingStatus {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'WidgetMsg_UpdateRenderThrottlingStatus';
      // Denotes the end of the event WidgetMsg_UpdateRenderThrottlingStatus.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace WidgetMsg_UpdateScreenRects {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'WidgetMsg_UpdateScreenRects';
      // Denotes the end of the event WidgetMsg_UpdateScreenRects.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace WidgetMsg_WasHidden {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'WidgetMsg_WasHidden';
      // Denotes the end of the event WidgetMsg_WasHidden.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace WidgetMsg_WasShown {
    interface X extends Base {
      args: {
      
      };
      // Duration.
      dur: number;
      name: 'WidgetMsg_WasShown';
      // Denotes the end of the event WidgetMsg_WasShown.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace WriteTransaction {
    interface B extends Base {
      args: {
        src_file: string;
        src_func: string;
      };
      name: 'WriteTransaction';
      // Denotes the beginning of the event WriteTransaction.
      ph: 'B';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  
    interface E extends Base {
      args: {
      
      };
      name: 'WriteTransaction';
      // Denotes the ending of the event WriteTransaction.
      ph: 'E';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace Ws {
    namespace Mojom {
      type Gpu = 
        TraceEvent.Ws.Mojom.Gpu.X;
    
      namespace Gpu {
        interface X extends Base {
          args: {
          
          };
          // Duration.
          dur: number;
          name: 'ws.mojom.Gpu';
          // Denotes the end of the event Gpu.
          ph: 'X';
          tdur: number;
          // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
          tts: number;
        }
      }
    }
  }

  namespace X509Certificate {
    type CreateFromDERCertChain = 
      TraceEvent.X509Certificate.CreateFromDERCertChain.X;
  
    namespace CreateFromDERCertChain {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'X509Certificate::CreateFromDERCertChain';
        // Denotes the end of the event CreateFromDERCertChain.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace XHRLoad {
    interface X extends Base {
      args: {
        data: {
          frame: string;
          stackTrace?: {
            columnNumber: number;
            functionName: string;
            lineNumber: number;
            scriptId: string;
            url: string;
          }[];
          url: string;
        };
      };
      // Duration.
      dur: number;
      name: 'XHRLoad';
      // Denotes the end of the event XHRLoad.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace XHRReadyStateChange {
    interface X extends Base {
      args: {
        data: {
          frame: string;
          readyState: number;
          stackTrace?: {
            columnNumber: number;
            functionName: string;
            lineNumber: number;
            scriptId: string;
            url: string;
          }[];
          url: string;
        };
      };
      // Duration.
      dur: number;
      name: 'XHRReadyStateChange';
      // Denotes the end of the event XHRReadyStateChange.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace YieldParserForScriptBlockingResources {
    interface X extends Base {
      args: {
        data: {
          columnNumber: number;
          frame: string;
          lineNumber: number;
        };
      };
      bind_id: string;
      // Duration.
      dur: number;
      flow_out: boolean;
      id: string;
      name: 'YieldParserForScriptBlockingResources';
      // Denotes the end of the event YieldParserForScriptBlockingResources.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace YieldParserForScriptLoad {
    interface X extends Base {
      args: {
        data: {
          frame: string;
          url: string;
        };
      };
      bind_id: string;
      // Duration.
      dur: number;
      flow_out: boolean;
      id: string;
      name: 'YieldParserForScriptLoad';
      // Denotes the end of the event YieldParserForScriptLoad.
      ph: 'X';
      tdur: number;
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ZeroSuggestProvider {
    type Start = 
      TraceEvent.ZeroSuggestProvider.Start.X;
  
    namespace Start {
      interface X extends Base {
        args: {
        
        };
        // Duration.
        dur: number;
        name: 'ZeroSuggestProvider::Start';
        // Denotes the end of the event Start.
        ph: 'X';
        tdur: number;
        // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
        tts: number;
      }
    }
  }

  namespace ZonesAndDomReady {
    interface R extends Base {
      args: {
        data: {
          navigationId: string;
        };
      };
      name: 'zonesAndDomReady';
      // Denotes a mark of the event ZonesAndDomReady.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }

  namespace ZonesReady {
    interface R extends Base {
      args: {
        data: {
          navigationId: string;
        };
      };
      name: 'zonesReady';
      // Denotes a mark of the event ZonesReady.
      ph: 'R';
      // Thread timestamp of the event. This value is monotonically increasing among all events generated in the same thread.
      tts: number;
    }
  }
}
